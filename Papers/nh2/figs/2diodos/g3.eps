%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 20 118 575 673
%%Creator: FreeHEP Graphics2D Driver
%%Producer: com.maplesoft.mathdoc.view.plot.paint.PlotPSGraphics2D Revision: 12753 
%%For: 
%%Title: 
%%CreationDate: lunes 14 de marzo de 2011 12:22:23 AM CST
%%LanguageLevel: 3
%%EndComments
%%BeginProlog
100 dict dup begin

%
% File: org/freehep/graphicsio.ps/PSProlog.txt
% Author: Charles Loomis
%

% Redefinitions which save some space in the output file.  These are also
% the same as the PDF operators.
/q {gsave} def
/Q {grestore} def

/n {newpath} def
/m {moveto} def
/l {lineto} def
/c {curveto} def
/h {closepath} def

/re {4 -2 roll moveto
     dup 0 exch rlineto exch 0 rlineto
     neg 0 exch rlineto closepath} def

/f {fill} def
/f* {eofill} def
/F {gsave vg&FC fill grestore} def
/F* {gsave vg&FC eofill grestore} def

/s {closepath stroke} def
/S {stroke} def

/b {closepath gsave vg&FC fill grestore
    gsave stroke grestore newpath} def
/B {gsave vg&FC fill grestore gsave stroke grestore newpath} def
/b* {closepath gsave vg&FC eofill grestore
    gsave stroke grestore newpath} def
/B* {gsave vg&FC eofill grestore gsave stroke grestore newpath} def

/g {1 array astore /vg&fcolor exch def} def
/G {setgray} def
/k {4 array astore /vg&fcolor exch def} def
/K {setcmykcolor} def
/rg {3 array astore /vg&fcolor exch def} def
/RG {setrgbcolor} def

% Initialize the fill color.
0 0 0 rg

/vg&FC {mark vg&fcolor aload pop
        counttomark 1 eq {G} if
        counttomark 3 eq {RG} if
        counttomark 4 eq {K} if
        cleartomark } def

/vg&DFC {/vg&fcolor exch def} def

/vg&C {mark exch aload pop
       counttomark 1 eq {G} if
       counttomark 3 eq {RG} if
       counttomark 4 eq {K} if
       cleartomark } def

/w {setlinewidth} def
/j {setlinejoin} def
/J {setlinecap} def
/M {setmiterlimit} def
/d {setdash} def
/i {setflat} def

/W {clip} def
/W* {eoclip} def

% Setup the default graphics state.
% (black; 1 pt. linewidth; miter join; butt-ends; solid)
/defaultGraphicsState {0 g 1 w 0 j 0 J [] 0 d} def

% Emulation of the rectangle operators for PostScript implementations
% which do not implement all Level 2 features.  This is an INCOMPLETE
% emulation; only the "x y width height rect..." form is emulated.
/*rf {gsave newpath re fill grestore} def
/*rs {gsave newpath re stroke grestore} def
/*rc {newpath re clip} def
/rf  /rectfill where {pop /rectfill}{/*rf} ifelse load def
/rs  /rectstroke where {pop /rectstroke}{/*rs} ifelse load def
/rc  /rectclip where {pop /rectclip}{/*rc} ifelse load def

% Emulation of the selectfont operator.  This includes a 20% increase in
% the fontsize which is necessary to get sizes similar to the Java fonts.
/*sf {exch findfont exch
      dup type /arraytype eq {makefont}{scalefont} ifelse setfont} bind def
/sf /selectfont where {pop {1.2 mul selectfont}}{{1.2 mul *sf}} ifelse def

% Special version of stroke which allows the dash pattern to continue
% across path segments.  (This may be needed for PostScript although
% modern printers seem to do this correctly.)
/vg&stroke {
  currentdash pop length 0 eq
  {stroke}
  {
    currentdash /vg&doffset exch def pop
    flattenpath
    {m vg&resetdash}
    {2 copy
     currentpoint
     3 -1 roll sub dup mul
     3 1 roll sub dup mul
     add sqrt
     3 1 roll l
     currentdash 3 -1 roll add setdash}
     {}
     {h vg&resetdash}
     pathforall
     stroke
     vg&resetdash
  } ifelse
} def
/vg&resetdash {currentdash pop vg&doffset setdash} def

% Initialize variables for safety.
/delta 0 def
/xv 0 def  /yv 0 def  /width 0 def  /height 0 def

% Initialize to portrait INTERNATIONAL (Letter-height, A4-width) page.
/pw 595 def  /ph 791  def  /po true def /ftp false def

% Initialize margins to 20 points.
/ml 20 def  /mr 20 def  /mt 20 def  /mb 20 def

% Temporary matrices.
/smatrix 0 def  /nmatrix 0 def

% set page size (usage: <page width><page height> setpagesize)
/setpagesize {/ph exch def /pw exch def} def

% set page orientation (usage: portrait or landscape)
/portrait {/po true def} def
/landscape {/po false def} def

% force natural size for image (usage: naturalsize)
/naturalsize {/ftp false def} def

% resize image to fill page (usage: fittopage)
/fittopage {/ftp true def} def

% set margins of the page (usage: <left><bottom><top><right> setmargins)
/setmargins {/mr exch def /mt exch def /mb exch def /ml exch def} def

% set the graphic's size (usage: <width><height> setsize)
/setsize {/gh exch def /gw exch def} def

% set the graphic's origin (usage: <x0><y0> setorigin)
/setorigin {/gy exch def /gx exch def} def

% calculate image center
/imagecenter {pw ml sub mr sub 2 div ml add
              ph mt sub mb sub 2 div mb add} def

% calculate the necessary scaling
/imagescale {po {gw}{gh} ifelse pw ml sub mr sub div
             po {gh}{gw} ifelse ph mt sub mb sub div
             2 copy lt {exch} if pop
             ftp not {1 2 copy lt {exch} if pop} if
             1 exch div /sfactor exch def
             /gw gw sfactor mul def /gh gh sfactor mul def} def

% calculate image origin
/imageorigin {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div po {add}{sub} ifelse} def

% calculate the clipping origin
/cliporigin  {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub floor
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div sub floor} def

% Set the clipping region to the bounding box.
/cliptobounds {cliporigin po {gw}{gh} ifelse 1 add
                          po {gh}{gw} ifelse 1 add rc} def

% set the base transformation matrix (usage: setbasematrix)
/setbasematrix {imageorigin translate
                po {0}{90} ifelse rotate
                sfactor sfactor neg scale
                /defaultmatrix matrix currentmatrix def} def

% The lower-right bias in drawing 1 pt. wide lines.
/bias  {q 0.5 0.5 translate} def
/unbias {Q} def

% Draw a line. (x0 y0 x1 y1 line)
/L {bias n m l S unbias} def

% Polyline primitive.
/polyline  {n m 1 exch 1 exch
           {pop currentfile token pop currentfile token pop l} for
           } def

% Draw a polyline (n x0 y0 OPL x1 y1 x2 y2 ... ... xn yn)
/OPL {bias polyline S unbias} def

% Draw a closed polyline (n x0 y0 CPL x1 y1 x2 y2 ... ... xn yn)
/CPL {bias polyline s unbias} def

% Draw a filled polyline (n x0 y0 FPL x1 y1 x2 y2 ... ... xn yn)
/FPL {polyline h f*} def

% Draw an oval. (x y w h OVL)
/OVL {matrix currentmatrix /smatrix exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      width 2 div xv add height 2 div yv add translate
      width currentlinewidth sub 2 div
      height currentlinewidth sub 2 div neg
      scale n 0 0 1 5 -2 roll arc
      smatrix setmatrix S} def

% Draw a filled oval. (x y w h FOVL)
/FOVL {matrix currentmatrix /smatrix exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      width 2 div xv add height 2 div yv add translate
      width 2 div
      height 2 div neg
      scale n 0 0 m 0 0 1 5 -2 roll arc
      h smatrix setmatrix f} def

% Draw a rounded rectangle. (x y w h arcwidth archeight RREC)
/RREC {matrix currentmatrix /smatrix exch def
      2 div /ah exch def
      2 div /aw exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      aw ah scale matrix
      currentmatrix /nmatrix exch def
      smatrix setmatrix
      n xv width add aw sub yv m
      nmatrix setmatrix
      currentpoint exch 1 add exch
      currentpoint 1 add exch 1 add exch
      1 arct smatrix setmatrix
      xv width add yv height add ah sub l
      nmatrix setmatrix
      currentpoint 1 add
      currentpoint exch 1 sub exch 1 add
      1 arct smatrix setmatrix
      xv aw add yv height add l
      nmatrix setmatrix
      currentpoint exch 1 sub exch
      currentpoint exch 1 sub exch 1 sub
      1 arct smatrix setmatrix
      xv yv ah add l
      nmatrix setmatrix
      currentpoint 1 sub
      currentpoint exch 1 add exch 1 sub
      1 arct smatrix setmatrix
      s} def

% Draw a filled rounded rectangle. (x y w h arcwidth archeight FRREC)
/FRREC{matrix currentmatrix /smatrix exch def
      2 div /ah exch def
      2 div /aw exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      aw ah scale matrix
      currentmatrix /nmatrix exch def
      smatrix setmatrix
      n xv width add aw sub yv m
      nmatrix setmatrix
      currentpoint exch 1 add exch
      currentpoint 1 add exch 1 add exch
      1 arct smatrix setmatrix
      xv width add yv height add ah sub l
      nmatrix setmatrix
      currentpoint 1 add
      currentpoint exch 1 sub exch 1 add
      1 arct smatrix setmatrix
      xv aw add yv height add l
      nmatrix setmatrix
      currentpoint exch 1 sub exch
      currentpoint exch 1 sub exch 1 sub
      1 arct smatrix setmatrix
      xv yv ah add l
      nmatrix setmatrix
      currentpoint 1 sub
      currentpoint exch 1 add exch 1 sub
      1 arct smatrix setmatrix
      h f} def

% Draw a string.  (string x y STR)
/STR {q m 1 -1 scale recshow Q} def

% Define basic plot symbols.
/xys   {/siz exch def /yv exch def /xv exch def} def
/hline {xys n xv siz 2. div sub yv m siz 0 rlineto S} def
/vline {xys n xv yv siz 2. div sub m 0 siz rlineto S} def
/plus  {xys n xv yv siz 2. div sub m 0 siz rlineto
                    xv siz 2. div sub yv m siz 0 rlineto S} def
/dot   {n 2. div 0 360 arc s} def
/fdot  {n 2. div 0 360 arc h f} def
/box   {xys n xv siz 2 sqrt div 2 div sub yv siz 2 sqrt div 2 div sub
                    siz 2 sqrt div dup rs} def
/fbox  {xys n xv siz 2 sqrt div 2 div sub yv siz 2 sqrt div 2 div sub
                       siz 2 sqrt div dup rf} def
/tridn{xys n xv yv siz 3 sqrt div add m
                       siz 2. div neg 3 sqrt 2. div siz mul neg rlineto
                       siz 0 rlineto s} def
/ftridn{xys n xv yv siz 3 sqrt div add m
                       siz 2. div neg 3 sqrt 2. div siz mul neg rlineto
                       siz 0 rlineto h f} def

% Symbols defined in terms of the others.
/star     {3 copy cross plus} def
/cross    {xys q xv yv translate 45 rotate 0 0 siz plus Q} def
/diamond  {xys q xv yv translate 45 rotate 0 0 siz box Q} def
/fdiamond {xys q xv yv translate 45 rotate 0 0 siz fbox Q} def
/triup    {xys q xv yv translate 180 rotate 0 0 siz tridn Q} def
/ftriup   {xys q xv yv translate 180 rotate 0 0 siz ftridn Q} def

% Define the composite fonts used to print Unicode strings.
% Undefine particular values in an encoding array.
/vg&undef { {exch dup 3 -1 roll /.notdef put} forall } def
/vg&redef { {3 -1 roll dup 4 2 roll put} forall } def

% usage: key encoding basefontname vg&newbasefont font
/vg&newbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    currentdict
  end
definefont
} def

% usage: key encoding basefontname vg&newskewedbasefont font
/vg&newskewedbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    exch FontMatrix exch matrix concatmatrix /FontMatrix exch def
    currentdict
  end
definefont
} def

% usage: basekey suffix vg&nconcat name
/vg&nconcat {
  2 {dup length string cvs exch} repeat
  dup length 3 -1 roll dup length 3 -1 roll add string
  dup 0 4 -1 roll dup length 5 1 roll putinterval
  dup 4 -2 roll exch putinterval cvn
} def

%usage: fontname vg&skewmatrix matrix
/vg&skewmatrix {
findfont dup /FontInfo known
  {
    /FontInfo get dup /ItalicAngle known
    {
      [ 1 0 4 -1 roll /ItalicAngle get neg dup sin exch cos div 1 0 0 ]
    }
    {pop matrix} ifelse
  }
  {pop matrix} ifelse
} def

% usage: newfontname basefontname vg&newcompositefont --
/vg&newcompositefont {
/vg&fstyle exch def
/vg&bfont exch def
/vg&fname exch def
<<
/FontStyleBits vg&fstyle
/FontType 0
/FontMatrix matrix
/FontName vg&fname
/FMapType 2
/Encoding [ 0 1 255 {pop 6} for ]
          dup 16#00 0 put % Latin
          dup 16#03 1 put % Greek
          dup 16#20 2 put % Punctuation
          dup 16#21 3 put % Arrows
          dup 16#22 4 put % MathOps
          dup 16#27 5 put % Dingbats

/FDepVector [
vg&bfont /-UC-Latin vg&nconcat UCLatinEncoding
vg&bfont vg&newbasefont

vg&bfont vg&skewmatrix
vg&bfont /-UC-Greek vg&nconcat UCGreekEncoding
/Symbol vg&newskewedbasefont

vg&bfont /-UC-Punctuation vg&nconcat UCPunctuationEncoding
vg&bfont vg&newbasefont

/Arrows-UC findfont
/MathOps-UC findfont
/Dingbats-UC findfont
/Undefined-UC findfont ]
>>
vg&fname exch definefont pop
} def

% Null encoding vector (all elements set to .notdef)
/NullEncoding [ 256 {/.notdef} repeat ] def

% Unicode Latin encoding (unicode codes \u0000-\u00ff)
/UCLatinEncoding
  ISOLatin1Encoding dup length array copy
  dup 16#60 /grave put
  [ 16#90 16#91 16#92 16#93 16#94 16#95 16#96
    16#97 16#98 16#9a 16#9b 16#9d 16#9e 16#9f
  ] vg&undef
  def

% Unicode Greek encoding (unicode codes \u0370-\u03ff)
/UCGreekEncoding
  NullEncoding dup length array copy
  << 16#91 /Alpha    16#92 /Beta      16#93 /Gamma    16#94 /Delta
     16#95 /Epsilon  16#96 /Zeta      16#97 /Eta      16#98 /Theta
     16#99 /Iota     16#9a /Kappa     16#9b /Lambda   16#9c /Mu
     16#9d /Nu       16#9e /Xi        16#9f /Omicron  16#a0 /Pi
     16#a1 /Rho      16#a3 /Sigma     16#a4 /Tau      16#a5 /Upsilon
     16#a6 /Phi      16#a7 /Chi       16#a8 /Psi      16#a9 /Omega
     16#b1 /alpha    16#b2 /beta      16#b3 /gamma    16#b4 /delta
     16#b5 /epsilon  16#b6 /zeta      16#b7 /eta      16#b8 /theta
     16#b9 /iota     16#ba /kappa     16#bb /lambda   16#bc /mu
     16#bd /nu       16#be /xi        16#bf /omicron  16#c0 /pi
     16#c1 /rho      16#c2 /sigma1    16#c3 /sigma    16#c4 /tau
     16#c5 /upsilon  16#c6 /phi1      16#c7 /chi      16#c8 /psi
     16#c9 /omega    16#7e /semicolon 16#87 /dotmath  16#d1 /theta1
     16#d2 /Upsilon1 16#d5 /phi       16#d6 /omega1
  >> vg&redef
  def

% Unicode punctuation encoding (unicode codes \u2000-\u206f)
/UCPunctuationEncoding
  NullEncoding dup length array copy
  << 16#10 /hyphen          16#11 /hyphen              16#12 /endash
     16#13 /emdash          16#18 /quoteleft           16#19 /quoteright
     16#1a /quotesinglbase  16#1b /quotesingle         16#1c /quotedblleft
     16#1d /quotedblright   16#1e /quotedblbase        16#1f /quotedbl
     16#20 /dagger          16#21 /daggerdbl           16#22 /bullet
     16#24 /period          16#26 /ellipsis            16#27 /periodcentered
     16#30 /perthousand     16#44 /fraction
     16#70 /zerosuperior    16#74 /foursuperior        16#75 /fivesuperior
     16#76 /sixsuperior     16#77 /sevensuperior       16#78 /eightsuperior
     16#79 /ninesuperior    16#7b /hyphensuperior      16#7d /parenleftsuperior
     16#7e /parenrightsuperior
     16#80 /zeroinferior    16#84 /fourinferior        16#85 /fiveinferior
     16#81 /oneinferior     16#82 /twoinferior         16#83 /threeinferior
     16#86 /sixinferior     16#87 /seveninferior       16#88 /eightinferior
     16#89 /nineinferior    16#8b /hypheninferior      16#8d /parenleftinferior
     16#8e /parenrightinferior
  >> vg&redef
  def

% Unicode mathematical operators encoding (unicode codes \u2200-\u22ff)
/UCMathOpsEncoding
  NullEncoding dup length array copy
  << 16#00 /universal       16#02 /partialdiff         16#03 /existential
     16#05 /emptyset        16#06 /Delta               16#07 /gradient
     16#08 /element         16#09 /notelement          16#0b /suchthat
     16#0f /product         16#11 /summation           16#12 /minus
     16#15 /fraction        16#17 /asteriskmath        16#19 /bullet
     16#1a /radical         16#1d /proportional        16#1e /infinity
     16#20 /angle           16#23 /bar                 16#27 /logicaland
     16#28 /logicalor       16#29 /intersection        16#2a /union
     16#2b /integral        16#34 /therefore           16#36 /colon
     16#3c /similar         16#45 /congruent           16#48 /approxequal
     16#60 /notequal        16#61 /equivalence         16#64 /lessequal
     16#65 /greaterequal    16#82 /propersubset        16#83 /propersuperset
     16#86 /reflexsubset    16#87 /reflexsuperset      16#95 /circleplus
     16#97 /circlemultiply  16#a5 /perpendicular       16#03 /existential
     16#c0 /logicaland      16#c1 /logicalor           16#c2 /intersection
     16#c3 /union           16#c4 /diamond             16#c5 /dotmath
  >> vg&redef
  def

% Unicode arrows encoding (unicode codes \u2190-\u21ff)
% Also includes those "Letterlike" unicode characters
% which are available in the symbol font. (unicode codes \u2100-\u214f)
/UCArrowsEncoding
  NullEncoding dup length array copy
  << 16#11 /Ifraktur        16#1c /Rfraktur            16#22 /trademarkserif
     16#35 /aleph
     16#90 /arrowleft       16#91 /arrowup             16#92 /arrowright
     16#93 /arrowdown       16#94 /arrowboth           16#d0 /arrowdblleft
     16#d1 /arrowdblup      16#d2 /arrowdblright       16#d3 /arrowdbldown
     16#d4 /arrowdblboth
  >> vg&redef
  def

/ZapfDingbats findfont /Encoding get
dup length array copy /UCDingbatsEncoding exch def
16#20 1 16#7f {
  dup 16#20 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
16#a0 1 16#ff {
  dup 16#40 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
UCDingbatsEncoding [ 16#c0 1 16#ff {} for ] vg&undef
[ 16#00  16#05 16#0a 16#0b  16#28 16#4c 16#4e  16#53 16#54 16#55  16#57 16#5f
  16#60  16#68 16#69 16#6a  16#6b 16#6c 16#6d  16#6e 16#6f 16#70  16#71 16#72
  16#73  16#74 16#75 16#95  16#96 16#97 16#b0  16#bf
] vg&undef pop

% Define the base fonts which don't change.
/Undefined-UC NullEncoding       /Helvetica    vg&newbasefont pop
/MathOps-UC   UCMathOpsEncoding  /Symbol       vg&newbasefont pop
/Arrows-UC    UCArrowsEncoding   /Symbol       vg&newbasefont pop
/Dingbats-UC  UCDingbatsEncoding /ZapfDingbats vg&newbasefont pop

% Make the SansSerif composite fonts.
/SansSerif /Helvetica 16#00 vg&newcompositefont
/SansSerif-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/SansSerif-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/SansSerif-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the Serif composite fonts.
/Serif /Times-Roman 16#00 vg&newcompositefont
/Serif-Bold /Times-Bold 16#01 vg&newcompositefont
/Serif-Italic /Times-Italic 16#02 vg&newcompositefont
/Serif-BoldItalic /Times-BoldItalic 16#03 vg&newcompositefont

% Make the Monospaced composite fonts.
/Monospaced /Courier 16#00 vg&newcompositefont
/Monospaced-Bold /Courier-Bold 16#01 vg&newcompositefont
/Monospaced-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Monospaced-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont

% Make the Dialog composite fonts.
/Dialog /Helvetica 16#00 vg&newcompositefont
/Dialog-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/Dialog-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/Dialog-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the DialogInput composite fonts.
/DialogInput /Helvetica 16#00 vg&newcompositefont
/DialogInput-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/DialogInput-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/DialogInput-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the Typewriter composite fonts (JDK 1.1 only).
/Typewriter /Courier 16#00 vg&newcompositefont
/Typewriter-Bold /Courier-Bold 16#01 vg&newcompositefont
/Typewriter-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Typewriter-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont


/cfontH {
 dup /fontsize exch def /SansSerif exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHB {
  dup /fontsize exch def /SansSerif-Bold exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHI {
 dup /fontsize exch def /SansSerif-Italic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHBI {
 dup /fontsize exch def /SansSerif-BoldItalic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def

/cfontT {
 dup /fontsize exch def /Serif exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTB {
 dup /fontsize exch def /Serif-Bold exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTI {
 dup /fontsize exch def /Serif-Italic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTBI {
 dup /fontsize exch def /Serif-BoldItalic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def

/cfontC {
 dup /fontsize exch def /Typewriter exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCB {
 dup /fontsize exch def /Typewriter-Bold exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCI {
 dup /fontsize exch def /Typewriter-Italic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCBI {
 dup /fontsize exch def /Typewriter-BoldItalic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def

% Darken or lighten the current color.
/darken {0.7 exch exp 3 copy
         q 4 -1 roll vg&C
         currentrgbcolor 3 {4 -2 roll mul} repeat
         3 array astore Q} def

/displayColorMap
<< /Cr   [1.00 0.00 0.00]       /Cg     [0.00 1.00 0.00]
   /Cb   [0.00 0.00 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.00 0.00]       /CGg    [0.00 1.00 0.00]
   /CGb  [0.00 0.00 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.00 0.00]       /CIg    [0.00 1.00 0.00]
   /CIb  [0.00 0.00 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/printColorMap
<< /Cr   [1.00 0.33 0.33]       /Cg     [0.33 1.00 0.33]
   /Cb   [0.33 0.33 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.33 0.33]       /CGg    [0.33 1.00 0.33]
   /CGb  [0.33 0.33 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.33 0.33]       /CIg    [0.33 1.00 0.33]
   /CIb  [0.33 0.33 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/grayColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [0.75]                 /CGg    [1   ]
   /CGb  [0.50]                 /CGc    [0.75]
   /CGm  [0.50]                 /CGy    [1   ]
   /CGo  [0.75]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [0.25]
   /CGgr [0.50]                 /CGgrd  [0.75]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

/bwColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [1   ]                 /CGg    [1   ]
   /CGb  [1   ]                 /CGc    [1   ]
   /CGm  [1   ]                 /CGy    [1   ]
   /CGo  [1   ]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [1   ]
   /CGgr [1   ]                 /CGgrd  [1   ]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

%
% The following routines handle the alignment of and printing of
% tagged strings.
%

% Predefine the bounding box values.
/bbllx 0 def /bblly 0 def /bburx 0 def /bbury 0 def

% This routine pops the first unicode character off of a string and returns
% the remainder of the string, the character code of first character,
% and a "true" if the string was non-zero length.
% <string>      popfirst <remaining string> <true>
% <null string> popfirst <false>
/popfirst {
  dup length 1 gt
    {dup 0 get /vg&fbyte exch def
     dup 1 get /vg&cbyte exch def
     dup length 2 sub 2 exch getinterval true}
    {pop false} ifelse
} def

% This routine shows a single unicode character given the font and
% character codes.
% <font code> <char code> unicharshow --
/unicharshow {
  2 string
  dup 0 5 -1 roll put
  dup 1 4 -1 roll put
  internalshow
} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and showing the string for recshow.
% <string> internalshow --
/internalshow {show} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and stroking various ornaments.
% <string> internalstroke --
/internalstroke {S} def

% Sets up internalshow to use the null device to determine string size.
% -- nullinternalshow --
/nullinternalshow {/internalshow {false charpath flattenpath
                                  pathbbox updatebbox} def} def

% Sets up internalstroke to use the null device to determine string size.
% -- nullinternalstroke --
/nullinternalstroke {
 /internalstroke {flattenpath pathbbox updatebbox} def} def

% This routine tests to see if the character code matches the first
% character of a string.
% <char code> <string> testchar <char code> <true or false>
/testchar {exch dup 3 -1 roll 0 get eq} def

% Raise the text baseline for superscripts.
% -- raise --
/raise {
  0 fontsize 2 div rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-raise the text baseline for superscripts.
% -- unraise --
/unraise {
  /fontsize fontsize 1.5 mul def
  0 fontsize 2 div neg rmoveto
} def

% Lower the text baseline for subscripts.
% -- lower --
/lower {
  0 fontsize 3 div neg rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-lower the text baseline for subscripts.
% -- unlower --
/unlower {
  /fontsize fontsize 1.5 mul def
  0 fontsize 3 div rmoveto
} def

% Compare the top two elements on the stack and leave only the
% larger one.
/maxval {2 copy gt {pop} {exch pop} ifelse} def

% Tokenize a string.  Do not use the usual PostScript token because
% parentheses will not be interpreted correctly because of rescanning
% of the string.
/vg&token {/vg&string exch def /vg&index -1 def /vg&level 0 def
0 2 vg&string length 2 sub {
  dup dup 1 add exch vg&string exch get 8 bitshift vg&string 3 -1 roll get or
  dup 16#f0fe eq {pop 1}{16#f0ff eq {-1}{0} ifelse} ifelse
  /vg&level exch vg&level add def
  vg&level 0 eq {/vg&index exch def exit} if pop
} for
vg&index 0 ge {
  vg&string vg&index 2 add dup vg&string length exch sub getinterval
  vg&index 2 gt {vg&string 2 vg&index 2 sub getinterval}{()} ifelse
  true}
{false} ifelse
} bind def

% Recursively show an unicode string.
% <string> recshow --
/recshow {
  popfirst
  {
    % Test to see if this is a string attribute.
    vg&fbyte 16#f0 and 16#e0 eq
    {
      q

      % Font style.
      currentfont dup /FontStyleBits known {/FontStyleBits get}{pop 0} ifelse
      vg&cbyte or vg&fontstyles exch get fontsize exch exec

      vg&token pop recshow currentpoint Q m recshow
    }
    {
      vg&fbyte 16#F8 and 16#F0 eq {

        % Superscript and/or subscript.
        vg&cbyte 16#00 eq {
          vg&token pop exch vg&token pop 3 -1 roll
          q raise recshow unraise currentpoint pop Q exch
          q lower recshow unlower currentpoint pop Q
          maxval currentpoint exch pop m recshow } if

        % Strikeout.
        vg&cbyte 16#01 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll fontsize 3 div add moveto
          fontsize 3 div add lineto internalstroke Q
          recshow} if

        % Underline.
        vg&cbyte 16#02 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dashed underline.
        vg&cbyte 16#03 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J [ vg&uthick 5 mul vg&uthick 2 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dotted underline.
        vg&cbyte 16#04 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 1 J [ 0 vg&uthick 3 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Thick underline.
        vg&cbyte 16#05 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Gray thick underline.
        vg&cbyte 16#06 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w 0.5 setgray
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Overbar.
        vg&cbyte 16#07 eq {
          vg&token pop dup stringsize relative 4 1 roll pop pop exch
          3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          vg&uoffset neg add dup currentpoint pop exch m l internalstroke Q
          recshow} if
      }
      {
        vg&fbyte vg&cbyte unicharshow recshow
      } ifelse
    } ifelse
  } if
} def

% Get the underline position and thickness from the current font.
/vg&underline {

currentfont dup /FontType get 0 eq {/FDepVector get 0 get} if
dup dup /FontInfo known {
  /FontInfo get dup
  dup /UnderlinePosition known {
    /UnderlinePosition get /vg&uoffset exch def
  }
  {
    pop /vg&uoffset 0 def
  } ifelse
  dup /UnderlineThickness known {
    /UnderlineThickness get /vg&uthick exch def
  }
  {
    pop /vg&uthick 0 def
  } ifelse
}
{
  pop /vg&uoffset 0 def /vg&uthick 0 def
} ifelse
/FontMatrix get
currentfont dup /FontType get 0 eq
{/FontMatrix get matrix concatmatrix}{pop} ifelse
dup 0 vg&uoffset 3 -1 roll transform /vg&uoffset exch def pop
0 vg&uthick 3 -1 roll transform /vg&uthick exch def pop
} def

% Make a frame with the coordinates on the stack.
% <llx> <lly> <urx> <ury> frame --
/frame {4 copy m 3 1 roll exch l 4 -2 roll l l h} def

% Resets the accumulated bounding box to a degenerate box at the
% current point.
% -- resetbbox --
/resetbbox {
  currentpoint 2 copy
  /bbury exch def
  /bburx exch def
  /bblly exch def
  /bbllx exch def
} def

% Update the accumulated bounding box.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/updatebbox {
  dup bbury gt {/bbury exch def} {pop} ifelse
  dup bburx gt {/bburx exch def} {pop} ifelse
  dup bblly lt {/bblly exch def} {pop} ifelse
  dup bbllx lt {/bbllx exch def} {pop} ifelse
} def

% Set the bounding box to the values on the stack.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/restorebbox {
  /bbury exch def /bburx exch def /bblly exch def /bbllx exch def
} def

% Push the accumulated bounding box onto the stack.
% -- pushbbox <llx> <lly> <urx> <ury>
/pushbbox {bbllx bblly bburx bbury} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> inflate <llx> <lly> <urx> <ury>
/inflate {
  2 {fontsize 0.2 mul add 4 1 roll} repeat
  2 {fontsize 0.2 mul sub 4 1 roll} repeat
} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> relative <llx> <lly> <urx> <ury>
/relative {
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
} def

% Returns the size of a string appropriate for recshow.
% <string> stringsize <llx> <lly> <urx> <ury>
/stringsize {
  pushbbox /internalshow load /internalstroke load 7 -1 roll
  q
  nulldevice 0 0 m
  nullinternalshow nullinternalstroke
  resetbbox
  recshow
  /internalstroke exch def /internalshow exch def
  pushbbox 8 -4 roll restorebbox
  Q
} def

% Calculate values for string positioning.
/calcval {4 copy
  3 -1 roll sub /widy exch def sub neg /widx exch def
  pop pop /dy exch def /dx exch def} def

% Utilities to position a string.
% First letter (U=upper, C=center, B=baseline, L=lower)
% Second letter (L=left, C=center, R=right)
/align [
{calcval dx neg widy dy add neg rmoveto} % UL
{calcval dx neg widy 2 div dy add neg rmoveto} % CL
{calcval dx neg 0 rmoveto} % BL
{calcval dx neg dy neg rmoveto} % LL
{calcval widx dx add neg widy dy add neg rmoveto} % UR
{calcval widx dx add neg widy 2 div dy add neg rmoveto} % CR
{calcval widx dx add neg 0 rmoveto} % BR
{calcval widx dx add neg dy neg rmoveto} % LR
{calcval widx 2 div dx add neg widy dy add neg rmoveto} % UC
{calcval widx 2 div dx add neg widy 2 div dy add neg rmoveto} % CC
{calcval widx 2 div dx add neg 0 rmoveto} % BC
{calcval widx 2 div dx add neg dy neg rmoveto} % LC
] def

/vg&str {m q 1 -1 scale dup stringsize 4 copy align 11 -1 roll get exec
         q inflate relative frame exch exec Q recshow Q} def

end /procDict exch def
%%EndProlog

%%BeginSetup
save
procDict begin
printColorMap begin
595 791 setpagesize
20 20 20 20 setmargins
0 0 setorigin
400 400 setsize
fittopage
portrait
imagescale
cliptobounds
setbasematrix
/Helvetica 10 sf
defaultGraphicsState
%%EndSetup

0 0 0 RG
[ 1.00000 0 0 1.00000 0 0 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore
1.00000 1.00000 1.00000 RG
newpath
0 0 m
400.000 0 l
400.000 400.000 l
0 400.000 l
0 0 l
h
f
0 0 0 RG
0 J
1 j
[ 1.00000 0 0 1.00000 0 0 ] concat
[ 1.00000 0 0 1.00000 0 0 ] concat
q
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 0 390 390 rc
2 J
0 j
0 J
1 j
q
0.647059 0.647059 0.647059 RG
Q
2 J
0 j
0 J
1 j
q
0.647059 0.647059 0.647059 RG
Q
2 J
0 j
0 J
1 j
q
q
2.00000 w
1.00000 0 0 RG
57.0000 1.00519 331.994 382.494 rc
newpath
-311.917 262.697 m
75.6062 230.277 l
304.803 194.874 l
385.252 156.587 l
344.122 116.467 l
255.932 85.3864 l
171.929 63.3322 l
134.116 56.0942 l
149.891 63.0838 l
197.688 78.5409 l
254.690 97.1875 l
305.865 115.850 l
344.621 133.118 l
369.709 148.502 l
382.625 161.935 l
385.977 173.526 l
382.541 183.475 l
374.829 191.945 l
364.843 199.152 l
354.067 205.279 l
343.520 210.490 l
333.843 214.928 l
325.395 218.716 l
318.334 221.958 l
312.686 224.744 l
308.399 227.146 l
305.383 229.223 l
303.540 231.020 l
302.788 232.570 l
303.088 233.888 l
304.465 234.971 l
307.045 235.789 l
311.090 236.273 l
317.046 236.296 l
325.529 235.642 l
337.285 233.949 l
352.710 230.635 l
370.526 224.787 l
384.585 215.051 l
378.352 199.640 l
320.936 176.663 l
175.147 144.687 l
-63.0620 105.499 l
S
cliprestore
newpath
0 0 m
0 390.000 l
390.000 390.000 l
390.000 0 l
h
W
Q
q
0 1.00000 0 RG
58.0000 2.00519 329.994 380.494 rc
cliprestore
newpath
0 0 m
0 390.000 l
390.000 390.000 l
390.000 0 l
h
W
Q
Q
q
2 J
0 j
q
0 J
1 j
newpath
353.295 273.644 m
353.295 276.244 l
S
newpath
287.896 273.644 m
287.896 276.244 l
S
newpath
222.497 273.644 m
222.497 276.244 l
S
newpath
157.098 273.644 m
157.098 276.244 l
S
newpath
91.6994 273.644 m
91.6994 276.244 l
S
newpath
56.0000 273.644 m
385.994 273.644 l
S
Q
0 J
1 j
[ 1.00000 0 0 1.00000 0 0 ] concat
q
[ 1.00000 0 0 1.00000 0 0 ] concat
q
-163118 296 14 15 rc
Q
cliprestore
newpath
0 0 m
0 390.000 l
390.000 390.000 l
390.000 0 l
h
W
Q
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0 0 1.00000 0 0 ] concat
q
q
newpath
59.0000 273.644 m
59.0000 278.844 l
S
Q
q
newpath
124.398 273.644 m
124.398 278.844 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
113.468 292.750 m
113.468 291.770 113.617 290.924 113.914 290.210  c
114.210 289.497 114.604 288.968 115.093 288.625  c
115.479 288.354 115.875 288.218 116.281 288.218  c
116.937 288.218 117.526 288.552 118.046 289.218  c
118.703 290.052 119.031 291.182 119.031 292.609  c
119.031 293.609 118.888 294.458 118.601 295.156  c
118.315 295.854 117.947 296.362 117.500 296.679  c
117.052 296.997 116.625 297.156 116.218 297.156  c
115.395 297.156 114.708 296.671 114.156 295.703  c
113.697 294.880 113.468 293.895 113.468 292.750  c
h
114.718 292.906 m
114.718 294.093 114.864 295.062 115.156 295.812  c
115.395 296.437 115.755 296.750 116.234 296.750  c
116.463 296.750 116.700 296.648 116.945 296.445  c
117.190 296.242 117.375 295.895 117.500 295.406  c
117.697 294.687 117.796 293.661 117.796 292.328  c
117.796 291.349 117.692 290.531 117.484 289.875  c
117.338 289.385 117.140 289.041 116.890 288.843  c
116.724 288.708 116.515 288.640 116.265 288.640  c
115.984 288.640 115.729 288.765 115.500 289.015  c
115.197 289.369 114.992 289.924 114.882 290.679  c
114.773 291.434 114.718 292.177 114.718 292.906  c
h
121.125 295.765 m
121.322 295.765 121.489 295.835 121.625 295.976  c
121.760 296.117 121.828 296.281 121.828 296.468  c
121.828 296.666 121.760 296.833 121.625 296.968  c
121.489 297.104 121.322 297.171 121.125 297.171  c
120.927 297.171 120.760 297.104 120.625 296.968  c
120.489 296.833 120.421 296.666 120.421 296.468  c
120.421 296.270 120.489 296.104 120.625 295.968  c
120.760 295.833 120.927 295.765 121.125 295.765  c
h
123.437 297.171 m
123.437 296.937 l
123.989 296.937 124.502 296.812 124.976 296.562  c
125.450 296.312 125.908 295.877 126.351 295.257  c
126.794 294.638 127.099 293.958 127.265 293.218  c
126.599 293.645 126.000 293.859 125.468 293.859  c
124.864 293.859 124.346 293.627 123.914 293.164  c
123.481 292.700 123.265 292.078 123.265 291.296  c
123.265 290.546 123.479 289.875 123.906 289.281  c
124.427 288.572 125.109 288.218 125.953 288.218  c
126.661 288.218 127.265 288.510 127.765 289.093  c
128.380 289.812 128.687 290.703 128.687 291.765  c
128.687 292.724 128.453 293.617 127.984 294.445  c
127.515 295.273 126.864 295.958 126.031 296.500  c
125.343 296.947 124.599 297.171 123.796 297.171  c
123.437 297.171 l
h
127.375 292.750 m
127.447 292.197 127.484 291.760 127.484 291.437  c
127.484 291.020 127.414 290.575 127.273 290.101  c
127.132 289.627 126.934 289.263 126.679 289.007  c
126.424 288.752 126.135 288.625 125.812 288.625  c
125.437 288.625 125.106 288.794 124.820 289.132  c
124.533 289.471 124.390 289.974 124.390 290.640  c
124.390 291.536 124.578 292.234 124.953 292.734  c
125.234 293.099 125.572 293.281 125.968 293.281  c
126.166 293.281 126.398 293.234 126.664 293.140  c
126.929 293.046 127.166 292.916 127.375 292.750  c
h
129.937 297.171 m
129.937 296.937 l
130.489 296.937 131.002 296.812 131.476 296.562  c
131.950 296.312 132.408 295.877 132.851 295.257  c
133.294 294.638 133.599 293.958 133.765 293.218  c
133.099 293.645 132.500 293.859 131.968 293.859  c
131.364 293.859 130.846 293.627 130.414 293.164  c
129.981 292.700 129.765 292.078 129.765 291.296  c
129.765 290.546 129.979 289.875 130.406 289.281  c
130.927 288.572 131.609 288.218 132.453 288.218  c
133.161 288.218 133.765 288.510 134.265 289.093  c
134.880 289.812 135.187 290.703 135.187 291.765  c
135.187 292.724 134.953 293.617 134.484 294.445  c
134.015 295.273 133.364 295.958 132.531 296.500  c
131.843 296.947 131.099 297.171 130.296 297.171  c
129.937 297.171 l
h
133.875 292.750 m
133.947 292.197 133.984 291.760 133.984 291.437  c
133.984 291.020 133.914 290.575 133.773 290.101  c
133.632 289.627 133.434 289.263 133.179 289.007  c
132.924 288.752 132.635 288.625 132.312 288.625  c
131.937 288.625 131.606 288.794 131.320 289.132  c
131.033 289.471 130.890 289.974 130.890 290.640  c
130.890 291.536 131.078 292.234 131.453 292.734  c
131.734 293.099 132.072 293.281 132.468 293.281  c
132.666 293.281 132.898 293.234 133.164 293.140  c
133.429 293.046 133.666 292.916 133.875 292.750  c
h
136.437 297.171 m
136.437 296.937 l
136.989 296.937 137.502 296.812 137.976 296.562  c
138.450 296.312 138.908 295.877 139.351 295.257  c
139.794 294.638 140.099 293.958 140.265 293.218  c
139.599 293.645 139.000 293.859 138.468 293.859  c
137.864 293.859 137.346 293.627 136.914 293.164  c
136.481 292.700 136.265 292.078 136.265 291.296  c
136.265 290.546 136.479 289.875 136.906 289.281  c
137.427 288.572 138.109 288.218 138.953 288.218  c
139.661 288.218 140.265 288.510 140.765 289.093  c
141.380 289.812 141.687 290.703 141.687 291.765  c
141.687 292.724 141.453 293.617 140.984 294.445  c
140.515 295.273 139.864 295.958 139.031 296.500  c
138.343 296.947 137.599 297.171 136.796 297.171  c
136.437 297.171 l
h
140.375 292.750 m
140.447 292.197 140.484 291.760 140.484 291.437  c
140.484 291.020 140.414 290.575 140.273 290.101  c
140.132 289.627 139.934 289.263 139.679 289.007  c
139.424 288.752 139.135 288.625 138.812 288.625  c
138.437 288.625 138.106 288.794 137.820 289.132  c
137.533 289.471 137.390 289.974 137.390 290.640  c
137.390 291.536 137.578 292.234 137.953 292.734  c
138.234 293.099 138.572 293.281 138.968 293.281  c
139.166 293.281 139.398 293.234 139.664 293.140  c
139.929 293.046 140.166 292.916 140.375 292.750  c
h
148.203 295.343 m
147.609 297.000 l
142.531 297.000 l
142.531 296.765 l
144.020 295.401 145.070 294.286 145.679 293.421  c
146.289 292.557 146.593 291.770 146.593 291.062  c
146.593 290.510 146.427 290.059 146.093 289.710  c
145.760 289.362 145.359 289.187 144.890 289.187  c
144.474 289.187 144.096 289.309 143.757 289.554  c
143.419 289.799 143.171 290.161 143.015 290.640  c
142.781 290.640 l
142.885 289.859 143.156 289.260 143.593 288.843  c
144.031 288.427 144.578 288.218 145.234 288.218  c
145.932 288.218 146.515 288.442 146.984 288.890  c
147.453 289.338 147.687 289.864 147.687 290.468  c
147.687 290.906 147.583 291.343 147.375 291.781  c
147.062 292.468 146.557 293.192 145.859 293.953  c
144.807 295.109 144.145 295.807 143.875 296.046  c
146.125 296.046 l
146.583 296.046 146.903 296.028 147.085 295.992  c
147.268 295.955 147.434 295.885 147.585 295.781  c
147.737 295.677 147.864 295.531 147.968 295.343  c
148.203 295.343 l
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
newpath
189.797 273.644 m
189.797 278.844 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
178.468 292.750 m
178.468 291.770 178.617 290.924 178.914 290.210  c
179.210 289.497 179.604 288.968 180.093 288.625  c
180.479 288.354 180.875 288.218 181.281 288.218  c
181.937 288.218 182.526 288.552 183.046 289.218  c
183.703 290.052 184.031 291.182 184.031 292.609  c
184.031 293.609 183.888 294.458 183.601 295.156  c
183.315 295.854 182.947 296.362 182.500 296.679  c
182.052 296.997 181.625 297.156 181.218 297.156  c
180.395 297.156 179.708 296.671 179.156 295.703  c
178.697 294.880 178.468 293.895 178.468 292.750  c
h
179.718 292.906 m
179.718 294.093 179.864 295.062 180.156 295.812  c
180.395 296.437 180.755 296.750 181.234 296.750  c
181.463 296.750 181.700 296.648 181.945 296.445  c
182.190 296.242 182.375 295.895 182.500 295.406  c
182.697 294.687 182.796 293.661 182.796 292.328  c
182.796 291.349 182.692 290.531 182.484 289.875  c
182.338 289.385 182.140 289.041 181.890 288.843  c
181.724 288.708 181.515 288.640 181.265 288.640  c
180.984 288.640 180.729 288.765 180.500 289.015  c
180.197 289.369 179.992 289.924 179.882 290.679  c
179.773 291.434 179.718 292.177 179.718 292.906  c
h
186.125 295.765 m
186.322 295.765 186.489 295.835 186.625 295.976  c
186.760 296.117 186.828 296.281 186.828 296.468  c
186.828 296.666 186.760 296.833 186.625 296.968  c
186.489 297.104 186.322 297.171 186.125 297.171  c
185.927 297.171 185.760 297.104 185.625 296.968  c
185.489 296.833 185.421 296.666 185.421 296.468  c
185.421 296.270 185.489 296.104 185.625 295.968  c
185.760 295.833 185.927 295.765 186.125 295.765  c
h
188.437 297.171 m
188.437 296.937 l
188.989 296.937 189.502 296.812 189.976 296.562  c
190.450 296.312 190.908 295.877 191.351 295.257  c
191.794 294.638 192.099 293.958 192.265 293.218  c
191.599 293.645 191.000 293.859 190.468 293.859  c
189.864 293.859 189.346 293.627 188.914 293.164  c
188.481 292.700 188.265 292.078 188.265 291.296  c
188.265 290.546 188.479 289.875 188.906 289.281  c
189.427 288.572 190.109 288.218 190.953 288.218  c
191.661 288.218 192.265 288.510 192.765 289.093  c
193.380 289.812 193.687 290.703 193.687 291.765  c
193.687 292.724 193.453 293.617 192.984 294.445  c
192.515 295.273 191.864 295.958 191.031 296.500  c
190.343 296.947 189.599 297.171 188.796 297.171  c
188.437 297.171 l
h
192.375 292.750 m
192.447 292.197 192.484 291.760 192.484 291.437  c
192.484 291.020 192.414 290.575 192.273 290.101  c
192.132 289.627 191.934 289.263 191.679 289.007  c
191.424 288.752 191.135 288.625 190.812 288.625  c
190.437 288.625 190.106 288.794 189.820 289.132  c
189.533 289.471 189.390 289.974 189.390 290.640  c
189.390 291.536 189.578 292.234 189.953 292.734  c
190.234 293.099 190.572 293.281 190.968 293.281  c
191.166 293.281 191.398 293.234 191.664 293.140  c
191.929 293.046 192.166 292.916 192.375 292.750  c
h
194.937 297.171 m
194.937 296.937 l
195.489 296.937 196.002 296.812 196.476 296.562  c
196.950 296.312 197.408 295.877 197.851 295.257  c
198.294 294.638 198.599 293.958 198.765 293.218  c
198.099 293.645 197.500 293.859 196.968 293.859  c
196.364 293.859 195.846 293.627 195.414 293.164  c
194.981 292.700 194.765 292.078 194.765 291.296  c
194.765 290.546 194.979 289.875 195.406 289.281  c
195.927 288.572 196.609 288.218 197.453 288.218  c
198.161 288.218 198.765 288.510 199.265 289.093  c
199.880 289.812 200.187 290.703 200.187 291.765  c
200.187 292.724 199.953 293.617 199.484 294.445  c
199.015 295.273 198.364 295.958 197.531 296.500  c
196.843 296.947 196.099 297.171 195.296 297.171  c
194.937 297.171 l
h
198.875 292.750 m
198.947 292.197 198.984 291.760 198.984 291.437  c
198.984 291.020 198.914 290.575 198.773 290.101  c
198.632 289.627 198.434 289.263 198.179 289.007  c
197.924 288.752 197.635 288.625 197.312 288.625  c
196.937 288.625 196.606 288.794 196.320 289.132  c
196.033 289.471 195.890 289.974 195.890 290.640  c
195.890 291.536 196.078 292.234 196.453 292.734  c
196.734 293.099 197.072 293.281 197.468 293.281  c
197.666 293.281 197.898 293.234 198.164 293.140  c
198.429 293.046 198.666 292.916 198.875 292.750  c
h
201.437 297.171 m
201.437 296.937 l
201.989 296.937 202.502 296.812 202.976 296.562  c
203.450 296.312 203.908 295.877 204.351 295.257  c
204.794 294.638 205.099 293.958 205.265 293.218  c
204.599 293.645 204.000 293.859 203.468 293.859  c
202.864 293.859 202.346 293.627 201.914 293.164  c
201.481 292.700 201.265 292.078 201.265 291.296  c
201.265 290.546 201.479 289.875 201.906 289.281  c
202.427 288.572 203.109 288.218 203.953 288.218  c
204.661 288.218 205.265 288.510 205.765 289.093  c
206.380 289.812 206.687 290.703 206.687 291.765  c
206.687 292.724 206.453 293.617 205.984 294.445  c
205.515 295.273 204.864 295.958 204.031 296.500  c
203.343 296.947 202.599 297.171 201.796 297.171  c
201.437 297.171 l
h
205.375 292.750 m
205.447 292.197 205.484 291.760 205.484 291.437  c
205.484 291.020 205.414 290.575 205.273 290.101  c
205.132 289.627 204.934 289.263 204.679 289.007  c
204.424 288.752 204.135 288.625 203.812 288.625  c
203.437 288.625 203.106 288.794 202.820 289.132  c
202.533 289.471 202.390 289.974 202.390 290.640  c
202.390 291.536 202.578 292.234 202.953 292.734  c
203.234 293.099 203.572 293.281 203.968 293.281  c
204.166 293.281 204.398 293.234 204.664 293.140  c
204.929 293.046 205.166 292.916 205.375 292.750  c
h
213.296 293.828 m
213.296 294.734 l
212.140 294.734 l
212.140 297.000 l
211.093 297.000 l
211.093 294.734 l
207.453 294.734 l
207.453 293.921 l
211.453 288.218 l
212.140 288.218 l
212.140 293.828 l
213.296 293.828 l
h
211.093 293.828 m
211.093 289.546 l
208.078 293.828 l
211.093 293.828 l
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
newpath
255.196 273.644 m
255.196 278.844 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
244.468 292.750 m
244.468 291.770 244.617 290.924 244.914 290.210  c
245.210 289.497 245.604 288.968 246.093 288.625  c
246.479 288.354 246.875 288.218 247.281 288.218  c
247.937 288.218 248.526 288.552 249.046 289.218  c
249.703 290.052 250.031 291.182 250.031 292.609  c
250.031 293.609 249.888 294.458 249.601 295.156  c
249.315 295.854 248.947 296.362 248.500 296.679  c
248.052 296.997 247.625 297.156 247.218 297.156  c
246.395 297.156 245.708 296.671 245.156 295.703  c
244.697 294.880 244.468 293.895 244.468 292.750  c
h
245.718 292.906 m
245.718 294.093 245.864 295.062 246.156 295.812  c
246.395 296.437 246.755 296.750 247.234 296.750  c
247.463 296.750 247.700 296.648 247.945 296.445  c
248.190 296.242 248.375 295.895 248.500 295.406  c
248.697 294.687 248.796 293.661 248.796 292.328  c
248.796 291.349 248.692 290.531 248.484 289.875  c
248.338 289.385 248.140 289.041 247.890 288.843  c
247.724 288.708 247.515 288.640 247.265 288.640  c
246.984 288.640 246.729 288.765 246.500 289.015  c
246.197 289.369 245.992 289.924 245.882 290.679  c
245.773 291.434 245.718 292.177 245.718 292.906  c
h
252.125 295.765 m
252.322 295.765 252.489 295.835 252.625 295.976  c
252.760 296.117 252.828 296.281 252.828 296.468  c
252.828 296.666 252.760 296.833 252.625 296.968  c
252.489 297.104 252.322 297.171 252.125 297.171  c
251.927 297.171 251.760 297.104 251.625 296.968  c
251.489 296.833 251.421 296.666 251.421 296.468  c
251.421 296.270 251.489 296.104 251.625 295.968  c
251.760 295.833 251.927 295.765 252.125 295.765  c
h
254.437 297.171 m
254.437 296.937 l
254.989 296.937 255.502 296.812 255.976 296.562  c
256.450 296.312 256.908 295.877 257.351 295.257  c
257.794 294.638 258.099 293.958 258.265 293.218  c
257.599 293.645 257.000 293.859 256.468 293.859  c
255.864 293.859 255.346 293.627 254.914 293.164  c
254.481 292.700 254.265 292.078 254.265 291.296  c
254.265 290.546 254.479 289.875 254.906 289.281  c
255.427 288.572 256.109 288.218 256.953 288.218  c
257.661 288.218 258.265 288.510 258.765 289.093  c
259.380 289.812 259.687 290.703 259.687 291.765  c
259.687 292.724 259.453 293.617 258.984 294.445  c
258.515 295.273 257.864 295.958 257.031 296.500  c
256.343 296.947 255.599 297.171 254.796 297.171  c
254.437 297.171 l
h
258.375 292.750 m
258.447 292.197 258.484 291.760 258.484 291.437  c
258.484 291.020 258.414 290.575 258.273 290.101  c
258.132 289.627 257.934 289.263 257.679 289.007  c
257.424 288.752 257.135 288.625 256.812 288.625  c
256.437 288.625 256.106 288.794 255.820 289.132  c
255.533 289.471 255.390 289.974 255.390 290.640  c
255.390 291.536 255.578 292.234 255.953 292.734  c
256.234 293.099 256.572 293.281 256.968 293.281  c
257.166 293.281 257.398 293.234 257.664 293.140  c
257.929 293.046 258.166 292.916 258.375 292.750  c
h
260.937 297.171 m
260.937 296.937 l
261.489 296.937 262.002 296.812 262.476 296.562  c
262.950 296.312 263.408 295.877 263.851 295.257  c
264.294 294.638 264.599 293.958 264.765 293.218  c
264.099 293.645 263.500 293.859 262.968 293.859  c
262.364 293.859 261.846 293.627 261.414 293.164  c
260.981 292.700 260.765 292.078 260.765 291.296  c
260.765 290.546 260.979 289.875 261.406 289.281  c
261.927 288.572 262.609 288.218 263.453 288.218  c
264.161 288.218 264.765 288.510 265.265 289.093  c
265.880 289.812 266.187 290.703 266.187 291.765  c
266.187 292.724 265.953 293.617 265.484 294.445  c
265.015 295.273 264.364 295.958 263.531 296.500  c
262.843 296.947 262.099 297.171 261.296 297.171  c
260.937 297.171 l
h
264.875 292.750 m
264.947 292.197 264.984 291.760 264.984 291.437  c
264.984 291.020 264.914 290.575 264.773 290.101  c
264.632 289.627 264.434 289.263 264.179 289.007  c
263.924 288.752 263.635 288.625 263.312 288.625  c
262.937 288.625 262.606 288.794 262.320 289.132  c
262.033 289.471 261.890 289.974 261.890 290.640  c
261.890 291.536 262.078 292.234 262.453 292.734  c
262.734 293.099 263.072 293.281 263.468 293.281  c
263.666 293.281 263.898 293.234 264.164 293.140  c
264.429 293.046 264.666 292.916 264.875 292.750  c
h
267.437 297.171 m
267.437 296.937 l
267.989 296.937 268.502 296.812 268.976 296.562  c
269.450 296.312 269.908 295.877 270.351 295.257  c
270.794 294.638 271.099 293.958 271.265 293.218  c
270.599 293.645 270.000 293.859 269.468 293.859  c
268.864 293.859 268.346 293.627 267.914 293.164  c
267.481 292.700 267.265 292.078 267.265 291.296  c
267.265 290.546 267.479 289.875 267.906 289.281  c
268.427 288.572 269.109 288.218 269.953 288.218  c
270.661 288.218 271.265 288.510 271.765 289.093  c
272.380 289.812 272.687 290.703 272.687 291.765  c
272.687 292.724 272.453 293.617 271.984 294.445  c
271.515 295.273 270.864 295.958 270.031 296.500  c
269.343 296.947 268.599 297.171 267.796 297.171  c
267.437 297.171 l
h
271.375 292.750 m
271.447 292.197 271.484 291.760 271.484 291.437  c
271.484 291.020 271.414 290.575 271.273 290.101  c
271.132 289.627 270.934 289.263 270.679 289.007  c
270.424 288.752 270.135 288.625 269.812 288.625  c
269.437 288.625 269.106 288.794 268.820 289.132  c
268.533 289.471 268.390 289.974 268.390 290.640  c
268.390 291.536 268.578 292.234 268.953 292.734  c
269.234 293.099 269.572 293.281 269.968 293.281  c
270.166 293.281 270.398 293.234 270.664 293.140  c
270.929 293.046 271.166 292.916 271.375 292.750  c
h
279.078 288.218 m
279.078 288.453 l
278.515 288.505 278.057 288.614 277.703 288.781  c
277.349 288.947 277.000 289.203 276.656 289.546  c
276.312 289.890 276.028 290.273 275.804 290.695  c
275.580 291.117 275.390 291.614 275.234 292.187  c
275.849 291.770 276.463 291.562 277.078 291.562  c
277.661 291.562 278.169 291.799 278.601 292.273  c
279.033 292.747 279.250 293.359 279.250 294.109  c
279.250 294.828 279.031 295.484 278.593 296.078  c
278.072 296.796 277.380 297.156 276.515 297.156  c
275.921 297.156 275.421 296.958 275.015 296.562  c
274.213 295.812 273.812 294.833 273.812 293.625  c
273.812 292.854 273.966 292.122 274.273 291.429  c
274.580 290.737 275.020 290.119 275.593 289.578  c
276.166 289.036 276.716 288.674 277.242 288.492  c
277.768 288.309 278.255 288.218 278.703 288.218  c
279.078 288.218 l
h
275.125 292.656 m
275.052 293.229 275.015 293.692 275.015 294.046  c
275.015 294.453 275.091 294.893 275.242 295.367  c
275.393 295.841 275.614 296.218 275.906 296.500  c
276.125 296.697 276.390 296.796 276.703 296.796  c
277.067 296.796 277.395 296.622 277.687 296.273  c
277.979 295.924 278.125 295.432 278.125 294.796  c
278.125 294.067 277.979 293.440 277.687 292.914  c
277.395 292.388 276.989 292.125 276.468 292.125  c
276.302 292.125 276.127 292.158 275.945 292.226  c
275.763 292.294 275.489 292.437 275.125 292.656  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
newpath
320.595 273.644 m
320.595 278.844 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
309.468 292.750 m
309.468 291.770 309.617 290.924 309.914 290.210  c
310.210 289.497 310.604 288.968 311.093 288.625  c
311.479 288.354 311.875 288.218 312.281 288.218  c
312.937 288.218 313.526 288.552 314.046 289.218  c
314.703 290.052 315.031 291.182 315.031 292.609  c
315.031 293.609 314.888 294.458 314.601 295.156  c
314.315 295.854 313.947 296.362 313.500 296.679  c
313.052 296.997 312.625 297.156 312.218 297.156  c
311.395 297.156 310.708 296.671 310.156 295.703  c
309.697 294.880 309.468 293.895 309.468 292.750  c
h
310.718 292.906 m
310.718 294.093 310.864 295.062 311.156 295.812  c
311.395 296.437 311.755 296.750 312.234 296.750  c
312.463 296.750 312.700 296.648 312.945 296.445  c
313.190 296.242 313.375 295.895 313.500 295.406  c
313.697 294.687 313.796 293.661 313.796 292.328  c
313.796 291.349 313.692 290.531 313.484 289.875  c
313.338 289.385 313.140 289.041 312.890 288.843  c
312.724 288.708 312.515 288.640 312.265 288.640  c
311.984 288.640 311.729 288.765 311.500 289.015  c
311.197 289.369 310.992 289.924 310.882 290.679  c
310.773 291.434 310.718 292.177 310.718 292.906  c
h
317.125 295.765 m
317.322 295.765 317.489 295.835 317.625 295.976  c
317.760 296.117 317.828 296.281 317.828 296.468  c
317.828 296.666 317.760 296.833 317.625 296.968  c
317.489 297.104 317.322 297.171 317.125 297.171  c
316.927 297.171 316.760 297.104 316.625 296.968  c
316.489 296.833 316.421 296.666 316.421 296.468  c
316.421 296.270 316.489 296.104 316.625 295.968  c
316.760 295.833 316.927 295.765 317.125 295.765  c
h
319.437 297.171 m
319.437 296.937 l
319.989 296.937 320.502 296.812 320.976 296.562  c
321.450 296.312 321.908 295.877 322.351 295.257  c
322.794 294.638 323.099 293.958 323.265 293.218  c
322.599 293.645 322.000 293.859 321.468 293.859  c
320.864 293.859 320.346 293.627 319.914 293.164  c
319.481 292.700 319.265 292.078 319.265 291.296  c
319.265 290.546 319.479 289.875 319.906 289.281  c
320.427 288.572 321.109 288.218 321.953 288.218  c
322.661 288.218 323.265 288.510 323.765 289.093  c
324.380 289.812 324.687 290.703 324.687 291.765  c
324.687 292.724 324.453 293.617 323.984 294.445  c
323.515 295.273 322.864 295.958 322.031 296.500  c
321.343 296.947 320.599 297.171 319.796 297.171  c
319.437 297.171 l
h
323.375 292.750 m
323.447 292.197 323.484 291.760 323.484 291.437  c
323.484 291.020 323.414 290.575 323.273 290.101  c
323.132 289.627 322.934 289.263 322.679 289.007  c
322.424 288.752 322.135 288.625 321.812 288.625  c
321.437 288.625 321.106 288.794 320.820 289.132  c
320.533 289.471 320.390 289.974 320.390 290.640  c
320.390 291.536 320.578 292.234 320.953 292.734  c
321.234 293.099 321.572 293.281 321.968 293.281  c
322.166 293.281 322.398 293.234 322.664 293.140  c
322.929 293.046 323.166 292.916 323.375 292.750  c
h
325.937 297.171 m
325.937 296.937 l
326.489 296.937 327.002 296.812 327.476 296.562  c
327.950 296.312 328.408 295.877 328.851 295.257  c
329.294 294.638 329.599 293.958 329.765 293.218  c
329.099 293.645 328.500 293.859 327.968 293.859  c
327.364 293.859 326.846 293.627 326.414 293.164  c
325.981 292.700 325.765 292.078 325.765 291.296  c
325.765 290.546 325.979 289.875 326.406 289.281  c
326.927 288.572 327.609 288.218 328.453 288.218  c
329.161 288.218 329.765 288.510 330.265 289.093  c
330.880 289.812 331.187 290.703 331.187 291.765  c
331.187 292.724 330.953 293.617 330.484 294.445  c
330.015 295.273 329.364 295.958 328.531 296.500  c
327.843 296.947 327.099 297.171 326.296 297.171  c
325.937 297.171 l
h
329.875 292.750 m
329.947 292.197 329.984 291.760 329.984 291.437  c
329.984 291.020 329.914 290.575 329.773 290.101  c
329.632 289.627 329.434 289.263 329.179 289.007  c
328.924 288.752 328.635 288.625 328.312 288.625  c
327.937 288.625 327.606 288.794 327.320 289.132  c
327.033 289.471 326.890 289.974 326.890 290.640  c
326.890 291.536 327.078 292.234 327.453 292.734  c
327.734 293.099 328.072 293.281 328.468 293.281  c
328.666 293.281 328.898 293.234 329.164 293.140  c
329.429 293.046 329.666 292.916 329.875 292.750  c
h
332.437 297.171 m
332.437 296.937 l
332.989 296.937 333.502 296.812 333.976 296.562  c
334.450 296.312 334.908 295.877 335.351 295.257  c
335.794 294.638 336.099 293.958 336.265 293.218  c
335.599 293.645 335.000 293.859 334.468 293.859  c
333.864 293.859 333.346 293.627 332.914 293.164  c
332.481 292.700 332.265 292.078 332.265 291.296  c
332.265 290.546 332.479 289.875 332.906 289.281  c
333.427 288.572 334.109 288.218 334.953 288.218  c
335.661 288.218 336.265 288.510 336.765 289.093  c
337.380 289.812 337.687 290.703 337.687 291.765  c
337.687 292.724 337.453 293.617 336.984 294.445  c
336.515 295.273 335.864 295.958 335.031 296.500  c
334.343 296.947 333.599 297.171 332.796 297.171  c
332.437 297.171 l
h
336.375 292.750 m
336.447 292.197 336.484 291.760 336.484 291.437  c
336.484 291.020 336.414 290.575 336.273 290.101  c
336.132 289.627 335.934 289.263 335.679 289.007  c
335.424 288.752 335.135 288.625 334.812 288.625  c
334.437 288.625 334.106 288.794 333.820 289.132  c
333.533 289.471 333.390 289.974 333.390 290.640  c
333.390 291.536 333.578 292.234 333.953 292.734  c
334.234 293.099 334.572 293.281 334.968 293.281  c
335.166 293.281 335.398 293.234 335.664 293.140  c
335.929 293.046 336.166 292.916 336.375 292.750  c
h
340.750 292.671 m
340.062 292.109 339.619 291.658 339.421 291.320  c
339.224 290.981 339.125 290.630 339.125 290.265  c
339.125 289.703 339.341 289.221 339.773 288.820  c
340.205 288.419 340.781 288.218 341.500 288.218  c
342.197 288.218 342.757 288.406 343.179 288.781  c
343.601 289.156 343.812 289.583 343.812 290.062  c
343.812 290.385 343.697 290.713 343.468 291.046  c
343.239 291.380 342.765 291.776 342.046 292.234  c
342.786 292.807 343.276 293.260 343.515 293.593  c
343.838 294.020 344.000 294.474 344.000 294.953  c
344.000 295.557 343.770 296.075 343.312 296.507  c
342.854 296.940 342.250 297.156 341.500 297.156  c
340.677 297.156 340.036 296.901 339.578 296.390  c
339.213 295.974 339.031 295.520 339.031 295.031  c
339.031 294.656 339.161 294.281 339.421 293.906  c
339.682 293.531 340.125 293.119 340.750 292.671  c
h
341.734 291.984 m
342.244 291.526 342.567 291.164 342.703 290.898  c
342.838 290.632 342.906 290.333 342.906 290.000  c
342.906 289.562 342.781 289.216 342.531 288.960  c
342.281 288.705 341.942 288.578 341.515 288.578  c
341.078 288.578 340.724 288.703 340.453 288.953  c
340.182 289.203 340.046 289.494 340.046 289.828  c
340.046 290.046 340.104 290.268 340.218 290.492  c
340.333 290.716 340.494 290.927 340.703 291.125  c
341.734 291.984 l
h
341.046 292.906 m
340.692 293.197 340.432 293.518 340.265 293.867  c
340.099 294.216 340.015 294.593 340.015 295.000  c
340.015 295.552 340.164 295.992 340.460 296.320  c
340.757 296.648 341.135 296.812 341.593 296.812  c
342.052 296.812 342.419 296.682 342.695 296.421  c
342.971 296.161 343.109 295.849 343.109 295.484  c
343.109 295.182 343.026 294.906 342.859 294.656  c
342.567 294.208 341.963 293.625 341.046 292.906  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
newpath
385.994 273.644 m
385.994 278.844 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
388.531 289.234 m
390.625 288.218 l
390.828 288.218 l
390.828 295.484 l
390.828 295.963 390.849 296.263 390.890 296.382  c
390.932 296.502 391.015 296.593 391.140 296.656  c
391.265 296.718 391.520 296.755 391.906 296.765  c
391.906 297.000 l
388.671 297.000 l
388.671 296.765 l
389.078 296.755 389.341 296.718 389.460 296.656  c
389.580 296.593 389.664 296.510 389.710 296.406  c
389.757 296.302 389.781 295.994 389.781 295.484  c
389.781 290.843 l
389.781 290.208 389.760 289.802 389.718 289.625  c
389.687 289.489 389.632 289.390 389.554 289.328  c
389.476 289.265 389.380 289.234 389.265 289.234  c
389.109 289.234 388.895 289.302 388.625 289.437  c
388.531 289.234 l
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
Q
2 J
0 j
q
0 J
1 j
newpath
56.0000 4.00518 m
53.4000 4.00518 l
S
newpath
56.0000 111.860 m
53.4000 111.860 l
S
newpath
56.0000 219.716 m
53.4000 219.716 l
S
newpath
56.0000 327.572 m
53.4000 327.572 l
S
newpath
56.0000 381.500 m
56.0000 4.00518 l
S
Q
0 J
1 j
[ 1.00000 0 0 1.00000 0 0 ] concat
q
[ 1.00000 0 0 1.00000 0 0 ] concat
q
0 185 14 15 rc
newpath
6.07812 191.250 m
6.22395 191.500 6.32291 191.731 6.37500 191.945  c
6.42708 192.158 6.48437 192.578 6.54687 193.203  c
6.81250 196.328 l
7.07291 196.026 7.44270 195.541 7.92187 194.875  c
8.15104 194.552 8.43750 194.114 8.78125 193.562  c
8.98958 193.229 9.11979 192.994 9.17187 192.859  c
9.19270 192.786 9.20312 192.713 9.20312 192.640  c
9.20312 192.599 9.18750 192.562 9.15625 192.531  c
9.12500 192.500 9.04687 192.463 8.92187 192.421  c
8.79687 192.380 8.69531 192.307 8.61718 192.203  c
8.53906 192.099 8.50000 191.974 8.50000 191.828  c
8.50000 191.661 8.54947 191.523 8.64843 191.414  c
8.74739 191.304 8.87500 191.250 9.03125 191.250  c
9.21875 191.250 9.37760 191.328 9.50781 191.484  c
9.63802 191.640 9.70312 191.854 9.70312 192.125  c
9.70312 192.458 9.58854 192.841 9.35937 193.273  c
9.13020 193.705 8.69010 194.364 8.03906 195.250  c
7.38802 196.135 6.59895 197.104 5.67187 198.156  c
5.03645 198.875 4.56250 199.330 4.25000 199.523  c
3.93750 199.716 3.67187 199.812 3.45312 199.812  c
3.31770 199.812 3.20052 199.760 3.10156 199.656  c
3.00260 199.552 2.95312 199.437 2.95312 199.312  c
2.95312 199.145 3.02343 198.994 3.16406 198.859  c
3.30468 198.724 3.45312 198.656 3.60937 198.656  c
3.69270 198.656 3.76562 198.677 3.82812 198.718  c
3.85937 198.739 3.89583 198.799 3.93750 198.898  c
3.97916 198.997 4.01562 199.062 4.04687 199.093  c
4.06770 199.114 4.09375 199.125 4.12500 199.125  c
4.14583 199.125 4.18750 199.104 4.25000 199.062  c
4.48958 198.916 4.76041 198.687 5.06250 198.375  c
5.46875 197.958 5.77083 197.619 5.96875 197.359  c
5.60937 193.343 l
5.55729 192.677 5.47135 192.270 5.35156 192.125  c
5.23177 191.979 5.03125 191.906 4.75000 191.906  c
4.65625 191.906 4.49479 191.921 4.26562 191.953  c
4.21875 191.718 l
6.07812 191.250 l
h
f
Q
cliprestore
newpath
0 0 m
0 390.000 l
390.000 390.000 l
390.000 0 l
h
W
Q
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0 0 1.00000 0 0 ] concat
q
q
newpath
56.0000 381.500 m
50.8000 381.500 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
q
25 380 7 13 rc
newpath
35.7968 387.437 m
27.2031 387.437 l
27.2031 386.765 l
35.7968 386.765 l
35.7968 387.437 l
h
f
Q
newpath
34.4687 386.750 m
34.4687 385.770 34.6171 384.924 34.9140 384.210  c
35.2109 383.497 35.6041 382.968 36.0937 382.625  c
36.4791 382.354 36.8750 382.218 37.2812 382.218  c
37.9375 382.218 38.5260 382.552 39.0468 383.218  c
39.7031 384.052 40.0312 385.182 40.0312 386.609  c
40.0312 387.609 39.8880 388.458 39.6015 389.156  c
39.3151 389.854 38.9479 390.362 38.5000 390.679  c
38.0520 390.997 37.6250 391.156 37.2187 391.156  c
36.3958 391.156 35.7083 390.671 35.1562 389.703  c
34.6979 388.880 34.4687 387.895 34.4687 386.750  c
h
35.7187 386.906 m
35.7187 388.093 35.8645 389.062 36.1562 389.812  c
36.3958 390.437 36.7552 390.750 37.2343 390.750  c
37.4635 390.750 37.7005 390.648 37.9453 390.445  c
38.1901 390.242 38.3750 389.895 38.5000 389.406  c
38.6979 388.687 38.7968 387.661 38.7968 386.328  c
38.7968 385.349 38.6927 384.531 38.4843 383.875  c
38.3385 383.385 38.1406 383.041 37.8906 382.843  c
37.7239 382.708 37.5156 382.640 37.2656 382.640  c
36.9843 382.640 36.7291 382.765 36.5000 383.015  c
36.1979 383.369 35.9921 383.924 35.8828 384.679  c
35.7734 385.434 35.7187 386.177 35.7187 386.906  c
h
42.1250 389.765 m
42.3229 389.765 42.4895 389.835 42.6250 389.976  c
42.7604 390.117 42.8281 390.281 42.8281 390.468  c
42.8281 390.666 42.7604 390.833 42.6250 390.968  c
42.4895 391.104 42.3229 391.171 42.1250 391.171  c
41.9270 391.171 41.7604 391.104 41.6250 390.968  c
41.4895 390.833 41.4218 390.666 41.4218 390.468  c
41.4218 390.270 41.4895 390.104 41.6250 389.968  c
41.7604 389.833 41.9270 389.765 42.1250 389.765  c
h
44.2187 386.750 m
44.2187 385.770 44.3671 384.924 44.6640 384.210  c
44.9609 383.497 45.3541 382.968 45.8437 382.625  c
46.2291 382.354 46.6250 382.218 47.0312 382.218  c
47.6875 382.218 48.2760 382.552 48.7968 383.218  c
49.4531 384.052 49.7812 385.182 49.7812 386.609  c
49.7812 387.609 49.6380 388.458 49.3515 389.156  c
49.0651 389.854 48.6979 390.362 48.2500 390.679  c
47.8020 390.997 47.3750 391.156 46.9687 391.156  c
46.1458 391.156 45.4583 390.671 44.9062 389.703  c
44.4479 388.880 44.2187 387.895 44.2187 386.750  c
h
45.4687 386.906 m
45.4687 388.093 45.6145 389.062 45.9062 389.812  c
46.1458 390.437 46.5052 390.750 46.9843 390.750  c
47.2135 390.750 47.4505 390.648 47.6953 390.445  c
47.9401 390.242 48.1250 389.895 48.2500 389.406  c
48.4479 388.687 48.5468 387.661 48.5468 386.328  c
48.5468 385.349 48.4427 384.531 48.2343 383.875  c
48.0885 383.385 47.8906 383.041 47.6406 382.843  c
47.4739 382.708 47.2656 382.640 47.0156 382.640  c
46.7343 382.640 46.4791 382.765 46.2500 383.015  c
45.9479 383.369 45.7421 383.924 45.6328 384.679  c
45.5234 385.434 45.4687 386.177 45.4687 386.906  c
h
51.7812 383.234 m
53.8750 382.218 l
54.0781 382.218 l
54.0781 389.484 l
54.0781 389.963 54.0989 390.263 54.1406 390.382  c
54.1822 390.502 54.2656 390.593 54.3906 390.656  c
54.5156 390.718 54.7708 390.755 55.1562 390.765  c
55.1562 391.000 l
51.9218 391.000 l
51.9218 390.765 l
52.3281 390.755 52.5911 390.718 52.7109 390.656  c
52.8307 390.593 52.9140 390.510 52.9609 390.406  c
53.0078 390.302 53.0312 389.994 53.0312 389.484  c
53.0312 384.843 l
53.0312 384.208 53.0104 383.802 52.9687 383.625  c
52.9375 383.489 52.8828 383.390 52.8046 383.328  c
52.7265 383.265 52.6302 383.234 52.5156 383.234  c
52.3593 383.234 52.1458 383.302 51.8750 383.437  c
51.7812 383.234 l
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
newpath
56.0000 273.644 m
50.8000 273.644 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
49.4687 278.750 m
49.4687 277.770 49.6171 276.924 49.9140 276.210  c
50.2109 275.497 50.6041 274.968 51.0937 274.625  c
51.4791 274.354 51.8750 274.218 52.2812 274.218  c
52.9375 274.218 53.5260 274.552 54.0468 275.218  c
54.7031 276.052 55.0312 277.182 55.0312 278.609  c
55.0312 279.609 54.8880 280.458 54.6015 281.156  c
54.3151 281.854 53.9479 282.362 53.5000 282.679  c
53.0520 282.997 52.6250 283.156 52.2187 283.156  c
51.3958 283.156 50.7083 282.671 50.1562 281.703  c
49.6979 280.880 49.4687 279.895 49.4687 278.750  c
h
50.7187 278.906 m
50.7187 280.093 50.8645 281.062 51.1562 281.812  c
51.3958 282.437 51.7552 282.750 52.2343 282.750  c
52.4635 282.750 52.7005 282.648 52.9453 282.445  c
53.1901 282.242 53.3750 281.895 53.5000 281.406  c
53.6979 280.687 53.7968 279.661 53.7968 278.328  c
53.7968 277.349 53.6927 276.531 53.4843 275.875  c
53.3385 275.385 53.1406 275.041 52.8906 274.843  c
52.7239 274.708 52.5156 274.640 52.2656 274.640  c
51.9843 274.640 51.7291 274.765 51.5000 275.015  c
51.1979 275.369 50.9921 275.924 50.8828 276.679  c
50.7734 277.434 50.7187 278.177 50.7187 278.906  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
newpath
56.0000 165.788 m
50.8000 165.788 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
34.4687 170.750 m
34.4687 169.770 34.6171 168.924 34.9140 168.210  c
35.2109 167.497 35.6041 166.968 36.0937 166.625  c
36.4791 166.354 36.8750 166.218 37.2812 166.218  c
37.9375 166.218 38.5260 166.552 39.0468 167.218  c
39.7031 168.052 40.0312 169.182 40.0312 170.609  c
40.0312 171.609 39.8880 172.458 39.6015 173.156  c
39.3151 173.854 38.9479 174.362 38.5000 174.679  c
38.0520 174.997 37.6250 175.156 37.2187 175.156  c
36.3958 175.156 35.7083 174.671 35.1562 173.703  c
34.6979 172.880 34.4687 171.895 34.4687 170.750  c
h
35.7187 170.906 m
35.7187 172.093 35.8645 173.062 36.1562 173.812  c
36.3958 174.437 36.7552 174.750 37.2343 174.750  c
37.4635 174.750 37.7005 174.648 37.9453 174.445  c
38.1901 174.242 38.3750 173.895 38.5000 173.406  c
38.6979 172.687 38.7968 171.661 38.7968 170.328  c
38.7968 169.349 38.6927 168.531 38.4843 167.875  c
38.3385 167.385 38.1406 167.041 37.8906 166.843  c
37.7239 166.708 37.5156 166.640 37.2656 166.640  c
36.9843 166.640 36.7291 166.765 36.5000 167.015  c
36.1979 167.369 35.9921 167.924 35.8828 168.679  c
35.7734 169.434 35.7187 170.177 35.7187 170.906  c
h
42.1250 173.765 m
42.3229 173.765 42.4895 173.835 42.6250 173.976  c
42.7604 174.117 42.8281 174.281 42.8281 174.468  c
42.8281 174.666 42.7604 174.833 42.6250 174.968  c
42.4895 175.104 42.3229 175.171 42.1250 175.171  c
41.9270 175.171 41.7604 175.104 41.6250 174.968  c
41.4895 174.833 41.4218 174.666 41.4218 174.468  c
41.4218 174.270 41.4895 174.104 41.6250 173.968  c
41.7604 173.833 41.9270 173.765 42.1250 173.765  c
h
44.2187 170.750 m
44.2187 169.770 44.3671 168.924 44.6640 168.210  c
44.9609 167.497 45.3541 166.968 45.8437 166.625  c
46.2291 166.354 46.6250 166.218 47.0312 166.218  c
47.6875 166.218 48.2760 166.552 48.7968 167.218  c
49.4531 168.052 49.7812 169.182 49.7812 170.609  c
49.7812 171.609 49.6380 172.458 49.3515 173.156  c
49.0651 173.854 48.6979 174.362 48.2500 174.679  c
47.8020 174.997 47.3750 175.156 46.9687 175.156  c
46.1458 175.156 45.4583 174.671 44.9062 173.703  c
44.4479 172.880 44.2187 171.895 44.2187 170.750  c
h
45.4687 170.906 m
45.4687 172.093 45.6145 173.062 45.9062 173.812  c
46.1458 174.437 46.5052 174.750 46.9843 174.750  c
47.2135 174.750 47.4505 174.648 47.6953 174.445  c
47.9401 174.242 48.1250 173.895 48.2500 173.406  c
48.4479 172.687 48.5468 171.661 48.5468 170.328  c
48.5468 169.349 48.4427 168.531 48.2343 167.875  c
48.0885 167.385 47.8906 167.041 47.6406 166.843  c
47.4739 166.708 47.2656 166.640 47.0156 166.640  c
46.7343 166.640 46.4791 166.765 46.2500 167.015  c
45.9479 167.369 45.7421 167.924 45.6328 168.679  c
45.5234 169.434 45.4687 170.177 45.4687 170.906  c
h
51.7812 167.234 m
53.8750 166.218 l
54.0781 166.218 l
54.0781 173.484 l
54.0781 173.963 54.0989 174.263 54.1406 174.382  c
54.1822 174.502 54.2656 174.593 54.3906 174.656  c
54.5156 174.718 54.7708 174.755 55.1562 174.765  c
55.1562 175.000 l
51.9218 175.000 l
51.9218 174.765 l
52.3281 174.755 52.5911 174.718 52.7109 174.656  c
52.8307 174.593 52.9140 174.510 52.9609 174.406  c
53.0078 174.302 53.0312 173.994 53.0312 173.484  c
53.0312 168.843 l
53.0312 168.208 53.0104 167.802 52.9687 167.625  c
52.9375 167.489 52.8828 167.390 52.8046 167.328  c
52.7265 167.265 52.6302 167.234 52.5156 167.234  c
52.3593 167.234 52.1458 167.302 51.8750 167.437  c
51.7812 167.234 l
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
newpath
56.0000 57.9330 m
50.8000 57.9330 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
34.4687 62.7500 m
34.4687 61.7708 34.6171 60.9244 34.9140 60.2109  c
35.2109 59.4974 35.6041 58.9687 36.0937 58.6250  c
36.4791 58.3541 36.8750 58.2187 37.2812 58.2187  c
37.9375 58.2187 38.5260 58.5520 39.0468 59.2187  c
39.7031 60.0520 40.0312 61.1822 40.0312 62.6093  c
40.0312 63.6093 39.8880 64.4583 39.6015 65.1562  c
39.3151 65.8541 38.9479 66.3619 38.5000 66.6796  c
38.0520 66.9974 37.6250 67.1562 37.2187 67.1562  c
36.3958 67.1562 35.7083 66.6718 35.1562 65.7031  c
34.6979 64.8802 34.4687 63.8958 34.4687 62.7500  c
h
35.7187 62.9062 m
35.7187 64.0937 35.8645 65.0625 36.1562 65.8125  c
36.3958 66.4375 36.7552 66.7500 37.2343 66.7500  c
37.4635 66.7500 37.7005 66.6484 37.9453 66.4453  c
38.1901 66.2421 38.3750 65.8958 38.5000 65.4062  c
38.6979 64.6875 38.7968 63.6614 38.7968 62.3281  c
38.7968 61.3489 38.6927 60.5312 38.4843 59.8750  c
38.3385 59.3854 38.1406 59.0416 37.8906 58.8437  c
37.7239 58.7083 37.5156 58.6406 37.2656 58.6406  c
36.9843 58.6406 36.7291 58.7656 36.5000 59.0156  c
36.1979 59.3697 35.9921 59.9244 35.8828 60.6796  c
35.7734 61.4349 35.7187 62.1770 35.7187 62.9062  c
h
42.1250 65.7656 m
42.3229 65.7656 42.4895 65.8359 42.6250 65.9765  c
42.7604 66.1171 42.8281 66.2812 42.8281 66.4687  c
42.8281 66.6666 42.7604 66.8333 42.6250 66.9687  c
42.4895 67.1041 42.3229 67.1718 42.1250 67.1718  c
41.9270 67.1718 41.7604 67.1041 41.6250 66.9687  c
41.4895 66.8333 41.4218 66.6666 41.4218 66.4687  c
41.4218 66.2708 41.4895 66.1041 41.6250 65.9687  c
41.7604 65.8333 41.9270 65.7656 42.1250 65.7656  c
h
44.2187 62.7500 m
44.2187 61.7708 44.3671 60.9244 44.6640 60.2109  c
44.9609 59.4974 45.3541 58.9687 45.8437 58.6250  c
46.2291 58.3541 46.6250 58.2187 47.0312 58.2187  c
47.6875 58.2187 48.2760 58.5520 48.7968 59.2187  c
49.4531 60.0520 49.7812 61.1822 49.7812 62.6093  c
49.7812 63.6093 49.6380 64.4583 49.3515 65.1562  c
49.0651 65.8541 48.6979 66.3619 48.2500 66.6796  c
47.8020 66.9974 47.3750 67.1562 46.9687 67.1562  c
46.1458 67.1562 45.4583 66.6718 44.9062 65.7031  c
44.4479 64.8802 44.2187 63.8958 44.2187 62.7500  c
h
45.4687 62.9062 m
45.4687 64.0937 45.6145 65.0625 45.9062 65.8125  c
46.1458 66.4375 46.5052 66.7500 46.9843 66.7500  c
47.2135 66.7500 47.4505 66.6484 47.6953 66.4453  c
47.9401 66.2421 48.1250 65.8958 48.2500 65.4062  c
48.4479 64.6875 48.5468 63.6614 48.5468 62.3281  c
48.5468 61.3489 48.4427 60.5312 48.2343 59.8750  c
48.0885 59.3854 47.8906 59.0416 47.6406 58.8437  c
47.4739 58.7083 47.2656 58.6406 47.0156 58.6406  c
46.7343 58.6406 46.4791 58.7656 46.2500 59.0156  c
45.9479 59.3697 45.7421 59.9244 45.6328 60.6796  c
45.5234 61.4349 45.4687 62.1770 45.4687 62.9062  c
h
56.2031 65.3437 m
55.6093 67.0000 l
50.5312 67.0000 l
50.5312 66.7656 l
52.0208 65.4010 53.0703 64.2864 53.6796 63.4218  c
54.2890 62.5572 54.5937 61.7708 54.5937 61.0625  c
54.5937 60.5104 54.4270 60.0599 54.0937 59.7109  c
53.7604 59.3619 53.3593 59.1875 52.8906 59.1875  c
52.4739 59.1875 52.0963 59.3099 51.7578 59.5546  c
51.4192 59.7994 51.1718 60.1614 51.0156 60.6406  c
50.7812 60.6406 l
50.8854 59.8593 51.1562 59.2604 51.5937 58.8437  c
52.0312 58.4270 52.5781 58.2187 53.2343 58.2187  c
53.9322 58.2187 54.5156 58.4427 54.9843 58.8906  c
55.4531 59.3385 55.6875 59.8645 55.6875 60.4687  c
55.6875 60.9062 55.5833 61.3437 55.3750 61.7812  c
55.0625 62.4687 54.5572 63.1927 53.8593 63.9531  c
52.8072 65.1093 52.1458 65.8072 51.8750 66.0468  c
54.1250 66.0468 l
54.5833 66.0468 54.9036 66.0286 55.0859 65.9921  c
55.2682 65.9557 55.4349 65.8854 55.5859 65.7812  c
55.7369 65.6770 55.8645 65.5312 55.9687 65.3437  c
56.2031 65.3437 l
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
Q
2 J
0 j
Q
Q
cliprestore
0 0 400 400 rc
[ 1.00000 0 0 1.00000 0 0 ] concat
[ 1.00000 0 0 1.00000 0 0 ] concat
cliprestore
2 J
0 j
end end restore showpage

%%Trailer
%%EOF
