%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: x1lambda.pdf
%%Creator: Adobe Acrobat 9.4.2
%%For: rsheissa
%%CreationDate: 3/22/11, 6:14 PM
%%BoundingBox: 0 0 555 607
%%HiResBoundingBox: 0 0 555 606.2960
%%CropBox: 0 0 555 606.2960
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors: (atend)
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$None SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 537 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.1-c043 52.372728, 2009/01/18-15:56:37        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreatorTool="cairo 1.10.2 (http://cairographics.org)"
   pdf:Producer="cairo 1.10.2 (http://cairographics.org)"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -606.296 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 606.296 li
555 606.296 li
555 0 li
cp
clp
[1 0 0 1 0 0 ]ct
gsave
0 0 mo
555 0 li
555 606 li
0 606 li
cp
clp
555 606.297 mo
555 51.297 li
0 51.297 li
0 606.297 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
f
grestore
1.3875 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
492.562 70.039 mo
18.051 70.039 li
false sop
0 .980407 1 .000335698 cmyk
@
2.775 lw
449.051 511.062 mo
448.98 494.629 li
448.859 478.316 li
448.695 462.191 li
448.484 446.316 li
448.234 430.746 li
447.945 415.531 li
447.621 400.691 li
447.266 386.262 li
446.879 372.246 li
446.465 358.66 li
446.027 345.5 li
445.566 332.77 li
445.086 320.453 li
444.586 308.551 li
444.066 297.055 li
443.535 285.945 li
442.992 275.219 li
442.434 264.863 li
441.863 254.871 li
441.281 245.227 li
440.707 236.156 li
440.121 227.395 li
439.527 218.938 li
438.926 210.777 li
438.32 202.902 li
437.703 195.312 li
437.086 188 li
436.457 180.957 li
435.824 174.18 li
435.188 167.664 li
434.547 161.402 li
433.898 155.391 li
433.25 149.625 li
432.598 144.098 li
431.938 138.809 li
431.277 133.754 li
430.613 128.926 li
429.945 124.32 li
429.277 119.934 li
428.605 115.766 li
427.93 111.805 li
427.254 108.059 li
426.574 104.512 li
425.895 101.164 li
425.215 98.016 li
424.531 95.059 li
423.844 92.289 li
423.16 89.703 li
422.473 87.301 li
421.785 85.07 li
421.094 83.0161 li
420.406 81.129 li
419.715 79.402 li
419.023 77.84 li
418.332 76.434 li
417.641 75.1801 li
416.949 74.07 li
416.254 73.105 li
415.562 72.281 li
414.871 71.5941 li
414.176 71.035 li
413.484 70.605 li
412.789 70.301 li
412.098 70.113 li
411.402 70.039 li
410.711 70.082 li
410.016 70.23 li
409.324 70.484 li
408.633 70.836 li
407.941 71.285 li
407.246 71.828 li
406.555 72.461 li
405.863 73.1801 li
405.172 73.98 li
404.484 74.859 li
403.793 75.816 li
403.102 76.8441 li
402.41 77.941 li
401.723 79.105 li
401.035 80.336 li
400.344 81.621 li
399.656 82.965 li
398.969 84.367 li
398.281 85.816 li
397.594 87.316 li
396.906 88.863 li
396.223 90.457 li
395.535 92.09 li
394.852 93.762 li
394.164 95.469 li
393.48 97.211 li
392.797 98.988 li
392.113 100.793 li
391.43 102.629 li
390.746 104.488 li
390.062 106.371 li
389.383 108.273 li
388.699 110.199 li
388.016 112.145 li
387.336 114.102 li
386.656 116.078 li
385.977 118.062 li
385.297 120.062 li
384.613 122.07 li
383.938 124.086 li
383.258 126.105 li
382.578 128.133 li
381.902 130.164 li
381.223 132.195 li
380.547 134.23 li
379.871 136.262 li
378.52 140.316 li
377.844 142.34 li
377.172 144.355 li
376.496 146.363 li
375.82 148.363 li
375.148 150.352 li
374.477 152.332 li
373.805 154.301 li
373.137 156.254 li
372.465 158.195 li
371.797 160.117 li
371.129 162.027 li
370.461 163.922 li
369.797 165.793 li
369.129 167.648 li
368.465 169.48 li
367.805 171.297 li
367.141 173.086 li
366.484 174.855 li
365.824 176.598 li
365.168 178.316 li
364.516 180.012 li
363.863 181.68 li
363.211 183.32 li
362.566 184.934 li
361.922 186.516 li
361.277 188.066 li
360.641 189.59 li
360.008 191.078 li
359.379 192.539 li
358.758 193.965 li
358.141 195.355 li
357.531 196.711 li
356.934 198.031 li
356.34 199.312 li
355.762 200.555 li
355.195 201.758 li
354.648 202.918 li
354.121 204.035 li
353.617 205.102 li
353.145 206.117 li
352.707 207.078 li
352.316 207.977 li
351.984 208.809 li
351.723 209.555 li
351.539 210.211 li
351.453 210.758 li
351.465 211.195 li
351.578 211.508 li
351.781 211.707 li
352.062 211.793 li
352.41 211.781 li
352.809 211.676 li
353.246 211.492 li
353.719 211.238 li
354.215 210.922 li
354.73 210.543 li
355.262 210.113 li
355.805 209.629 li
356.359 209.102 li
356.922 208.523 li
357.492 207.906 li
358.066 207.246 li
358.645 206.547 li
359.227 205.809 li
359.812 205.031 li
360.398 204.223 li
360.984 203.375 li
361.574 202.492 li
362.164 201.582 li
362.758 200.637 li
363.348 199.66 li
363.941 198.656 li
364.531 197.621 li
365.121 196.559 li
365.711 195.469 li
366.301 194.355 li
366.891 193.211 li
367.477 192.047 li
368.066 190.855 li
368.652 189.645 li
369.234 188.406 li
369.82 187.152 li
370.402 185.875 li
370.984 184.578 li
371.562 183.262 li
372.141 181.93 li
372.715 180.574 li
373.289 179.211 li
373.863 177.824 li
374.434 176.43 li
375.004 175.016 li
375.57 173.59 li
376.137 172.152 li
376.699 170.703 li
377.262 169.242 li
377.82 167.773 li
378.379 166.293 li
378.938 164.805 li
379.492 163.309 li
380.043 161.805 li
380.594 160.297 li
381.141 158.781 li
381.688 157.262 li
382.23 155.738 li
382.773 154.211 li
383.312 152.68 li
383.848 151.148 li
384.387 149.617 li
385.449 146.555 li
385.977 145.02 li
386.504 143.492 li
387.027 141.965 li
387.547 140.441 li
388.066 138.922 li
388.586 137.406 li
391.137 129.926 li
391.637 128.449 li
392.137 126.984 li
392.637 125.527 li
393.129 124.086 li
393.621 122.648 li
394.113 121.227 li
394.602 119.816 li
395.086 118.418 li
395.566 117.031 li
396.047 115.66 li
396.523 114.305 li
397 112.961 li
397.473 111.637 li
397.941 110.324 li
398.406 109.027 li
398.871 107.75 li
399.332 106.488 li
399.789 105.246 li
400.246 104.02 li
400.699 102.812 li
401.148 101.625 li
401.594 100.457 li
402.039 99.309 li
402.48 98.18 li
402.918 97.07 li
403.352 95.984 li
403.785 94.918 li
404.215 93.871 li
404.641 92.848 li
405.062 91.848 li
405.484 90.867 li
405.902 89.91 li
406.316 88.9771 li
406.727 88.066 li
407.133 87.1801 li
407.539 86.312 li
407.938 85.473 li
408.336 84.652 li
408.73 83.859 li
409.121 83.09 li
409.512 82.34 li
409.895 81.617 li
410.277 80.918 li
410.652 80.242 li
411.027 79.59 li
411.398 78.965 li
411.766 78.359 li
412.129 77.777 li
412.488 77.223 li
412.848 76.688 li
413.199 76.176 li
413.547 75.691 li
413.895 75.2271 li
414.234 74.781 li
414.574 74.363 li
414.906 73.965 li
415.238 73.59 li
415.562 73.234 li
415.887 72.902 li
416.203 72.59 li
416.52 72.301 li
416.828 72.027 li
417.137 71.773 li
417.438 71.543 li
417.734 71.328 li
418.027 71.137 li
418.32 70.961 li
418.605 70.801 li
418.887 70.656 li
419.16 70.531 li
419.434 70.422 li
419.703 70.324 li
419.965 70.246 li
420.223 70.1801 li
420.477 70.129 li
420.727 70.09 li
420.973 70.059 li
421.211 70.047 li
421.449 70.039 li
421.68 70.047 li
421.902 70.062 li
422.125 70.086 li
422.34 70.117 li
422.551 70.16 li
422.758 70.207 li
422.957 70.262 li
423.152 70.32 li
423.344 70.3831 li
423.527 70.453 li
423.707 70.523 li
423.883 70.598 li
424.051 70.676 li
424.215 70.754 li
424.371 70.836 li
424.523 70.91 li
424.668 70.992 li
424.809 71.07 li
424.945 71.145 li
425.074 71.223 li
425.195 71.289 li
425.312 71.359 li
425.422 71.422 li
425.527 71.484 li
425.625 71.539 li
425.719 71.59 li
425.883 71.672 li
425.953 71.703 li
426.02 71.7271 li
426.078 71.746 li
426.133 71.7581 li
426.176 71.762 li
426.215 71.7581 li
426.246 71.746 li
426.273 71.7271 li
426.289 71.703 li
426.301 71.672 li
426.305 71.629 li
426.301 71.582 li
426.289 71.527 li
426.27 71.465 li
426.242 71.398 li
426.207 71.328 li
426.164 71.25 li
426.113 71.168 li
426.055 71.082 li
425.988 70.992 li
425.91 70.902 li
425.828 70.809 li
425.738 70.7191 li
425.637 70.625 li
425.527 70.535 li
425.41 70.449 li
425.285 70.367 li
425.148 70.289 li
425.004 70.2191 li
424.852 70.16 li
424.691 70.109 li
424.52 70.07 li
424.336 70.047 li
424.145 70.039 li
423.945 70.051 li
423.734 70.082 li
423.516 70.1331 li
423.289 70.211 li
423.047 70.312 li
422.797 70.441 li
422.539 70.605 li
422.27 70.8051 li
421.988 71.035 li
421.695 71.309 li
421.395 71.621 li
421.086 71.9771 li
420.762 72.379 li
420.43 72.832 li
420.086 73.336 li
419.73 73.895 li
419.363 74.512 li
418.988 75.188 li
418.602 75.9301 li
418.203 76.734 li
417.793 77.605 li
417.371 78.551 li
416.938 79.566 li
416.496 80.656 li
416.043 81.824 li
415.574 83.074 li
415.102 84.406 li
414.609 85.824 li
414.113 87.324 li
413.602 88.918 li
413.078 90.598 li
412.547 92.367 li
412.004 94.2271 li
411.449 96.184 li
410.883 98.234 li
410.305 100.379 li
409.719 102.621 li
409.121 104.961 li
408.512 107.395 li
407.891 109.926 li
407.262 112.551 li
406.621 115.273 li
405.973 118.094 li
405.312 121.012 li
404.641 124.016 li
403.965 127.121 li
403.273 130.312 li
402.574 133.598 li
401.879 136.926 li
401.172 140.336 li
400.457 143.832 li
399.734 147.41 li
399.004 151.066 li
398.262 154.801 li
397.512 158.609 li
396.758 162.492 li
395.996 166.449 li
395.223 170.473 li
394.445 174.562 li
393.66 178.715 li
392.867 182.93 li
392.07 187.199 li
391.266 191.527 li
390.453 195.91 li
389.637 200.344 li
388.812 204.824 li
387.98 209.348 li
387.145 213.914 li
386.305 218.52 li
385.461 223.16 li
384.605 227.836 li
383.75 232.543 li
382.887 237.277 li
382.02 242.035 li
381.148 246.816 li
380.27 251.613 li
379.391 256.43 li
378.504 261.254 li
377.613 266.09 li
376.719 270.934 li
375.82 275.781 li
374.016 285.469 li
373.105 290.305 li
372.191 295.129 li
371.273 299.938 li
370.355 304.73 li
369.43 309.5 li
368.504 314.246 li
367.57 318.961 li
366.641 323.641 li
365.703 328.281 li
364.762 332.879 li
363.82 337.426 li
362.871 341.918 li
361.926 346.348 li
360.973 350.715 li
360.02 355.004 li
359.059 359.211 li
358.098 363.332 li
357.133 367.355 li
356.168 371.273 li
355.199 375.074 li
354.227 378.758 li
353.25 382.301 li
352.273 385.695 li
351.293 388.938 li
350.309 392.008 li
349.324 394.895 li
348.336 397.59 li
347.344 400.074 li
346.348 402.34 li
345.352 404.371 li
344.355 406.164 li
343.355 407.695 li
342.355 408.965 li
341.352 409.965 li
340.352 410.688 li
339.344 411.125 li
338.34 411.285 li
337.34 411.164 li
336.336 410.77 li
335.332 410.102 li
334.328 409.176 li
333.328 408 li
332.332 406.586 li
331.336 404.941 li
330.34 403.09 li
329.352 401.035 li
328.359 398.801 li
327.371 396.391 li
326.391 393.828 li
325.406 391.121 li
324.426 388.281 li
323.449 385.32 li
322.473 382.254 li
321.5 379.086 li
320.531 375.836 li
319.562 372.5 li
318.598 369.098 li
317.633 365.629 li
316.672 362.105 li
315.711 358.531 li
314.754 354.914 li
313.801 351.258 li
312.844 347.566 li
311.895 343.852 li
310.945 340.109 li
309.996 336.348 li
309.051 332.57 li
308.109 328.777 li
307.168 324.977 li
306.227 321.168 li
304.352 313.543 li
303.418 309.73 li
298.773 290.754 li
297.852 286.988 li
296.93 283.234 li
296.012 279.496 li
295.094 275.777 li
294.18 272.074 li
293.266 268.391 li
292.352 264.727 li
291.441 261.086 li
290.535 257.465 li
289.633 253.867 li
288.727 250.293 li
287.824 246.746 li
286.926 243.227 li
286.027 239.73 li
285.133 236.266 li
284.242 232.824 li
283.352 229.414 li
282.465 226.035 li
281.578 222.684 li
280.695 219.367 li
279.812 216.082 li
278.934 212.828 li
278.059 209.605 li
277.184 206.422 li
276.312 203.266 li
275.445 200.148 li
274.578 197.066 li
273.715 194.02 li
272.855 191.008 li
271.996 188.031 li
271.145 185.094 li
270.289 182.195 li
269.441 179.332 li
268.594 176.508 li
267.754 173.723 li
266.91 170.977 li
266.074 168.27 li
265.242 165.602 li
264.414 162.973 li
263.586 160.387 li
262.762 157.84 li
261.945 155.332 li
261.129 152.867 li
260.316 150.441 li
259.508 148.059 li
258.703 145.719 li
257.902 143.418 li
257.109 141.16 li
256.316 138.945 li
255.527 136.77 li
254.746 134.641 li
253.969 132.551 li
253.195 130.504 li
252.426 128.496 li
251.66 126.535 li
250.898 124.617 li
250.148 122.738 li
249.398 120.902 li
248.656 119.109 li
247.918 117.355 li
247.188 115.648 li
246.461 113.98 li
245.738 112.352 li
245.023 110.77 li
244.324 109.242 li
243.633 107.754 li
242.941 106.305 li
242.262 104.895 li
241.59 103.527 li
240.926 102.199 li
240.266 100.91 li
239.617 99.66 li
238.973 98.449 li
238.34 97.273 li
237.715 96.141 li
237.098 95.039 li
236.488 93.9771 li
235.891 92.949 li
235.305 91.961 li
234.727 91.0081 li
234.156 90.09 li
233.598 89.203 li
233.051 88.3521 li
232.516 87.535 li
231.988 86.75 li
231.477 86 li
230.977 85.277 li
230.488 84.586 li
230.012 83.926 li
229.551 83.297 li
229.102 82.695 li
228.664 82.121 li
228.242 81.574 li
227.836 81.059 li
227.445 80.566 li
227.066 80.098 li
226.707 79.656 li
226.359 79.238 li
226.031 78.8441 li
225.719 78.473 li
225.422 78.121 li
225.145 77.793 li
224.883 77.484 li
224.637 77.195 li
224.41 76.926 li
224.199 76.6801 li
224.008 76.445 li
223.836 76.23 li
223.68 76.031 li
223.539 75.848 li
223.422 75.684 li
223.32 75.531 li
223.238 75.395 li
223.176 75.27 li
223.129 75.16 li
223.098 75.062 li
223.09 74.98 li
223.094 74.906 li
223.117 74.848 li
223.16 74.801 li
223.219 74.762 li
223.289 74.734 li
223.383 74.7191 li
223.488 74.715 li
223.609 74.7191 li
223.746 74.734 li
223.902 74.7581 li
224.07 74.793 li
224.25 74.84 li
224.449 74.895 li
224.656 74.957 li
224.879 75.031 li
225.113 75.113 li
225.363 75.207 li
225.621 75.309 li
225.895 75.422 li
226.18 75.543 li
226.473 75.676 li
226.777 75.812 li
227.094 75.9691 li
227.422 76.129 li
227.758 76.301 li
228.102 76.48 li
228.457 76.672 li
228.82 76.875 li
229.191 77.09 li
229.574 77.312 li
229.965 77.547 li
230.359 77.793 li
230.762 78.051 li
231.176 78.316 li
231.594 78.598 li
232.02 78.8911 li
232.449 79.191 li
232.891 79.5081 li
233.332 79.832 li
233.785 80.172 li
234.242 80.523 li
234.703 80.887 li
235.172 81.262 li
235.645 81.648 li
236.121 82.051 li
236.605 82.465 li
237.094 82.8911 li
237.586 83.332 li
238.082 83.785 li
238.582 84.254 li
239.09 84.73 li
239.598 85.2271 li
240.113 85.73 li
240.633 86.25 li
241.152 86.785 li
241.68 87.336 li
242.207 87.895 li
242.738 88.473 li
243.277 89.062 li
243.812 89.664 li
244.355 90.281 li
244.902 90.914 li
245.449 91.559 li
246.004 92.2191 li
246.555 92.895 li
247.113 93.582 li
247.672 94.285 li
248.234 95 li
248.797 95.73 li
249.367 96.477 li
249.938 97.23 li
250.508 98.004 li
251.082 98.789 li
251.656 99.59 li
252.234 100.406 li
252.816 101.234 li
253.398 102.074 li
253.984 102.93 li
254.57 103.801 li
255.16 104.684 li
255.75 105.578 li
256.344 106.488 li
256.938 107.41 li
257.531 108.344 li
258.129 109.293 li
258.73 110.254 li
259.328 111.227 li
259.934 112.215 li
260.535 113.211 li
261.141 114.223 li
261.746 115.246 li
262.355 116.281 li
262.965 117.328 li
263.574 118.387 li
264.188 119.453 li
264.801 120.535 li
265.414 121.629 li
266.031 122.73 li
266.648 123.84 li
267.266 124.965 li
267.887 126.098 li
268.508 127.238 li
269.129 128.391 li
269.75 129.555 li
270.375 130.727 li
271 131.902 li
271.625 133.094 li
272.254 134.289 li
272.879 135.492 li
273.508 136.703 li
274.137 137.922 li
274.77 139.148 li
275.402 140.383 li
276.031 141.621 li
276.664 142.867 li
277.301 144.117 li
277.934 145.371 li
278.57 146.633 li
279.844 149.172 li
280.48 150.445 li
281.121 151.723 li
281.758 153.004 li
283.039 155.574 li
284.32 158.152 li
286.898 163.324 li
287.539 164.613 li
288.188 165.906 li
288.832 167.195 li
289.48 168.484 li
290.129 169.766 li
290.773 171.051 li
292.07 173.605 li
292.723 174.875 li
293.371 176.141 li
294.02 177.402 li
294.672 178.656 li
295.32 179.906 li
295.977 181.145 li
296.625 182.379 li
297.277 183.605 li
297.93 184.824 li
298.582 186.031 li
299.238 187.23 li
299.891 188.418 li
300.543 189.594 li
301.199 190.762 li
301.852 191.914 li
302.508 193.059 li
303.16 194.184 li
303.816 195.301 li
304.473 196.398 li
305.129 197.484 li
305.781 198.555 li
306.438 199.605 li
307.094 200.641 li
307.75 201.66 li
308.406 202.66 li
309.062 203.641 li
309.719 204.602 li
310.375 205.543 li
311.031 206.465 li
311.684 207.363 li
312.34 208.242 li
312.996 209.098 li
313.652 209.93 li
314.305 210.734 li
314.961 211.52 li
315.613 212.277 li
316.27 213.008 li
316.922 213.715 li
317.57 214.391 li
318.227 215.043 li
318.875 215.664 li
319.523 216.258 li
320.172 216.824 li
320.82 217.355 li
321.465 217.859 li
322.109 218.332 li
322.754 218.77 li
323.391 219.18 li
324.031 219.555 li
324.664 219.895 li
325.297 220.199 li
325.926 220.473 li
326.551 220.711 li
327.172 220.91 li
327.785 221.074 li
328.395 221.203 li
328.996 221.297 li
329.59 221.352 li
330.172 221.367 li
330.742 221.348 li
331.301 221.285 li
331.84 221.188 li
332.359 221.051 li
332.852 220.871 li
333.316 220.652 li
333.738 220.391 li
334.113 220.094 li
334.426 219.754 li
334.668 219.375 li
334.82 218.957 li
334.871 218.508 li
334.82 218.023 li
334.66 217.516 li
334.406 216.988 li
334.07 216.438 li
333.664 215.867 li
333.207 215.273 li
332.711 214.656 li
332.176 214.02 li
331.613 213.352 li
331.031 212.656 li
330.43 211.934 li
329.812 211.184 li
329.184 210.402 li
328.547 209.586 li
327.895 208.742 li
327.234 207.871 li
326.57 206.965 li
325.895 206.027 li
325.219 205.059 li
324.535 204.059 li
323.844 203.031 li
323.148 201.973 li
322.449 200.883 li
321.75 199.766 li
321.043 198.617 li
320.336 197.445 li
319.621 196.25 li
318.91 195.027 li
318.195 193.777 li
317.477 192.504 li
316.754 191.203 li
316.027 189.879 li
315.301 188.531 li
314.57 187.16 li
313.836 185.77 li
313.102 184.352 li
312.363 182.918 li
311.625 181.465 li
310.883 179.988 li
310.141 178.496 li
309.395 176.988 li
308.645 175.461 li
307.895 173.918 li
307.141 172.359 li
306.387 170.785 li
305.629 169.199 li
304.871 167.602 li
304.109 165.988 li
303.348 164.367 li
302.582 162.734 li
301.816 161.094 li
301.051 159.441 li
300.281 157.785 li
299.508 156.117 li
295.621 147.711 li
294.84 146.02 li
293.27 142.637 li
291.691 139.254 li
290.898 137.566 li
289.312 134.199 li
288.516 132.523 li
287.715 130.852 li
286.914 129.188 li
286.113 127.527 li
285.312 125.879 li
284.504 124.238 li
283.699 122.605 li
282.891 120.984 li
282.078 119.375 li
281.27 117.781 li
280.453 116.195 li
279.641 114.625 li
278.82 113.066 li
278.004 111.527 li
277.184 110.004 li
276.359 108.496 li
275.535 107.008 li
274.711 105.535 li
273.883 104.086 li
273.055 102.652 li
272.227 101.242 li
271.391 99.855 li
270.559 98.492 li
269.723 97.148 li
268.887 95.832 li
268.047 94.539 li
267.203 93.273 li
266.363 92.031 li
265.52 90.816 li
264.676 89.6331 li
263.824 88.473 li
262.977 87.348 li
262.129 86.246 li
261.273 85.184 li
260.422 84.145 li
259.562 83.1411 li
258.707 82.172 li
257.848 81.234 li
256.988 80.328 li
256.125 79.461 li
255.262 78.625 li
254.398 77.828 li
253.531 77.066 li
252.66 76.34 li
251.789 75.652 li
250.918 75 li
250.047 74.387 li
249.172 73.816 li
248.293 73.281 li
247.414 72.785 li
246.535 72.328 li
245.652 71.918 li
244.77 71.543 li
243.887 71.211 li
243 70.918 li
242.113 70.668 li
241.223 70.461 li
240.332 70.293 li
239.441 70.168 li
238.547 70.086 li
237.652 70.047 li
236.758 70.047 li
235.859 70.0941 li
234.957 70.1801 li
234.059 70.309 li
233.156 70.48 li
232.25 70.699 li
231.348 70.953 li
230.441 71.254 li
229.531 71.5941 li
228.621 71.9771 li
227.711 72.402 li
226.801 72.871 li
225.887 73.379 li
224.973 73.926 li
224.055 74.5161 li
223.137 75.145 li
222.219 75.809 li
221.297 76.52 li
220.375 77.2661 li
219.453 78.047 li
218.527 78.871 li
217.602 79.73 li
216.676 80.625 li
215.746 81.5551 li
214.816 82.52 li
213.891 83.52 li
212.957 84.5551 li
212.023 85.621 li
211.09 86.7191 li
210.152 87.848 li
209.215 89.0081 li
208.277 90.195 li
207.34 91.414 li
206.398 92.66 li
205.457 93.9301 li
204.512 95.227 li
203.57 96.551 li
202.621 97.895 li
201.676 99.262 li
200.73 100.652 li
199.781 102.062 li
198.832 103.488 li
197.879 104.934 li
196.926 106.395 li
195.973 107.875 li
195.02 109.363 li
194.062 110.867 li
193.105 112.383 li
192.145 113.906 li
191.188 115.441 li
190.227 116.98 li
189.266 118.527 li
188.301 120.078 li
187.34 121.633 li
186.371 123.184 li
185.406 124.738 li
183.469 127.84 li
182.5 129.383 li
181.527 130.918 li
180.559 132.445 li
179.582 133.965 li
178.609 135.469 li
177.633 136.961 li
176.656 138.438 li
175.68 139.898 li
174.699 141.34 li
173.719 142.762 li
172.738 144.156 li
171.758 145.531 li
170.773 146.883 li
169.789 148.199 li
168.801 149.492 li
167.816 150.75 li
166.828 151.977 li
165.84 153.164 li
164.852 154.316 li
163.859 155.434 li
162.867 156.508 li
161.875 157.535 li
160.883 158.523 li
159.887 159.465 li
158.891 160.355 li
157.895 161.199 li
156.898 161.992 li
155.902 162.73 li
154.902 163.414 li
153.902 164.039 li
152.902 164.613 li
151.902 165.121 li
150.902 165.57 li
149.898 165.961 li
148.898 166.285 li
147.895 166.547 li
146.891 166.742 li
145.887 166.871 li
144.883 166.934 li
143.879 166.93 li
142.875 166.852 li
141.871 166.707 li
140.867 166.492 li
139.859 166.203 li
138.855 165.848 li
137.852 165.418 li
136.848 164.922 li
135.844 164.348 li
134.84 163.707 li
133.836 162.992 li
132.832 162.211 li
131.828 161.359 li
130.828 160.438 li
129.828 159.445 li
128.828 158.391 li
127.828 157.266 li
126.828 156.078 li
125.828 154.824 li
124.832 153.508 li
123.84 152.133 li
122.844 150.699 li
121.852 149.207 li
120.855 147.656 li
119.867 146.059 li
118.879 144.406 li
117.891 142.703 li
116.902 140.957 li
115.922 139.164 li
114.938 137.332 li
113.957 135.461 li
112.977 133.555 li
112 131.613 li
111.027 129.645 li
110.055 127.645 li
109.082 125.625 li
108.113 123.586 li
107.148 121.527 li
106.188 119.453 li
105.227 117.371 li
104.27 115.285 li
103.312 113.195 li
100.465 106.949 li
99.52 104.887 li
98.578 102.844 li
97.641 100.82 li
96.707 98.82 li
95.777 96.855 li
94.852 94.922 li
93.926 93.027 li
93.008 91.176 li
92.09 89.371 li
91.18 87.621 li
90.273 85.926 li
89.367 84.293 li
88.469 82.723 li
87.574 81.2271 li
86.684 79.8051 li
85.801 78.461 li
84.918 77.199 li
84.043 76.027 li
83.176 74.949 li
82.309 73.965 li
81.449 73.086 li
80.598 72.3051 li
79.75 71.637 li
78.91 71.078 li
78.074 70.637 li
77.246 70.316 li
76.426 70.117 li
75.609 70.039 li
74.801 70.0941 li
74 70.277 li
73.207 70.5941 li
72.422 71.039 li
71.645 71.629 li
70.871 72.3521 li
70.109 73.211 li
69.355 74.211 li
68.609 75.348 li
67.871 76.629 li
67.145 78.043 li
66.426 79.6021 li
65.715 81.297 li
65.023 83.105 li
64.34 85.047 li
63.66 87.117 li
62.996 89.32 li
62.34 91.652 li
61.691 94.105 li
61.055 96.684 li
60.426 99.387 li
59.809 102.203 li
59.199 105.137 li
58.598 108.184 li
58.008 111.34 li
57.426 114.602 li
56.855 117.969 li
56.293 121.438 li
55.742 125.004 li
55.199 128.664 li
54.668 132.414 li
54.145 136.254 li
53.633 140.176 li
53.129 144.184 li
52.633 148.266 li
52.148 152.426 li
51.672 156.656 li
51.207 160.961 li
50.75 165.324 li
50.301 169.758 li
49.863 174.25 li
49.434 178.801 li
49.012 183.402 li
48.602 188.059 li
48.199 192.766 li
47.805 197.52 li
47.422 202.316 li
47.043 207.156 li
46.676 212.035 li
46.316 216.953 li
45.969 221.906 li
45.625 226.891 li
45.289 231.906 li
44.965 236.953 li
44.648 242.023 li
44.34 247.121 li
44.039 252.242 li
43.746 257.383 li
43.461 262.543 li
43.184 267.723 li
42.914 272.918 li
42.652 278.125 li
42.398 283.348 li
42.148 288.582 li
41.91 293.824 li
41.68 299.078 li
41.453 304.336 li
41.238 309.602 li
41.027 314.867 li
40.824 320.141 li
40.629 325.41 li
40.441 330.684 li
40.258 335.953 li
40.086 341.227 li
39.914 346.492 li
39.754 351.75 li
39.602 357.004 li
39.453 362.25 li
39.312 367.484 li
39.176 372.715 li
39.047 377.926 li
38.926 383.125 li
38.809 388.309 li
38.699 393.477 li
38.598 398.625 li
38.5 403.75 li
38.406 408.852 li
38.32 413.93 li
38.242 418.973 li
38.172 423.988 li
38.102 428.965 li
38.039 433.898 li
37.984 438.785 li
37.934 443.617 li
37.891 448.391 li
37.852 453.086 li
37.816 457.703 li
37.789 462.215 li
37.766 466.609 li
37.75 470.859 li
37.738 474.934 li
37.73 478.785 li
37.73 482.367 li
37.734 485.605 li
37.746 488.414 li
37.762 490.699 li
37.781 492.348 li
37.809 493.27 li
37.84 493.406 li
37.875 492.75 li
37.918 491.359 li
37.965 489.336 li
38.016 486.785 li
38.074 483.82 li
38.133 480.527 li
38.199 476.988 li
38.27 473.254 li
38.344 469.375 li
38.422 465.383 li
38.504 461.301 li
38.594 457.152 li
38.684 452.953 li
38.781 448.719 li
38.879 444.453 li
38.984 440.168 li
39.09 435.867 li
39.203 431.562 li
39.32 427.25 li
39.438 422.941 li
39.562 418.633 li
39.691 414.332 li
39.82 410.039 li
39.957 405.758 li
40.094 401.488 li
40.238 397.23 li
40.383 392.988 li
40.531 388.766 li
40.688 384.559 li
40.844 380.367 li
41.004 376.199 li
41.168 372.047 li
41.336 367.918 li
41.504 363.812 li
41.68 359.727 li
41.855 355.664 li
42.035 351.625 li
42.223 347.609 li
42.406 343.617 li
42.598 339.648 li
42.789 335.707 li
42.988 331.793 li
43.188 327.902 li
43.391 324.039 li
43.594 320.199 li
43.801 316.391 li
44.012 312.609 li
44.227 308.852 li
44.441 305.125 li
44.664 301.426 li
44.887 297.754 li
45.109 294.113 li
45.34 290.5 li
45.566 286.918 li
45.801 283.363 li
46.035 279.84 li
46.273 276.348 li
46.516 272.883 li
46.758 269.449 li
47.004 266.047 li
47.25 262.676 li
47.496 259.336 li
47.75 256.027 li
48.004 252.75 li
48.262 249.508 li
48.52 246.297 li
48.781 243.113 li
49.043 239.969 li
49.309 236.852 li
49.574 233.77 li
49.844 230.719 li
50.113 227.703 li
50.387 224.719 li
50.66 221.77 li
50.938 218.855 li
51.215 215.973 li
51.492 213.125 li
51.773 210.309 li
52.055 207.531 li
52.34 204.785 li
52.625 202.074 li
52.91 199.395 li
53.199 196.754 li
53.488 194.145 li
53.781 191.57 li
54.074 189.035 li
54.367 186.531 li
54.66 184.062 li
54.957 181.633 li
55.254 179.234 li
55.551 176.871 li
55.848 174.543 li
56.148 172.25 li
56.449 169.992 li
56.75 167.77 li
57.051 165.586 li
57.352 163.434 li
57.656 161.316 li
57.957 159.238 li
58.262 157.191 li
58.566 155.18 li
58.871 153.203 li
59.176 151.266 li
59.48 149.359 li
59.785 147.488 li
60.09 145.652 li
60.395 143.852 li
60.695 142.086 li
61.004 140.355 li
61.305 138.656 li
61.609 136.992 li
61.91 135.363 li
62.215 133.77 li
62.516 132.207 li
62.816 130.68 li
63.117 129.188 li
63.418 127.727 li
63.715 126.297 li
64.012 124.902 li
64.309 123.543 li
64.605 122.211 li
64.898 120.914 li
65.188 119.648 li
65.48 118.418 li
65.766 117.215 li
66.055 116.047 li
66.34 114.906 li
66.621 113.801 li
66.902 112.723 li
67.18 111.676 li
67.453 110.66 li
67.727 109.676 li
67.996 108.719 li
68.266 107.789 li
68.527 106.895 li
68.789 106.023 li
69.047 105.184 li
69.301 104.371 li
69.555 103.59 li
69.801 102.832 li
70.043 102.105 li
70.281 101.402 li
70.516 100.73 li
70.746 100.086 li
70.973 99.465 li
71.191 98.871 li
71.406 98.305 li
71.617 97.762 li
71.824 97.25 li
72.023 96.762 li
72.219 96.297 li
72.406 95.859 li
72.59 95.445 li
72.766 95.059 li
72.934 94.699 li
73.098 94.359 li
73.254 94.051 li
73.398 93.762 li
73.539 93.5 li
73.676 93.2661 li
73.801 93.0551 li
73.922 92.867 li
74.031 92.707 li
74.133 92.57 li
74.227 92.461 li
74.309 92.379 li
74.387 92.32 li
74.453 92.289 li
74.512 92.285 li
74.559 92.309 li
74.598 92.359 li
74.629 92.438 li
74.645 92.547 li
74.656 92.684 li
74.652 92.8521 li
74.645 93.051 li
74.621 93.277 li
74.59 93.535 li
74.547 93.828 li
74.496 94.156 li
74.434 94.5161 li
74.359 94.91 li
74.273 95.344 li
74.18 95.812 li
74.074 96.324 li
73.957 96.871 li
73.828 97.461 li
73.691 98.094 li
73.539 98.77 li
73.383 99.488 li
73.211 100.254 li
73.031 101.07 li
72.84 101.934 li
72.641 102.852 li
72.43 103.816 li
72.207 104.844 li
71.977 105.922 li
71.734 107.059 li
71.484 108.258 li
71.227 109.52 li
70.957 110.844 li
70.68 112.234 li
70.391 113.695 li
70.094 115.223 li
69.789 116.828 li
69.477 118.508 li
69.152 120.262 li
68.824 122.098 li
68.488 124.016 li
68.141 126.02 li
67.789 128.113 li
67.43 130.297 li
67.062 132.574 li
66.688 134.945 li
66.309 137.418 li
65.922 139.992 li
65.527 142.676 li
65.129 145.465 li
64.723 148.367 li
64.312 151.383 li
63.898 154.52 li
63.477 157.781 li
63.051 161.168 li
62.617 164.688 li
62.184 168.34 li
61.742 172.133 li
61.297 176.07 li
60.852 180.156 li
60.398 184.398 li
59.941 188.797 li
59.484 193.359 li
59.023 198.094 li
58.559 203.004 li
58.094 208.098 li
57.625 213.383 li
57.156 218.863 li
56.684 224.547 li
56.211 230.445 li
55.734 236.566 li
55.262 242.918 li
54.785 249.512 li
54.312 256.359 li
53.84 263.473 li
53.363 270.859 li
52.895 278.547 li
52.426 286.535 li
51.961 294.852 li
51.496 303.516 li
51.039 312.539 li
50.59 321.957 li
50.145 331.785 li
49.707 342.059 li
49.281 352.809 li
48.879 363.617 li
48.492 374.895 li
48.121 386.664 li
47.77 398.953 li
47.438 411.773 li
47.133 425.148 li
46.855 439.086 li
46.609 453.582 li
46.402 468.613 li
46.238 484.133 li
46.121 500.074 li
46.059 516.324 li
46.051 532.758 li
.899077 .763424 0 0 cmyk
@
1.3875 lw
496.727 115.789 mo
500.332 115.789 li
.75021 .679683 .670222 .90164 cmyk
@
496.727 207.289 mo
500.332 207.289 li
@
496.727 298.785 mo
500.332 298.785 li
@
496.727 390.285 mo
500.332 390.285 li
@
496.727 481.781 mo
500.332 481.781 li
@
496.727 536.922 mo
496.727 70.039 li
@
541.145 296.73 mo
541.609 296.73 541.996 296.762 542.305 296.82 cv
542.617 296.875 542.895 296.973 543.141 297.102 cv
543.543 297.305 543.824 297.539 543.977 297.816 cv
544.129 298.09 544.203 298.352 544.203 298.598 cv
544.203 298.93 544.09 299.23 543.867 299.508 cv
543.645 299.781 543.379 299.996 543.074 300.156 cv
542.945 300.215 542.742 300.289 542.469 300.375 cv
542.195 300.461 541.887 300.543 541.547 300.625 cv
541.207 300.703 540.84 300.781 540.441 300.863 cv
540.043 300.941 539.656 301.016 539.27 301.078 cv
538.887 301.145 538.527 301.203 538.188 301.266 cv
537.848 301.32 537.555 301.363 537.309 301.395 cv
537.309 301.414 li
543.898 304.492 li
543.898 306.164 li
534.926 302 li
534.445 302.086 534.02 302.188 533.645 302.305 cv
533.27 302.418 532.945 302.543 532.668 302.672 cv
532.422 302.805 532.238 302.973 532.117 303.184 cv
531.992 303.391 531.934 303.605 531.934 303.82 cv
531.934 304.023 531.977 304.215 532.062 304.398 cv
532.148 304.578 532.258 304.734 532.387 304.863 cv
532.562 305.035 532.762 305.148 532.984 305.199 cv
533.207 305.25 533.422 305.305 533.621 305.359 cv
533.621 305.707 li
532.668 305.621 531.922 305.445 531.379 305.176 cv
530.836 304.91 530.566 304.508 530.566 303.973 cv
530.566 303.566 530.684 303.211 530.926 302.898 cv
531.164 302.59 531.426 302.359 531.715 302.219 cv
532.062 302.043 532.516 301.875 533.07 301.707 cv
533.629 301.539 534.223 301.371 534.859 301.199 cv
535.164 301.125 535.551 301.039 536.031 300.938 cv
536.508 300.836 537.012 300.73 537.547 300.625 cv
538.082 300.516 538.613 300.406 539.141 300.297 cv
539.668 300.191 540.133 300.086 540.539 299.984 cv
540.844 299.91 541.145 299.816 541.449 299.703 cv
541.754 299.586 542.008 299.434 542.207 299.246 cv
542.484 298.957 542.621 298.641 542.621 298.293 cv
542.621 298.105 542.57 297.922 542.469 297.742 cv
542.367 297.559 542.195 297.41 541.949 297.297 cv
541.848 297.238 541.711 297.191 541.535 297.156 cv
541.363 297.117 541.234 297.086 541.145 297.059 cv
541.145 296.73 li
f
496.727 527.531 mo
503.941 527.531 li
@
513.027 537.656 mo
511.668 537.656 510.496 537.453 509.504 537.039 cv
508.516 536.629 507.781 536.082 507.305 535.402 cv
506.93 534.867 506.738 534.32 506.738 533.754 cv
506.738 532.844 507.203 532.027 508.129 531.305 cv
509.285 530.395 510.852 529.941 512.832 529.941 cv
514.219 529.941 515.398 530.141 516.367 530.535 cv
517.336 530.934 518.039 531.441 518.48 532.066 cv
518.922 532.688 519.141 533.277 519.141 533.844 cv
519.141 534.984 518.469 535.938 517.125 536.703 cv
515.984 537.34 514.617 537.656 513.027 537.656 cv
cp
513.246 535.922 mo
514.891 535.922 516.234 535.723 517.277 535.316 cv
518.145 534.984 518.578 534.484 518.578 533.82 cv
518.578 533.504 518.438 533.176 518.156 532.836 cv
517.875 532.496 517.391 532.238 516.715 532.066 cv
515.715 531.789 514.293 531.652 512.441 531.652 cv
511.086 531.652 509.949 531.797 509.039 532.086 cv
508.359 532.289 507.883 532.562 507.605 532.91 cv
507.418 533.141 507.324 533.43 507.324 533.777 cv
507.324 534.168 507.5 534.523 507.844 534.84 cv
508.336 535.258 509.105 535.543 510.156 535.695 cv
511.203 535.848 512.234 535.922 513.246 535.922 cv
cp
517.211 527.035 mo
517.211 526.762 517.309 526.527 517.504 526.34 cv
517.699 526.152 517.926 526.059 518.188 526.059 cv
518.461 526.059 518.695 526.152 518.879 526.34 cv
519.07 526.527 519.16 526.762 519.16 527.035 cv
519.16 527.309 519.07 527.539 518.879 527.73 cv
518.695 527.918 518.461 528.012 518.188 528.012 cv
517.91 528.012 517.68 527.918 517.492 527.73 cv
517.305 527.539 517.211 527.309 517.211 527.035 cv
cp
506.977 516.953 mo
508.473 517.648 li
508.473 521.227 li
510.078 522.004 li
510.309 520.457 510.891 519.23 511.812 518.32 cv
512.609 517.539 513.547 517.148 514.633 517.148 cv
515.27 517.148 515.852 517.277 516.387 517.527 cv
516.922 517.781 517.379 518.102 517.754 518.492 cv
518.129 518.883 518.426 519.316 518.641 519.793 cv
518.977 520.457 519.141 521.152 519.141 521.875 cv
519.141 522.582 519.02 523.102 518.773 523.426 cv
518.527 523.75 518.258 523.914 517.969 523.914 cv
517.797 523.914 517.648 523.844 517.527 523.707 cv
517.402 523.57 517.344 523.398 517.344 523.199 cv
517.344 523.055 517.363 522.922 517.406 522.809 cv
517.449 522.691 517.574 522.496 517.773 522.223 cv
518.078 521.773 518.23 521.324 518.23 520.879 cv
518.23 520.184 517.969 519.582 517.449 519.066 cv
516.93 518.555 516.293 518.297 515.543 518.297 cv
514.82 518.297 514.148 518.531 513.527 518.992 cv
512.906 519.453 512.422 520.09 512.074 520.898 cv
511.812 521.551 511.66 522.426 511.617 523.523 cv
506.977 521.227 li
506.977 516.953 li
f
496.727 436.031 mo
503.941 436.031 li
@
513.027 446.086 mo
511.668 446.086 510.496 445.879 509.504 445.465 cv
508.516 445.055 507.781 444.508 507.305 443.828 cv
506.93 443.293 506.738 442.742 506.738 442.18 cv
506.738 441.27 507.203 440.453 508.129 439.73 cv
509.285 438.82 510.852 438.367 512.832 438.367 cv
514.219 438.367 515.398 438.562 516.367 438.961 cv
517.336 439.359 518.039 439.867 518.48 440.488 cv
518.922 441.109 519.141 441.703 519.141 442.27 cv
519.141 443.41 518.469 444.363 517.125 445.129 cv
515.984 445.766 514.617 446.086 513.027 446.086 cv
cp
513.246 444.352 mo
514.891 444.352 516.234 444.148 517.277 443.742 cv
518.145 443.41 518.578 442.91 518.578 442.246 cv
518.578 441.93 518.438 441.602 518.156 441.262 cv
517.875 440.922 517.391 440.664 516.715 440.488 cv
515.715 440.215 514.293 440.078 512.441 440.078 cv
511.086 440.078 509.949 440.223 509.039 440.512 cv
508.359 440.715 507.883 440.988 507.605 441.336 cv
507.418 441.566 507.324 441.855 507.324 442.203 cv
507.324 442.594 507.5 442.945 507.844 443.266 cv
508.336 443.684 509.105 443.969 510.156 444.121 cv
511.203 444.273 512.234 444.352 513.246 444.352 cv
cp
517.211 435.461 mo
517.211 435.188 517.309 434.953 517.504 434.766 cv
517.699 434.578 517.926 434.484 518.188 434.484 cv
518.461 434.484 518.695 434.578 518.879 434.766 cv
519.07 434.953 519.16 435.188 519.16 435.461 cv
519.16 435.734 519.07 435.965 518.879 436.152 cv
518.695 436.344 518.461 436.438 518.188 436.438 cv
517.91 436.438 517.68 436.344 517.492 436.152 cv
517.305 435.965 517.211 435.734 517.211 435.461 cv
cp
506.738 425.117 mo
507.066 425.117 li
507.137 425.898 507.289 426.535 507.52 427.027 cv
507.75 427.52 508.105 428.004 508.582 428.48 cv
509.059 428.957 509.59 429.352 510.176 429.66 cv
510.762 429.973 511.453 430.234 512.246 430.453 cv
511.668 429.598 511.379 428.746 511.379 427.895 cv
511.379 427.086 511.707 426.379 512.367 425.781 cv
513.023 425.184 513.871 424.879 514.914 424.879 cv
515.91 424.879 516.82 425.184 517.645 425.793 cv
518.641 426.516 519.141 427.477 519.141 428.676 cv
519.141 429.5 518.867 430.191 518.316 430.758 cv
517.277 431.867 515.918 432.426 514.242 432.426 cv
513.172 432.426 512.156 432.211 511.195 431.785 cv
510.234 431.359 509.379 430.75 508.629 429.953 cv
507.875 429.16 507.371 428.395 507.121 427.664 cv
506.867 426.938 506.738 426.262 506.738 425.641 cv
cp
512.898 430.605 mo
513.691 430.703 514.336 430.758 514.828 430.758 cv
515.391 430.758 516 430.652 516.66 430.441 cv
517.316 430.23 517.84 429.926 518.23 429.52 cv
518.504 429.215 518.641 428.848 518.641 428.414 cv
518.641 427.91 518.402 427.453 517.918 427.051 cv
517.434 426.645 516.75 426.441 515.867 426.441 cv
514.855 426.441 513.984 426.645 513.254 427.051 cv
512.527 427.453 512.16 428.016 512.16 428.742 cv
512.16 428.973 512.207 429.215 512.301 429.465 cv
512.395 429.719 512.594 430.098 512.898 430.605 cv
f
496.727 344.535 mo
503.941 344.535 li
@
513.027 354.508 mo
511.668 354.508 510.496 354.301 509.504 353.891 cv
508.516 353.48 507.781 352.934 507.305 352.254 cv
506.93 351.719 506.738 351.168 506.738 350.605 cv
506.738 349.695 507.203 348.879 508.129 348.156 cv
509.285 347.246 510.852 346.789 512.832 346.789 cv
514.219 346.789 515.398 346.988 516.367 347.387 cv
517.336 347.785 518.039 348.293 518.48 348.914 cv
518.922 349.535 519.141 350.129 519.141 350.695 cv
519.141 351.836 518.469 352.789 517.125 353.555 cv
515.984 354.191 514.617 354.508 513.027 354.508 cv
cp
513.246 352.773 mo
514.891 352.773 516.234 352.57 517.277 352.168 cv
518.145 351.836 518.578 351.336 518.578 350.672 cv
518.578 350.352 518.438 350.023 518.156 349.684 cv
517.875 349.344 517.391 349.09 516.715 348.914 cv
515.715 348.641 514.293 348.504 512.441 348.504 cv
511.086 348.504 509.949 348.648 509.039 348.938 cv
508.359 349.141 507.883 349.414 507.605 349.762 cv
507.418 349.992 507.324 350.281 507.324 350.629 cv
507.324 351.02 507.5 351.371 507.844 351.691 cv
508.336 352.109 509.105 352.395 510.156 352.547 cv
511.203 352.699 512.234 352.773 513.246 352.773 cv
cp
517.211 343.887 mo
517.211 343.613 517.309 343.379 517.504 343.191 cv
517.699 343.004 517.926 342.91 518.188 342.91 cv
518.461 342.91 518.695 343.004 518.879 343.191 cv
519.07 343.379 519.16 343.613 519.16 343.887 cv
519.16 344.16 519.07 344.391 518.879 344.578 cv
518.695 344.766 518.461 344.863 518.188 344.863 cv
517.91 344.863 517.68 344.766 517.492 344.578 cv
517.305 344.391 517.211 344.16 517.211 343.887 cv
cp
506.977 339.809 mo
506.977 333.414 li
507.324 333.414 li
519.16 337.402 li
519.16 338.379 li
508.41 334.824 li
508.41 338.098 li
508.41 338.762 508.488 339.23 508.648 339.508 cv
508.922 340.012 509.34 340.41 509.906 340.699 cv
509.82 340.961 li
506.977 339.809 li
f
496.727 253.035 mo
503.941 253.035 li
@
513.027 262.934 mo
511.668 262.934 510.496 262.727 509.504 262.316 cv
508.516 261.906 507.781 261.359 507.305 260.68 cv
506.93 260.145 506.738 259.594 506.738 259.031 cv
506.738 258.121 507.203 257.305 508.129 256.582 cv
509.285 255.672 510.852 255.215 512.832 255.215 cv
514.219 255.215 515.398 255.414 516.367 255.812 cv
517.336 256.211 518.039 256.719 518.48 257.34 cv
518.922 257.961 519.141 258.555 519.141 259.117 cv
519.141 260.262 518.469 261.215 517.125 261.98 cv
515.984 262.617 514.617 262.934 513.027 262.934 cv
cp
513.246 261.199 mo
514.891 261.199 516.234 260.996 517.277 260.594 cv
518.145 260.262 518.578 259.762 518.578 259.098 cv
518.578 258.777 518.438 258.449 518.156 258.109 cv
517.875 257.77 517.391 257.512 516.715 257.34 cv
515.715 257.066 514.293 256.93 512.441 256.93 cv
511.086 256.93 509.949 257.074 509.039 257.363 cv
508.359 257.562 507.883 257.84 507.605 258.188 cv
507.418 258.414 507.324 258.707 507.324 259.055 cv
507.324 259.441 507.5 259.797 507.844 260.113 cv
508.336 260.535 509.105 260.82 510.156 260.973 cv
511.203 261.121 512.234 261.199 513.246 261.199 cv
cp
517.211 252.309 mo
517.211 252.035 517.309 251.805 517.504 251.617 cv
517.699 251.43 517.926 251.336 518.188 251.336 cv
518.461 251.336 518.695 251.43 518.879 251.617 cv
519.07 251.805 519.16 252.035 519.16 252.309 cv
519.16 252.586 519.07 252.816 518.879 253.004 cv
518.695 253.191 518.461 253.285 518.188 253.285 cv
517.91 253.285 517.68 253.191 517.492 253.004 cv
517.305 252.816 517.211 252.586 517.211 252.309 cv
cp
512.918 246.586 mo
512.141 247.539 511.512 248.156 511.043 248.43 cv
510.574 248.703 510.086 248.84 509.582 248.84 cv
508.801 248.84 508.133 248.543 507.574 247.941 cv
507.02 247.344 506.738 246.543 506.738 245.547 cv
506.738 244.578 507 243.801 507.52 243.215 cv
508.043 242.633 508.633 242.34 509.297 242.34 cv
509.746 242.34 510.203 242.496 510.664 242.816 cv
511.129 243.133 511.676 243.789 512.312 244.789 cv
513.105 243.762 513.734 243.082 514.199 242.75 cv
514.789 242.301 515.422 242.078 516.086 242.078 cv
516.922 242.078 517.641 242.395 518.242 243.031 cv
518.844 243.668 519.141 244.504 519.141 245.547 cv
519.141 246.688 518.789 247.578 518.078 248.215 cv
517.5 248.719 516.871 248.973 516.191 248.973 cv
515.672 248.973 515.152 248.789 514.633 248.43 cv
514.113 248.066 513.539 247.453 512.918 246.586 cv
cp
511.965 245.223 mo
511.328 244.516 510.828 244.066 510.457 243.879 cv
510.09 243.688 509.676 243.594 509.211 243.594 cv
508.605 243.594 508.125 243.77 507.77 244.117 cv
507.414 244.461 507.238 244.934 507.238 245.523 cv
507.238 246.133 507.414 246.621 507.762 247 cv
508.105 247.375 508.512 247.562 508.973 247.562 cv
509.277 247.562 509.586 247.484 509.895 247.324 cv
510.207 247.164 510.5 246.941 510.773 246.652 cv
cp
513.246 246.176 mo
513.648 246.668 514.094 247.027 514.578 247.262 cv
515.062 247.488 515.586 247.605 516.148 247.605 cv
516.914 247.605 517.527 247.398 517.98 246.988 cv
518.438 246.578 518.664 246.051 518.664 245.418 cv
518.664 244.781 518.484 244.27 518.121 243.887 cv
517.762 243.504 517.328 243.312 516.82 243.312 cv
516.402 243.312 516.02 243.43 515.672 243.66 cv
515.051 244.066 514.242 244.902 513.246 246.176 cv
f
496.727 161.539 mo
503.941 161.539 li
@
513.027 171.359 mo
511.668 171.359 510.496 171.152 509.504 170.738 cv
508.516 170.328 507.781 169.781 507.305 169.105 cv
506.93 168.57 506.738 168.02 506.738 167.457 cv
506.738 166.547 507.203 165.73 508.129 165.008 cv
509.285 164.098 510.852 163.641 512.832 163.641 cv
514.219 163.641 515.398 163.84 516.367 164.238 cv
517.336 164.633 518.039 165.145 518.48 165.766 cv
518.922 166.387 519.141 166.98 519.141 167.543 cv
519.141 168.684 518.469 169.641 517.125 170.406 cv
515.984 171.039 514.617 171.359 513.027 171.359 cv
cp
513.246 169.625 mo
514.891 169.625 516.234 169.422 517.277 169.016 cv
518.145 168.684 518.578 168.188 518.578 167.52 cv
518.578 167.203 518.438 166.875 518.156 166.535 cv
517.875 166.195 517.391 165.938 516.715 165.766 cv
515.715 165.492 514.293 165.355 512.441 165.355 cv
511.086 165.355 509.949 165.496 509.039 165.785 cv
508.359 165.988 507.883 166.266 507.605 166.609 cv
507.418 166.84 507.324 167.133 507.324 167.477 cv
507.324 167.867 507.5 168.223 507.844 168.539 cv
508.336 168.961 509.105 169.242 510.156 169.398 cv
511.203 169.547 512.234 169.625 513.246 169.625 cv
cp
517.211 160.734 mo
517.211 160.461 517.309 160.23 517.504 160.039 cv
517.699 159.855 517.926 159.762 518.188 159.762 cv
518.461 159.762 518.695 159.855 518.879 160.039 cv
519.07 160.23 519.16 160.461 519.16 160.734 cv
519.16 161.012 519.07 161.242 518.879 161.43 cv
518.695 161.617 518.461 161.711 518.188 161.711 cv
517.91 161.711 517.68 161.617 517.492 161.43 cv
517.305 161.242 517.211 161.012 517.211 160.734 cv
cp
519.16 157.527 mo
518.836 157.527 li
518.836 156.762 518.664 156.051 518.316 155.391 cv
517.969 154.734 517.367 154.098 516.508 153.484 cv
515.648 152.867 514.703 152.445 513.676 152.215 cv
514.27 153.141 514.566 153.973 514.566 154.711 cv
514.566 155.547 514.246 156.266 513.602 156.863 cv
512.957 157.465 512.094 157.766 511.012 157.766 cv
509.969 157.766 509.039 157.469 508.215 156.875 cv
507.23 156.152 506.738 155.207 506.738 154.035 cv
506.738 153.055 507.145 152.215 507.953 151.523 cv
508.953 150.668 510.188 150.242 511.66 150.242 cv
512.992 150.242 514.23 150.566 515.379 151.219 cv
516.527 151.867 517.48 152.773 518.23 153.93 cv
518.852 154.883 519.16 155.914 519.16 157.027 cv
cp
513.027 152.062 mo
512.262 151.965 511.656 151.91 511.207 151.91 cv
510.629 151.91 510.012 152.008 509.352 152.203 cv
508.695 152.398 508.191 152.676 507.836 153.027 cv
507.48 153.383 507.305 153.785 507.305 154.23 cv
507.305 154.754 507.539 155.211 508.008 155.609 cv
508.477 156.008 509.176 156.203 510.102 156.203 cv
511.344 156.203 512.312 155.945 513.008 155.426 cv
513.512 155.035 513.766 154.566 513.766 154.016 cv
513.766 153.742 513.699 153.418 513.57 153.051 cv
513.438 152.684 513.258 152.352 513.027 152.062 cv
f
496.727 70.039 mo
503.941 70.039 li
@
508.148 78.309 mo
506.738 75.402 li
506.738 75.121 li
516.82 75.121 li
517.484 75.121 517.902 75.094 518.066 75.035 cv
518.234 74.977 518.359 74.863 518.449 74.688 cv
518.535 74.516 518.586 74.16 518.598 73.625 cv
518.926 73.625 li
518.926 78.113 li
518.598 78.113 li
518.586 77.551 518.535 77.184 518.449 77.02 cv
518.359 76.855 518.246 76.738 518.102 76.672 cv
517.957 76.609 517.531 76.574 516.82 76.574 cv
510.383 76.574 li
509.5 76.574 508.938 76.605 508.691 76.66 cv
508.504 76.703 508.367 76.781 508.281 76.891 cv
508.191 76.996 508.148 77.133 508.148 77.289 cv
508.148 77.508 508.242 77.805 508.43 78.18 cv
cp
517.211 69.16 mo
517.211 68.887 517.309 68.656 517.504 68.465 cv
517.699 68.277 517.926 68.184 518.188 68.184 cv
518.461 68.184 518.695 68.277 518.879 68.465 cv
519.07 68.656 519.16 68.887 519.16 69.16 cv
519.16 69.434 519.07 69.664 518.879 69.855 cv
518.695 70.043 518.461 70.137 518.188 70.137 cv
517.91 70.137 517.68 70.043 517.492 69.855 cv
517.305 69.664 517.211 69.434 517.211 69.16 cv
cp
513.027 66.258 mo
511.668 66.258 510.496 66.051 509.504 65.637 cv
508.516 65.227 507.781 64.68 507.305 64 cv
506.93 63.465 506.738 62.914 506.738 62.352 cv
506.738 61.441 507.203 60.625 508.129 59.902 cv
509.285 58.992 510.852 58.535 512.832 58.535 cv
514.219 58.535 515.398 58.734 516.367 59.133 cv
517.336 59.531 518.039 60.039 518.48 60.66 cv
518.922 61.281 519.141 61.875 519.141 62.441 cv
519.141 63.582 518.469 64.535 517.125 65.301 cv
515.984 65.938 514.617 66.258 513.027 66.258 cv
cp
513.246 64.523 mo
514.891 64.523 516.234 64.32 517.277 63.914 cv
518.145 63.582 518.578 63.082 518.578 62.418 cv
518.578 62.102 518.438 61.77 518.156 61.434 cv
517.875 61.094 517.391 60.836 516.715 60.66 cv
515.715 60.387 514.293 60.25 512.441 60.25 cv
511.086 60.25 509.949 60.395 509.039 60.684 cv
508.359 60.887 507.883 61.16 507.605 61.508 cv
507.418 61.738 507.324 62.027 507.324 62.375 cv
507.324 62.766 507.5 63.117 507.844 63.438 cv
508.336 63.855 509.105 64.141 510.156 64.293 cv
511.203 64.445 512.234 64.523 513.246 64.523 cv
f
45.961 536.922 mo
45.961 540.527 li
@
101.785 536.922 mo
101.785 540.527 li
@
157.613 536.922 mo
157.613 540.527 li
@
213.438 536.922 mo
213.438 540.527 li
@
269.262 536.922 mo
269.262 540.527 li
@
325.086 536.922 mo
325.086 540.527 li
@
380.91 536.922 mo
380.91 540.527 li
@
436.734 536.922 mo
436.734 540.527 li
@
492.562 536.922 mo
492.562 540.527 li
@
496.727 536.922 mo
18.051 536.922 li
@
254.258 589.301 mo
254.562 589.012 254.871 588.793 255.191 588.648 cv
255.395 588.531 255.941 588.359 256.84 588.129 cv
255.691 587.348 li
255.398 587.145 255.129 586.895 254.879 586.602 cv
254.625 586.305 254.445 586.047 254.344 585.832 cv
254.285 585.688 254.258 585.527 254.258 585.352 cv
254.258 585.109 254.328 584.91 254.465 584.758 cv
254.602 584.605 254.766 584.531 254.953 584.531 cv
255.184 584.531 255.344 584.574 255.43 584.66 cv
255.574 584.82 255.648 585.008 255.648 585.223 cv
255.648 585.352 255.617 585.484 255.559 585.613 cv
255.473 585.887 255.43 586.074 255.43 586.176 cv
255.43 586.32 255.508 586.488 255.668 586.676 cv
255.973 587.039 256.562 587.473 257.445 587.977 cv
260.461 587.262 li
260.922 587.145 261.199 587.051 261.293 586.98 cv
261.387 586.906 261.434 586.828 261.434 586.742 cv
261.434 586.625 261.371 586.48 261.238 586.309 cv
260.965 585.988 260.609 585.715 260.176 585.484 cv
260.328 585.18 li
261.023 585.555 261.602 586.027 262.062 586.59 cv
262.324 586.906 262.453 587.184 262.453 587.414 cv
262.453 587.746 262.266 588.004 261.891 588.195 cv
261.66 588.324 260.676 588.578 258.941 588.953 cv
260.531 589.879 261.551 590.613 262 591.164 cv
262.301 591.523 262.453 591.871 262.453 592.203 cv
262.453 592.434 262.367 592.652 262.191 592.855 cv
262.062 592.984 261.891 593.051 261.672 593.051 cv
261.484 593.051 261.324 592.984 261.195 592.855 cv
261.066 592.723 261 592.566 261 592.379 cv
261 592.191 261.098 591.996 261.281 591.793 cv
261.414 591.633 261.48 591.512 261.48 591.422 cv
261.48 591.367 261.434 591.277 261.348 591.164 cv
261.117 590.891 260.633 590.512 259.895 590.035 cv
259.16 589.559 258.621 589.25 258.289 589.105 cv
256.859 589.465 256.109 589.66 256.035 589.688 cv
255.648 589.82 255.371 589.992 255.211 590.211 cv
255.055 590.426 254.973 590.75 254.973 591.184 cv
254.973 591.316 254.98 591.469 254.996 591.641 cv
254.672 591.641 li
cp
250.051 576.891 mo
259.918 579.711 li
260.496 579.883 260.914 579.973 261.176 579.973 cv
261.391 579.973 261.559 579.895 261.672 579.742 cv
261.789 579.59 261.867 579.242 261.91 578.691 cv
262.238 578.777 li
262.238 583.309 li
261.91 583.199 li
261.898 582.711 261.859 582.391 261.805 582.246 cv
261.688 582 261.543 581.812 261.371 581.684 cv
261.098 581.496 260.609 581.301 259.918 581.098 cv
252.828 579.059 li
252.395 578.93 252.148 578.859 252.09 578.844 cv
251.977 578.828 251.859 578.82 251.742 578.82 cv
251.539 578.82 251.383 578.875 251.266 578.984 cv
251.152 579.094 251.094 579.25 251.094 579.449 cv
251.094 579.594 251.129 579.832 251.199 580.164 cv
250.879 580.273 li
250.051 577.305 li
250.051 576.891 li
f
464.648 536.922 mo
464.648 544.137 li
@
468.062 545.312 mo
470.363 546.137 li
470.363 553.18 li
470.035 553.18 li
468.145 551.113 466.598 549.656 465.398 548.812 cv
464.199 547.965 463.105 547.543 462.125 547.543 cv
461.355 547.543 460.73 547.773 460.246 548.238 cv
459.766 548.699 459.523 549.258 459.523 549.906 cv
459.523 550.484 459.691 551.008 460.031 551.48 cv
460.371 551.949 460.875 552.293 461.539 552.508 cv
461.539 552.832 li
460.453 552.688 459.621 552.312 459.043 551.707 cv
458.469 551.098 458.176 550.34 458.176 549.43 cv
458.176 548.461 458.488 547.652 459.109 547.004 cv
459.73 546.352 460.461 546.027 461.301 546.027 cv
461.906 546.027 462.512 546.172 463.121 546.461 cv
464.074 546.895 465.078 547.594 466.137 548.562 cv
467.738 550.023 468.707 550.941 469.039 551.316 cv
469.039 548.195 li
469.039 547.559 469.016 547.113 468.965 546.859 cv
468.914 546.609 468.816 546.375 468.672 546.168 cv
468.527 545.957 468.324 545.781 468.062 545.637 cv
468.062 545.312 li
f
408.824 536.922 mo
408.824 544.137 li
@
405.191 552.66 mo
404.383 552.312 403.762 551.879 403.328 551.359 cv
402.895 550.84 402.676 550.195 402.676 549.43 cv
402.676 548.461 402.988 547.727 403.609 547.219 cv
404.074 546.828 404.562 546.633 405.086 546.633 cv
405.965 546.633 406.867 547.184 407.797 548.281 cv
408.082 547.543 408.496 546.988 409.027 546.613 cv
409.566 546.234 410.191 546.047 410.914 546.047 cv
411.941 546.047 412.832 546.379 413.582 547.047 cv
414.578 547.898 415.078 549.133 415.078 550.754 cv
415.078 551.562 414.977 552.109 414.773 552.398 cv
414.574 552.688 414.355 552.832 414.125 552.832 cv
413.949 552.832 413.805 552.766 413.68 552.629 cv
413.559 552.492 413.496 552.328 413.496 552.141 cv
413.496 551.996 413.52 551.844 413.562 551.684 cv
413.59 551.582 413.695 551.355 413.875 551 cv
414.055 550.648 414.168 550.406 414.211 550.277 cv
414.27 550.059 414.297 549.828 414.297 549.582 cv
414.297 548.988 414.066 548.469 413.605 548.02 cv
413.141 547.574 412.594 547.348 411.957 547.348 cv
411.492 547.348 411.047 547.449 410.613 547.652 cv
410.281 547.812 410.027 547.984 409.855 548.172 cv
409.621 548.418 409.41 548.762 409.227 549.203 cv
409.039 549.645 408.941 550.094 408.941 550.559 cv
408.941 550.84 li
408.66 550.84 li
408.605 550.375 408.438 549.91 408.16 549.441 cv
407.891 548.973 407.559 548.633 407.176 548.422 cv
406.793 548.211 406.363 548.109 405.887 548.109 cv
405.293 548.109 404.809 548.297 404.434 548.672 cv
404.059 549.047 403.871 549.516 403.871 550.082 cv
403.871 550.992 404.355 551.75 405.324 552.355 cv
405.191 552.66 li
f
353 536.922 mo
353 544.137 li
@
354.961 545.18 mo
356.219 545.18 li
356.219 546.785 li
359.363 546.785 li
359.363 548.238 li
356.219 548.238 li
356.219 553.289 li
355.09 553.289 li
347.176 547.738 li
347.176 546.785 li
354.961 546.785 li
cp
354.961 548.238 mo
349.02 548.238 li
354.961 552.422 li
354.961 548.238 li
f
297.176 536.922 mo
297.176 544.137 li
@
291.914 545.746 mo
293.41 546.438 li
293.41 550.016 li
295.016 550.797 li
295.246 549.25 295.824 548.02 296.754 547.109 cv
297.547 546.328 298.484 545.941 299.57 545.941 cv
300.203 545.941 300.789 546.066 301.324 546.32 cv
301.859 546.57 302.316 546.895 302.691 547.285 cv
303.066 547.676 303.363 548.109 303.578 548.586 cv
303.91 549.25 304.078 549.941 304.078 550.664 cv
304.078 551.375 303.953 551.891 303.711 552.215 cv
303.465 552.543 303.195 552.703 302.906 552.703 cv
302.734 552.703 302.586 552.637 302.465 552.496 cv
302.34 552.359 302.277 552.191 302.277 551.988 cv
302.277 551.844 302.301 551.715 302.344 551.598 cv
302.387 551.484 302.512 551.289 302.711 551.012 cv
303.016 550.566 303.168 550.117 303.168 549.668 cv
303.168 548.977 302.906 548.371 302.387 547.859 cv
301.867 547.344 301.23 547.09 300.48 547.09 cv
299.758 547.09 299.086 547.32 298.465 547.781 cv
297.844 548.246 297.359 548.883 297.012 549.691 cv
296.754 550.34 296.598 551.215 296.555 552.312 cv
291.914 550.016 li
291.914 545.746 li
f
241.348 536.922 mo
241.348 544.137 li
@
234.789 545.484 mo
235.117 545.484 li
235.188 546.266 235.34 546.902 235.57 547.391 cv
235.801 547.883 236.156 548.367 236.633 548.844 cv
237.109 549.32 237.641 549.715 238.227 550.027 cv
238.812 550.336 239.504 550.602 240.297 550.816 cv
239.719 549.965 239.43 549.113 239.43 548.258 cv
239.43 547.449 239.758 546.746 240.414 546.145 cv
241.074 545.547 241.922 545.246 242.965 545.246 cv
243.961 545.246 244.871 545.551 245.695 546.156 cv
246.691 546.879 247.191 547.84 247.191 549.039 cv
247.191 549.863 246.918 550.559 246.367 551.121 cv
245.328 552.234 243.969 552.789 242.293 552.789 cv
241.223 552.789 240.207 552.578 239.246 552.152 cv
238.285 551.723 237.43 551.113 236.676 550.32 cv
235.926 549.523 235.422 548.762 235.172 548.031 cv
234.914 547.301 234.789 546.625 234.789 546.004 cv
cp
240.949 550.969 mo
241.742 551.07 242.387 551.121 242.875 551.121 cv
243.441 551.121 244.051 551.016 244.711 550.809 cv
245.367 550.598 245.891 550.289 246.281 549.887 cv
246.555 549.582 246.691 549.215 246.691 548.781 cv
246.691 548.273 246.449 547.82 245.965 547.414 cv
245.48 547.008 244.801 546.809 243.918 546.809 cv
242.906 546.809 242.035 547.008 241.305 547.414 cv
240.574 547.82 240.211 548.383 240.211 549.105 cv
240.211 549.336 240.258 549.578 240.352 549.832 cv
240.445 550.086 240.645 550.465 240.949 550.969 cv
f
185.523 536.922 mo
185.523 544.137 li
@
179.527 551.75 mo
179.527 545.355 li
179.875 545.355 li
191.711 549.344 li
191.711 550.32 li
180.961 546.762 li
180.961 550.039 li
180.961 550.703 181.039 551.172 181.199 551.445 cv
181.473 551.953 181.891 552.352 182.457 552.641 cv
182.367 552.898 li
179.527 551.75 li
f
129.699 536.922 mo
129.699 544.137 li
@
129.969 550.102 mo
129.188 551.055 128.562 551.672 128.094 551.945 cv
127.625 552.219 127.137 552.355 126.633 552.355 cv
125.852 552.355 125.184 552.059 124.625 551.457 cv
124.07 550.855 123.789 550.059 123.789 549.062 cv
123.789 548.094 124.051 547.316 124.57 546.73 cv
125.094 546.145 125.684 545.852 126.348 545.852 cv
126.797 545.852 127.254 546.012 127.715 546.328 cv
128.176 546.648 128.727 547.305 129.363 548.305 cv
130.156 547.277 130.785 546.598 131.25 546.266 cv
131.84 545.816 132.469 545.594 133.137 545.594 cv
133.973 545.594 134.691 545.91 135.293 546.547 cv
135.891 547.184 136.191 548.02 136.191 549.062 cv
136.191 550.203 135.84 551.094 135.129 551.727 cv
134.551 552.234 133.922 552.488 133.242 552.488 cv
132.723 552.488 132.203 552.305 131.684 551.945 cv
131.16 551.582 130.59 550.969 129.969 550.102 cv
cp
129.016 548.738 mo
128.379 548.027 127.879 547.582 127.508 547.391 cv
127.141 547.203 126.727 547.109 126.262 547.109 cv
125.656 547.109 125.176 547.285 124.82 547.629 cv
124.469 547.977 124.289 548.449 124.289 549.039 cv
124.289 549.648 124.465 550.137 124.809 550.516 cv
125.156 550.891 125.562 551.078 126.023 551.078 cv
126.328 551.078 126.637 551 126.945 550.84 cv
127.258 550.68 127.551 550.457 127.824 550.168 cv
cp
130.297 549.691 mo
130.699 550.184 131.145 550.543 131.629 550.773 cv
132.113 551.004 132.637 551.121 133.199 551.121 cv
133.965 551.121 134.578 550.914 135.031 550.504 cv
135.488 550.09 135.715 549.566 135.715 548.93 cv
135.715 548.297 135.535 547.785 135.172 547.402 cv
134.812 547.02 134.379 546.828 133.871 546.828 cv
133.453 546.828 133.07 546.945 132.723 547.176 cv
132.102 547.582 131.293 548.418 130.297 549.691 cv
f
73.875 536.922 mo
73.875 544.137 li
@
80.715 552.617 mo
80.387 552.617 li
80.387 551.852 80.215 551.141 79.867 550.48 cv
79.52 549.824 78.918 549.188 78.059 548.574 cv
77.199 547.961 76.254 547.535 75.23 547.305 cv
75.82 548.23 76.117 549.062 76.117 549.797 cv
76.117 550.637 75.797 551.355 75.152 551.957 cv
74.508 552.555 73.645 552.855 72.562 552.855 cv
71.52 552.855 70.59 552.559 69.766 551.965 cv
68.781 551.242 68.289 550.297 68.289 549.125 cv
68.289 548.145 68.695 547.305 69.504 546.613 cv
70.504 545.758 71.738 545.332 73.211 545.332 cv
74.543 545.332 75.781 545.656 76.93 546.309 cv
78.078 546.957 79.031 547.863 79.781 549.02 cv
80.402 549.973 80.715 551.004 80.715 552.117 cv
cp
74.578 547.152 mo
73.812 547.051 73.203 547.004 72.758 547.004 cv
72.18 547.004 71.562 547.098 70.902 547.293 cv
70.246 547.488 69.738 547.766 69.387 548.117 cv
69.031 548.473 68.855 548.875 68.855 549.32 cv
68.855 549.844 69.09 550.301 69.559 550.699 cv
70.027 551.098 70.727 551.293 71.652 551.293 cv
72.895 551.293 73.863 551.035 74.555 550.516 cv
75.062 550.125 75.316 549.652 75.316 549.105 cv
75.316 548.832 75.25 548.508 75.121 548.141 cv
74.988 547.773 74.809 547.441 74.578 547.152 cv
f
18.051 536.922 mo
18.051 544.137 li
@
14.199 559.77 mo
12.789 556.867 li
12.789 556.586 li
22.871 556.586 li
23.535 556.586 23.953 556.555 24.117 556.496 cv
24.285 556.441 24.41 556.324 24.496 556.152 cv
24.586 555.977 24.637 555.625 24.648 555.09 cv
24.977 555.09 li
24.977 559.578 li
24.648 559.578 li
24.637 559.012 24.586 558.648 24.496 558.48 cv
24.41 558.316 24.297 558.199 24.152 558.133 cv
24.008 558.07 23.578 558.035 22.871 558.035 cv
16.434 558.035 li
15.551 558.035 14.988 558.066 14.742 558.125 cv
14.555 558.168 14.418 558.242 14.328 558.352 cv
14.242 558.461 14.199 558.594 14.199 558.754 cv
14.199 558.969 14.293 559.266 14.48 559.641 cv
cp
19.078 552.227 mo
17.719 552.227 16.547 552.02 15.555 551.609 cv
14.566 551.195 13.832 550.652 13.355 549.973 cv
12.98 549.438 12.789 548.887 12.789 548.324 cv
12.789 547.414 13.254 546.598 14.18 545.875 cv
15.336 544.965 16.902 544.508 18.883 544.508 cv
20.27 544.508 21.449 544.707 22.418 545.105 cv
23.387 545.504 24.09 546.012 24.531 546.633 cv
24.973 547.254 25.191 547.848 25.191 548.41 cv
25.191 549.555 24.52 550.508 23.176 551.273 cv
22.035 551.91 20.668 552.227 19.078 552.227 cv
cp
19.297 550.492 mo
20.941 550.492 22.285 550.289 23.328 549.887 cv
24.195 549.555 24.629 549.055 24.629 548.391 cv
24.629 548.07 24.488 547.742 24.203 547.402 cv
23.922 547.062 23.441 546.809 22.766 546.633 cv
21.766 546.359 20.344 546.223 18.492 546.223 cv
17.133 546.223 16 546.367 15.09 546.656 cv
14.41 546.859 13.934 547.133 13.656 547.48 cv
13.469 547.711 13.375 548 13.375 548.348 cv
13.375 548.738 13.551 549.09 13.895 549.41 cv
14.387 549.828 15.156 550.113 16.203 550.266 cv
17.254 550.418 18.281 550.492 19.297 550.492 cv
f
gsave
0 0 mo
555 0 li
555 606 li
0 606 li
cp
clp
.8 lw
0 lj
4 ml
71.172 14.2971 mo
75 70.297 li
@
74.4526 62.3167 mo
71.0433 59.3397 li
74.9999 70.2965 li
77.4292 58.9023 li
cp
ef
74.4526 62.3166 mo
71.0433 59.3397 li
74.9999 70.2965 li
77.4292 58.9023 li
cp
.798139 lw
gsave
[-.0683346 -1 1 -.0683346 0 0 ]ct
@
grestore newpath
.8 lw
234.262 11.2971 mo
235 70.297 li
@
234.898 62.2967 mo
231.66 59.1367 li
235 70.2966 li
238.058 59.0587 li
cp
ef
234.898 62.2966 mo
231.66 59.1366 li
235 70.2966 li
238.058 59.0586 li
cp
.799937 lw
gsave
[-.0125014 -1 1 -.0125014 0 0 ]ct
@
grestore newpath
.8 lw
386 11.098 mo
408.109 68.711 li
@
405.246 61.2424 mo
401.109 59.4019 li
408.11 68.7112 li
407.086 57.1095 li
cp
ef
405.246 61.2424 mo
401.109 59.4019 li
408.11 68.7112 li
407.086 57.1095 li
cp
.746889 lw
gsave
[-.383765 -1 1 -.383765 0 0 ]ct
@
grestore newpath
.8 lw
414.926 14.2971 mo
416.438 68.711 li
@
416.214 60.7151 mo
412.929 57.606 li
416.438 68.7111 li
419.328 57.4259 li
cp
ef
416.214 60.715 mo
412.929 57.606 li
416.438 68.711 li
419.328 57.4259 li
cp
.79969 lw
gsave
[-.0278292 -1 1 -.0278292 0 0 ]ct
@
grestore newpath
.8 lw
447.562 11.27 mo
427 69.4691 li
@
429.664 61.9263 mo
427.715 57.8406 li
427 69.4686 li
433.75 59.973 li
cp
ef
429.664 61.9262 mo
427.715 57.8405 li
427 69.4686 li
433.75 59.973 li
cp
.754298 lw
gsave
[.35334 -1 1 .35334 0 0 ]ct
@
grestore newpath
75 .664001 mo
80.801 .664001 85.5 5.36304 85.5 11.164 cv
85.5 16.9611 80.801 21.664 75 21.664 cv
69.199 21.664 64.5 16.9611 64.5 11.164 cv
64.5 5.36304 69.199 .664001 75 .664001 cv
cp
0 .00579843 .00103761 0 cmyk
f
1.2 lw
75 .664001 mo
80.801 .664001 85.5 5.36304 85.5 11.164 cv
85.5 16.9611 80.801 21.664 75 21.664 cv
69.199 21.664 64.5 16.9611 64.5 11.164 cv
64.5 5.36304 69.199 .664001 75 .664001 cv
cp
.75021 .679683 .670222 .90164 cmyk
@
447.562 .77002 mo
453.363 .77002 458.062 5.46906 458.062 11.27 cv
458.062 17.07 453.363 21.77 447.562 21.77 cv
441.766 21.77 437.062 17.07 437.062 11.27 cv
437.062 5.46906 441.766 .77002 447.562 .77002 cv
cp
0 .00579843 .00103761 0 cmyk
f
447.562 .77002 mo
453.363 .77002 458.062 5.46906 458.062 11.27 cv
458.062 17.07 453.363 21.77 447.562 21.77 cv
441.766 21.77 437.062 17.07 437.062 11.27 cv
437.062 5.46906 441.766 .77002 447.562 .77002 cv
cp
.75021 .679683 .670222 .90164 cmyk
@
416.5 .598022 mo
422.301 .598022 427 5.29706 427 11.098 cv
427 16.895 422.301 21.598 416.5 21.598 cv
410.699 21.598 406 16.895 406 11.098 cv
406 5.29706 410.699 .598022 416.5 .598022 cv
cp
0 .00579843 .00103761 0 cmyk
f
416.5 .598022 mo
422.301 .598022 427 5.29706 427 11.098 cv
427 16.895 422.301 21.598 416.5 21.598 cv
410.699 21.598 406 16.895 406 11.098 cv
406 5.29706 410.699 .598022 416.5 .598022 cv
cp
.75021 .679683 .670222 .90164 cmyk
@
386 .598022 mo
391.801 .598022 396.5 5.29706 396.5 11.098 cv
396.5 16.895 391.801 21.598 386 21.598 cv
380.199 21.598 375.5 16.895 375.5 11.098 cv
375.5 5.29706 380.199 .598022 386 .598022 cv
cp
0 .00579843 .00103761 0 cmyk
f
386 .598022 mo
391.801 .598022 396.5 5.29706 396.5 11.098 cv
396.5 16.895 391.801 21.598 386 21.598 cv
380.199 21.598 375.5 16.895 375.5 11.098 cv
375.5 5.29706 380.199 .598022 386 .598022 cv
cp
.75021 .679683 .670222 .90164 cmyk
@
234.262 .797058 mo
240.062 .797058 244.762 5.49603 244.762 11.2971 cv
244.762 17.0941 240.062 21.7971 234.262 21.7971 cv
228.465 21.7971 223.762 17.0941 223.762 11.2971 cv
223.762 5.49603 228.465 .797058 234.262 .797058 cv
cp
0 .00579843 .00103761 0 cmyk
f
234.262 .797058 mo
240.062 .797058 244.762 5.49603 244.762 11.2971 cv
244.762 17.0941 240.062 21.7971 234.262 21.7971 cv
228.465 21.7971 223.762 17.0941 223.762 11.2971 cv
223.762 5.49603 228.465 .797058 234.262 .797058 cv
cp
.75021 .679683 .670222 .90164 cmyk
@
%ADOBeginSubsetFont: LWYAAA+TimesNewRomanPSMT Initial
ct_T42Dict begin
-0.566 -0.305 2 1.004
 256 array 0 1 255 {1 index exch /.notdef put} for  /LWYAAA+TimesNewRomanPSMT
Type42DictBegin
[<00010000000a000a000a000a63767420fe30def0000000ac000007da6670
676dc3a61d010000088800000631676c7966d852322400001ecc00000c90
68656164db396bb800000ebc000000366868656112ef092e00000ef40000
0024686d7478271003cb00000f18000000246c6f6361000042f000000f3c
000000286d61787006dd06ad00000f64000000207072657039e6c80d0000
0f8400000f4567646972000000000000000000000000058e0000054c001f
054c001c0394001b0000ffe10000ffe40000ffe8fe4afffc056b0023fe6a
ffe00313000000ad000000ad0000000000250096009f002400f0013100c2
00c0004a00a6004100500094004700cf00af000e007901cb000400230044
00a80025011f0002004600170105009900d9005c007200e500e00028004b
00de011200240045007000160039ffe90016004b0088ffb900d9000a0043
00ae00ba016c0153002f00430048022c012b0025008fffc000170028ffcd
ffd80025009d00e50124ffb10048009d00e600110027007f00910012006a
00cafffc00000024006200a7017c01e900210060008b0434048aff6b003b
00b500d5014bff6b004d007905d809b5006c009100a3011701c0ffdfffe7
00be04010065007f00820088009900b200c0022e034305a000200026003d
004e00610065007b00d9011301310340ff27ff42ff99004e00a700f2022b
02c603070011002b0049005f008d00a100af00d600e400f5010b0135019d
01ab01ab01d101ee05d80000004b0075007a0080009d00a600a700ac00b9
013101310217021700020017002900550080008f00a500b200b300d0014b
015901c001c103a50530fe3fff14ff15ffe7ffff002a00580099009f00c1
00e400f40130015901ab01ab03220374041e04740532fd81004d0064009c
00d000d100d600de00e500f500f8012a012a01e1027e027fff57ffa8ffe5
00000008001f00380051005a006f0076007700a200c000c200c400f101fb
0209027e02cf04c5057a05f0ff92001200260042004b004f005100530064
008b00ae00b200b800b800d600f50111012001310138014e01520167018f
019601b801d901d902060221027102ea03b003cb03dc04360505ff3a0012
0016001e001f002300570068006c007e0088009200a500a800c500c90115
0126012d013001d601d901f6023b0244024402a302cf02de0385038f04fc
0586fee0feebfefbff8a0007004400470058007500aa00e400ef01160120
0129016a017301e3027e029002b4030e0310032303350341035403590388
039403c803ce047204ab04da0549056105ab0761fe6efed1ff4bff840000
00010006001e0027002c0034003700620066006a006b006c007000700072
007c0081008a008e0091009200a000ab00b800bf00c900d500dd00ec00f4
0100012101300169016a016d017c0185018e018e019901ac01c101c501c9
01e101f601f601f60222022202280236023f024302460267028502850294
02d002d602e8031c0363037f03800380039e03b603d90400040404ff0532
05320548058b05a706cb07280748076208ccfcedfd2afd59fddefe00fe1a
fe5bfe96fec1fee7ff56ff7900010025002d002e007c00870091009900a1
00a500a500aa00af00b600c600cc00d700dd00ec00f20102010501170118
0123012a012c0131013f014701490149014d01510151015501550157015a
015a0161016201680168017f0180018201830184018d0195019501950198
019901a501a901b601b601b701ba01ba01d501df01e601ea01f202000200
0203021702250227022f0239024302430247024f025202520267026f026f
027002720276027e02a702b302b902d603130325032d03610371039903ae
03c203d403f90402042c042f043c04560467048304cf04d104d804fb051f
05450568059e05c2061b06340655066a069806af06e806fc070607500762
077c07d407ff082500ad00c700aa00b5000000000000000000000000002f
06cf01730514047802df009c0018037005870155002500060254036c038e
03d2056601f0032001da018a0369036bffa3034602f8036f015602bf0122
031f053a0366008c00ff01ab02e102f402e70415015402e90128049101b7
026f034302060000000005d30415048305e8000002d7003a027d01c002c5
03830383ffbd003a059e01df059e02d1002004e0021300df01c001870297
000000ce0269028b0058043405fb0069015a01a905780182013e0288012a
03d4049e00e5032302f301f00196007a00cd014a0424025e023901ab00cf
00fd011e00ed017100700195004001bb01dd01b8000101a803a7014c020c
018d01b0020d0137010000cd032101d4030a005900000000012602150150
02f0025503bc06d00335010100d000d2007a01030130007c000000000000
000000fe006e006600940227002b0045004d00d3013200180097004100f4
febcffe9001605d8058b009100a1032c00520030005d02cb003a009200e5
00e500580086003200ba0099008800300298007cff8001640028004d0065
000200b8016a002f010b001100170100007f00040016022200a6005f0000
00f8000a00ca0043004b01ee0077012000f401c00028045f0000008c0445
00c20060007b008b008b0064005d00c2009c009206b505d3004f01170000
0420fe9e00cc00dc005e004600e30032001a003c0091005a00a1042c0041
002000490071009c009cfe4800400040008600cb0102007d003a003e006a
0050044800290096ff6a0097006900e0004c001b00c90069ff970043ffbd
0052ff83ff8b005fffa1ff5c00670053ffa8002a0076ffb2003600870559
0256052b043400de00c901c4004800db018b00b3004800da011601250118
00ea00ea00ae0000003e05bb008a04d70053003fff8cffd5001500280022
00990062004a00e4006d00ee00e5004803c00033fe4e02b1ff4603700079
05df0051ffa7ff1f010a0068ff6c004f00bc00a5070500ab0080001e05a5
0025008b04660230006900290016012f0080005c059f000040425554403f
3e3d3c3b3a393837363534333231302f2e2d2c2b2a292827262524232221
201f1e1d1c1b1a1918171614131211100f0e0d0c0b0a0908070605040302
01002c4523466020b02660b004262348482d2c452346236120b02661b004
262348482d2c45234660b0206120b04660b004262348482d2c4523462361
b0206020b02661b02061b004262348482d2c45234660b0406120b06660b0
04262348482d2c4523462361b0406020b02661b04061b004262348482d2c
0110203c003c2d2c20452320b0cd442320b8015a51582320b08d44235920
b0ed51582320b04d44235920b09051582320b00d44235921212d2c202045
18684420b001602045b04676688a4560442d2c01b10b0a432343650a2d2c
00b10a0b4323430b2d2c00b0172370b101173e01b0172370b10217453ab1
0200080d2d2c45b01a234445b01923442d2c2045b00325456164b0505158
45441b2121592d2cb00143632362b0002342b00f2b2d2c2045b000436044
2d2c01b00643b00743650a2d2c2069b04061b0008b20b12cc08a8cb81000
62602b0c642364615c58b00361592d2c45b0112bb0172344b0177ae4182d
2c45b0112bb01723442d2cb01243588745b0112bb0172344b0177ae41b03
8a45186920b01723448a8a8720b0a05158b0112bb0172344b0177ae41b21
b0177ae45959182d2cb0022546608a46b040618c482d2c4b53205c58b002
855958b00185592d2c20b0032545b019234445b01a23444565234520b003
25606a20b009234223688a6a606120b01a8ab000527921b21a1a40b9ffe0
001a45208a54582321b03f1b235961441cb114008a5279b3194020194520
8a54582321b03f1b235961442d2cb110114323430b2d2cb10e0f4323430b
2d2cb10c0d4323430b2d2cb10c0d432343650b2d2cb10e0f432343650b2d
2cb11011432343650b2d2c4b525845441b2121592d2c0120b003252349b0
4060b0206320b000525823b002253823b002256538008a63381b21212121
2159012d2c4bb06451584569b00943608a103a1b212110592d2c01b00525
1023208af500b0016023edec2d2c01b005251023208af500b0016123edec
2d2c01b0062510f500edec2d2c20b001600110203c003c2d2c20b0016101
10203c003c2d2cb02b2bb02a2a2d2c00b00743b006430b2d2c3eb02a2a2d
2c352d2c76b802b023701020b802b04520b0005058b00161593a2f182d2c
21210c6423648bb84000622d2c21b08051580c6423648bb82000621bb200
402f2b59b002602d2c21b0c051580c6423648bb81555621bb200802f2b59
b002602d2c0c6423648bb84000626023212d2cb4000100000015b00826b0
0826b00826b008260f10161345683ab001162d2cb4000100000015b00826
b00826b00826b008260f1016134568653ab001162d2c4b53234b515a5820
458a60441b2121592d2c4b545820458a60441b2121592d2c4b53234b515a
58381b2121592d2c4b5458381b2121592d2c014b53234b515ab00225b004
25b006254923451869525a58b00225b00225b00525462345696048592121
212d2cb0134358031b02592d2cb0134358021b03592d2c4b54b012435c5a
58381b2121592d2cb012435c580cb00425b00425060c6423646164b80708
5158b00425b00425012046b01060482046b0106048590a21211b2121592d
2cb012435c580cb00425b00425060c6423646164b807085158b00425b004
25012046b8fff060482046b8fff06048590a21211b2121592d2c4b53234b
515a58b03a2b1b2121592d2c4b53234b515a58b03b2b1b2121592d2c4b53
234b515ab012435c5a58381b2121592d2c0c8a034b54b00426024b545a8a
8a0ab012435c5a58381b2121592d2c462346608a8a462320468a608a61b8
ff8062232010238ab9035803588a70456020b0005058b00161b8ffba8b1b
b0468c59b0106068013a2d2cb1020042b123018851b1400188535a58b910
000020885458b202010243604259b12401885158b920000040885458b202
0202436042b12401885458b2022002436042004b014b5258b20208024360
42591bb940000080885458b202040243604259b94000008063b801008854
58b202080243604259b94000010063b80200885458b202100243604259b9
4000020063b80400885458b202400243604259595959592d2cb002435458
4b53234b515a58381b2121591b21212121592d0000000001000000050ccd
b8bf260d5f0f3cf50819080000000000a2e31dc200000000c5b1f690fb74
fd8c1000080e000000090001000100000000000100000721fe4500571000
fb74fadf10000001000000000000000000000000000000090639011c0473
0080040000620400002004000053040000f00400002c03e1001904830025
0000000000000078000003740000050000000614000007f4000008d80000
0aa800000bec00000c9000010000000900f2003c009d000700020010002f
00560000062504eb00050002b9005403ecb3032a1f3f411503e4006003e9
009f03e500df03e50004001003e4001003e5003f03e5007003e400ff03e4
0005ffc003e1b345453240b803e1b32b2e3240b803e1b2282932b9ffc003
e1b21a1c32bd03e102ac0027001fffc003dfb2161b32b9ffc003deb24242
32b9ffc003deb2363832b9ffc003deb32a2d32df410a03de00ef03de0002
03de03df0028001fffc003dfb3282e32f0410d03df0001037e000f010100
1f00a003dd00b003dd0002004003dab32426329fbf03cc000103ca03c900
64001fffc003c9b20d1132410a03c703b70012001f03b603b50064001fff
c003b5b30e1132004173038d000100c0038d00d0038d00e0038d00f0038d
0004006f03a7007f03a7008f03a700af03a70004000f03a7001f03a7002f
03a7004f03a7000403ab03ab00ef03a50001000f03a5002f03a5006f03a5
008f03a50004005403aa0001006b03aa000103a8036a0022001f038c0394
0015001f038b03930015001f03a40393001a001f03a20394001e001f03a1
0393001e001f039f0394001e001f039b0394001a001f039a0393001e001f
039903940016001f039803940016001f03970393001b001f03960394001b
001f03950393001b001f03760375001a001f03740375001a001f03a00373
b21e1f10411e039300200393003003930003002003940030039400400394
00030000039400010383036c001e001f03b1036c0032001f036d036c0032
001fffc0037db2212332b9ffc0037db3171932a0410a037d00b0037d00c0
037d00d0037d0004ffc0037cb2212332b9ffc0037cb3171932a0412d037c
00b0037c00c0037c00d0037c000400300373004003730002000003730010
037300200373000300e0037300f00373000200b0037300c0037300d00373
0003008403730090037300a0037300030377036a0029001f0389036ab228
1f40b80367b33940323fbb0366000100400366b3191d328fbb0366000100
400366b3090a3240b80366b3090e3240b80366b3090f323fbb0365000100
400365b3090c3240b80365b31a1d3240b80365b3090e326b410e0363007b
036300020014036300240363003403630044036300040363b2242f1fba03
4e006d0800400e1f7f027f037f047f050430440112bf033200500800001f
0012032d003c080040291f5f3c0137600970098009031009200930094009
5009056f037f038f03031f032f033f034f035f0305b8ffc0b2073a33b8ff
c04047063a33900ba00bb00bc00bd00b05b006c006d006e006f006052006
3006400650066006700680069006a006099006900702600b700b800b0310
0b200b300b400b500b051f0701a041850362000100000362001003620070
036200900362000400f0035f00010020035e0020035f0030035f0040035e
00040000035e0000035f0010035f00d0035e00e0035f00050010030f0020
030f0030030f00d0030f00e0030f00050000030f0010030f0050030f0060
030f0070030f00d0030f00060000030f0010030f0020030f0030030f00e0
030f00f0030f0006030f00270000030e0030030e000200e0030e00f0030e
0002030e004a00e0030d00f0030d0002030d002700d002fc0001001002fc
002002fc005002fc000300d002fc00e002fc0002000002fc001002fc0020
02fc003002fc005002fc006002fc000600e002fc00f002fc0002002002fc
003002fc004002fc000302fc406127c02901b02901a02901902901403c3f
413240223f41321212125f235f255f285fa5046f236f256f286fa5044f23
4f254f284fa5043f233f253f283fa5042f232f252f282fa5041f231f251f
281fa5048f4caf4cbf4ccf4c045f4c6f4c7f4c0337b8ffc0b3b22b3032b8
ffc0b3b2222532b8ffc0b5b2191a32370f413b02af0001005f02af009f02
af00df02af0003001f02af002f02af003f02af006f02af000402af02af00
1f02ad002f02ad003f02ad004f02ad005f02ad000500df02ad0001000f02
ad001f02ad003f02ad005f02ad009f02ad0005005f02ad00df02ad000200
0f02ad001f02ad003f02ad0003004002acb23a334f414a02ac005f02ac00
9f02ac0003002f02ac003f02ac0002000f02ac003f02ac00af02ac000300
b002ac00e002ac0002004f02ac005f02ac00a002ac0003001f02ac002f02
ac003f02ac0003000f035a0001000f035a001f035a003f035a005f035a00
70035a000500cf035700df03570002000f0357001f03570070035700af03
570004035a035a0357035702ad02ad02ac02ac032c400d31151f00161600
0000121108104110020c004a000d01a8004a000d0198004a000d0189004a
000d013f004a000d0124400e4a0df64a0dbe4a0d864a0d274a0dbe022800
41000d01940041000d0121400b410db4410d4f410d29410d411002170021
000d02150021000d02060021000d01eb0021000d014e0021000d012c4014
210df9210df3210df1210d9d210d71210d3d210d4110021c001f000d0214
001f000d020b001f000d0196001f000d014a001f000d0126400b1f0dc61f
0d571f0d371f0d410d019e0141000d00420141000d001e0141000d001b01
41000d01f2b40f440f0009bb01f20044000d0201b23c291fb80200b23c29
1fb801ffb23c411fb801feb23c471fb801fdb23c9e1fb801fab23c931fbc
01f9010f0101001f01f6b224e41f411501f401490401001f01f301490401
001f01f1014900ab001f01f001490067001f01a6003c0125001f01a4b23c
811f411501a3010f019a001f01a200220801001f01a100500401001f019f
0149019a001f019d01490067001f019cb22c621fb8019bb22c791fbc019a
002c0101001f0197b22ce41fb80193b22c891fb80192b22c6c1fb8018fb2
259e1fb8016ab23c2a1f4111016700240201001f0163002502ab001f014c
010f019a001f01480149006c001f0147b22c891fb80145b22c9e1fb80144
b22c791fb80143b223311fb80127b23c811fbc012300500101001f011fb2
23e41f4115011d0023019a001f011c00230801001f011b00250801001f01
0e010f0401001f010d00220401001f0108b223811fb80106b425e41ff73c
bb0125001f00f5010fb29e1fe3bc01490156001f00e20149b2ab1fd1b901
490401b21fcf2cb80125b61fce23bb1fc524b80156b21fc02cb80801b21f
bf2cb80201b51fb124e41fb0b901490201b61faf2c671fad23b80801b21f
a523b80201400b1f9f3c2d1f9b235a1f9925b80201b21f812cbc0401001f
006d010f0156400b1f592c3e1f4c3cab1f4625b80101b21f403cb8012540
0a1f3a23721f393cab1f38b80149b3ab1f3124b80401b21f3025b802abb6
1f2a24e41f2623b80156b21f5537ba023500070175402c07740762075607
51073b0733072d0720071d071c071408120810080e080c080a0808080608
04080208000814b8ffe0402b000001001406100000010006040000010004
10000001001002000001000200000001000002010802004a00b013034b02
4b534201b0124b004b5442b0372b4bb807ff52b0382b4bb008505b58b101
018e59b0382bb00288b801005458b801ffb101018e851bb0124358b90001
012f858d1bb90001017c858d5959014bb0c063004b6220b0f65323b8010a
515ab0052342180016763f183f123e113946443e113946443e113946443e
113946443e11394660443e11394660442b2b2b2b2b2b2b2b2b2b2b182b2b
2b2b2b2b2b2b2b2b2b2b2b181db0964b5358b0aa1d59b0324b5358b0ff1d
594bb04753205c58b90271026f4544b90270026f45445958b9017a027145
5258b90271017a4459594bb04753205c58b9002202704544b9003c027045
445958b901b30022455258b9002201b34459594bb04c53205c58b9014900
224544b1222245445958b901c20149455258b9014901c24459594bb06753
205c58b9002402714544b90050027145445958b9021e0024455258b90024
021e4459594bb8020153205c58b9010f00224544b1222245445958b90c00
010f455258b9010f0c004459594bb01c53205c58b125254544b12c254544
5958b13725455258b125374459594bb0ab53205c58b125254544b1232545
445958b901590025455258b9002501594459594bb8010153205c58b12525
4544b1282545445958b902080025455258b9002502084459592b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b65422b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b01b361
dc6463456523456023456560234560b08b766818b080622020b164dc4565
234520b003266062636820b003266165b0dc236544b064234420b1616345
65234520b003266062636820b003266165b063236544b0612344b1006345
5458b163406544b26140614523614459b3a67f434b456523456023456560
234560b089766818b080622020b1437f4565234520b003266062636820b0
03266165b07f236544b043234420b1a64b4565234520b003266062636820
b003266165b04b236544b0a62344b1004b455458b14b406544b2a640a645
236144594b5242014b5058b108004259435c58b108004259b3020b0a1243
58601b2159421610703eb0124358b93b21187e1bba040001a8000b2b59b0
0c2342b00d2342b0124358b92d412d411bba04000400000b2b59b00e2342
b00f2342b0124358b9187e3b211bba01a80400000b2b59b0102342b01123
42002b0018456944456944456944456944737373747373737475752b7373
747475184569447373742b4bb021534bb046515a58b03cb03c45b0406044
59012b2b2b2b757575757575757543584010bf3ccf3c026f3c7f3c8f3c9f
3caf3c0575755943584012bf22cf22025f226f227f228f229f22af220675
7559435c58b6403c9f22ef220375592b2b01747474744544737374747575
454473454473744544737475737373737300757575737575752b2b757575
752b752b435841220063032d00010003032d0013032d0023032d0033032d
0053032d000500c3032d00d3032d00e3032d00f3032d00040083032d0093
032d00a3032d00b3032d0004032d032d4518694474747575592b4358b900
180332b330353238b80332b361663238b80332b3535a3238b80332b3454e
3238b80332b33c413218b80332b23f330a410f0332000100ba033200ca03
3200da033200ea033200fa03320005033203324518694474752b2b2b2b2b
2b597300732b012b7575002b2b2b74002b2b2b732b74012b002b2b017373
737474732b2b00732b2b002b2b2b017374732b012b2b012b2b2b2b2b2b2b
2b2b2b2b2b2b2b00017375007373004569440073730173742b2b2b2b2b73
2b00732b752b2b732b2b2b2b2b2b2b2b2b73742b2b00000000>
[3217 ] AllocGlyphStorage
]def 
108 44 
PrepFor2015
Type42DictEnd
1 120 1 <00010080ffe10405056b00380257401912952c010f010f020b03000f0428
0029052b4f014f0209113ab8014640d03638361a031b045f185f195f1a5f
1b06050d050e002ac03a04740b740d740e760f701e701f702f7030890886
0b870d870e840f872ba804a83310120d330d340d351d331d341d352f012f
022d04201e201f29292d333e013e023f043019301e301f30213d343d3548
0d482a540b560d57105629562b1d1f011f021b331f351b3654185419541a
59325c335c345c355c365a370e030b0b29130b1b29230b203a3b29303a72
12721389249807982f9930a82fc028c12ac62bc03af03a144e08381b006f
021baf01cf0102017f010101ba00b8034b400d359a311c1b1d6f1f1b1e1e
ba1db8034b4034199a142a2b2b3c0c0e140c0c0e2b0c2a0e0426092b0c2a
0e04062301fd0000062831032328140902ac01401e223401011f260126b8
012340102f11bf1102df11012011af11df110311b80287b71fac1e2b1009
0109b80123401f9f2e01bf2eef2eff2e032e404735402ecf2eef2e03002e
202e302ec02e042ebc014600390146011800182b4e10f45d5d2b71724ded
72f4edfd5d7172fd72392f2bed003fed3fed3c10ed111217390111121739
870e2e2b0e7d10c4180010ecf4ed0110edf4ed0010ecf4ed5d011071edf4
ed3130437940362430071328260b2c093300290f26330124132633010730
0933000a2d0c33000b0c2c2b27102a33010f0e292a2512233300082f0633
01002b2b103c103c2b103c103c2b012b2b2b2b2b8181015d00725d435840
09630b660d6710632b045d595d0171722b0071005d435c58400c0b180f39
04300f3933300f39002b2b2b590111232e0223220615141716171e021514
062322272626232206072311331e02333236353426272624262635343633
3217163332363703ab25125dac5c68882b3ee9be8b4befbc3b341fc31a19
1d0725251a58b56c7d91373a27fea4934ce0ad6c7938171a210a056bfe2b
87a05e7f513e334b7d666d94519adf09053f1e2f01d1929160845a32662c
1ec3748c5492d335191f2f000000>LWYAAA+TimesNewRomanPSMT AddT42Char 
1 884 2 <00010062ffe80379054c0021011e4043a4040112591e691e7f057f067f1d
8c048d1d07350235215503552057216b1c7605791c87028a1a8a1ca303a8
09a023e0230f0023010f1011121315161708140d020303b8011c40112021
1420030420211a1b1c030718040503b8019fb320202113ba01f900180313
400c0d0d01e20002e22121000400ba013e001b0147b58007a0070207b801
f5400a40230140236023022316b801f9b61002a021012103b8019f400920
4010a01002101922ba019501e900182b4e10e45d4d10ed105d3c10ed105d
71f65dede4003f3c10ed10ed3feded12392fed0111391112173987082e2b
057d10c40011121739b10602435458400d72017202722082018202822006
005d59313001715d005d435c58400b6b046f12641e7005701d055d59015d
010721070417161514060607062322263534363332161716333236353426
2726270103794efe685901099b8557845173797a6f2e231a272f4b4d75b1
9e8b6dbc0104054caab6279e88b86bb680273753321c2b102134b17f7bd5
3a2d07020f00>LWYAAA+TimesNewRomanPSMT AddT42Char 
1 1280 3 <00020020000003b90568000a000d00d74028160d010f00450d400f03400f
012a0c011507010206010309050601040c0b0d00040c0d04060c0d0db801
1c401207081407070808030407060c08001f0d010dbb019c0006000b019f
400d050106090806060805040c0c04bb0149000300080166400b09090f03
019f03af030203b801f74018013f0001001a000f01600fa00fe00f030f06
40070107190eba018e010100182b4e10f4713c105d71f65d3c4df45d713c
10e610fd3c003f3f392f103c103c10ed10fd723c1139113901111239872e
2b047d10c4011112390f0f0f313000725d015d7172011523112311213501
331123110103b9b6a5fdc202756ea5fe2401f48efe9a0166800382fc8c02
a1fd5f000000>LWYAAA+TimesNewRomanPSMT AddT42Char 
1 1556 4 <00010053ffe8035605680032014cb9000affe0b20c3909b8ffc0403c0c39
4109450a460b4b2204cf09012929382940346034cf34e034f70a07003401
41097f237a2eaa24b924ba2ec92edf23df25db2eea22e9250c490829b801
8cb328281000b802e4b3d0300130b80334b5030510160116b8019fb51d40
2b2f341db80143b3100d2928bb01680014000902e3400b50208020029020
a0200220b80333b3b00c010cb80190400b502d802d02902da02d022db803
33b55f077f070207b802e5400a403401a034c034023400b8013eb74013bf
1302131933ba011e01e800182b4e10f45d4de4105d71f65ded5d71f45ded
5d71e410f43c003fed2bed723fed5ded12392fed3130437940362e2f1e26
0a0f04062221232124212521040605250e26260a2062012f042d62011e0f
206201210b2762010a092e063062011f0d1d62002b2b103c2b012b2b2b2b
2b2a81818181005d01715d7200712b2b1336363332171615140716161514
070621222635343633321716161716333236353427262726262323353e02
353426232207683ab184a35742ba7d807092feeb89632f21191a11781725
2a6697231a1f2b964e204f9f4881609b68044a89956a4f5a949e31b67bb0
81a844271d2c08053f060b9e6c4f4b381d28411e0a5e844f677fa6000000
>LWYAAA+TimesNewRomanPSMT AddT42Char 
1 2036 5 <000100f000000306056800160097401440186018a018e018040018401802
76008600020e411301690141000901a00022000301690141000801a00023
000001f8000f016900160141000001f2400e010f0f020902010509080c02
0300ba01f70003014940120e0e0f401135300f7f0f900fa00f040f1917ba
022401e400182b4e10f45d2b3c4d10ede4103c003f3c3f3c111239011139
00f5edfc01f52b2b3130005d01715d13253311141616171521353e023511
34272626232207f0014a21133c5cfe026038160a07251a254204c7a1fb87
72381e022525021d317a02dc942a201e1f00>LWYAAA+TimesNewRomanPSMT AddT42Char 
1 2264 6 <0001002c000003ab0568001e0168408207180b3917181c3d3418401c3d34
19401c3d340f1e161629073c074907a9070640205b045a085b175a186b08
741174129c0b9d0e9911ac0bac0ec905c917c818d917d918e020f904f917
1515011d0419051b15191619171d180709170b180b1d3419471989178f20
0718190202171a190c19060d031902050618171615140713040db8016840
090940140c3f80090109b80333400c10051a8f19019f19af190219ba0333
0003018db301020c1eb8018d400d0006e24f135f136f137f130413b80107
4013400001001a002040208020036020a020022019bb01f90003000d0140
40145f026f027f028f02bf02cf02df02ef020802191fba018e010100182b
4e10f45d4de43ced4e105d71f65d4df45ded10ed003f3cedfd5d713c3ffd
71b10602435458b78f0901bf09cf0902005d71592be41112173911123901
111239390210b10602435458b47d198d1902005d590e3c8710057dc40ec4
31300171725d005d012b2b2b002b01032135000035342623220607233636
33321615140706070207213236363703ab5ffce0016101209e6e649f2625
19cf9ba5dd304aa6f93e01626c57461a0105fefb2501420198a981a67571
b9c6d4906767a2b5fef03810312d>LWYAAA+TimesNewRomanPSMT AddT42Char 
1 2728 7 <00010019fff203eb058b001e00da401a380b680bc80b036503690d750303
0f204f20550303070b1a1919b8fff0403d08140655193008071408080708
09080709100d0d065509240a0b140a0a0b1100120112120eaf1501000001
1001200130010401011d1d04090a0a002f01b802f240091a2f07e108112f
4012ba01af000b011b40090820098b40300a010ab802bb400f2000084008
029f08f008020808201f191112392f5d711afd5d1a18ed1a1910fd18f41a
ed1910f418edfded003f3c2f332f332f5d3c3fed332f5d3c87052e2b2b08
7d10c4870e2e182b2b0e7d10c4002e2e3130015d5d5d0133140623222627
030123012626232206072336363332161613131616333203c724674d3f74
2e56fed6bd01ac226047395505240370543661474b472b5f427001209e90
5fcf0184fd5c039ab3ac575b93b159d7feaefec3c5850000>LWYAAA+TimesNewRomanPSMT AddT42Char 
1 3052 8 <0002002501db045c037300030007007cb10607b80327b6054f045f040204
be034c00020003032700010000ff80403b3a35000080000250008000a000
d000e0000500060605050202100101d0010130014001a001030001100120
0103015c090704040303005c08585e182b10f63c103c103c10f65d5d7172
3c103c103c003f5d712b3cfd3cf65d3cfd3c313013211521152115212504
37fbc90437fbc9037352f4520000>LWYAAA+TimesNewRomanPSMT AddT42Char 
1 0 0 <0002011c0000051c050000030007004db10201bb02be0006000702bfb200
0504b802beb403000a0704b802beb5010019080605bf02be000200030129
0009016b015e00182b10f63cfd3c4e10f43c4dfd3c003f3cfd3c10fc3cfd
3c31302111211125211121011c0400fc2003c0fc400500fb002004c00000
>LWYAAA+TimesNewRomanPSMT AddT42Char 
LWYAAA+TimesNewRomanPSMT /CharStrings get begin
/g1 1 def
/g2 2 def
/g3 3 def
/g4 4 def
/g5 5 def
/g6 6 def
/g7 7 def
/g8 8 def
end
LWYAAA+TimesNewRomanPSMT /Encoding get
dup 1 /g1 put
dup 2 /g2 put
dup 3 /g3 put
dup 4 /g4 put
dup 5 /g5 put
dup 6 /g6 put
dup 7 /g7 put
dup 8 /g8 put
pop
end
%ADOEndSubsetFont
/NSDPPA+TimesNewRomanPSMT /LWYAAA+TimesNewRomanPSMT findfont ct_VMDictPut/NSDPPA+TimesNewRomanPSMT*1 [/.notdef /g1 /g2 /g3 /g4 /g5 /g6 /g7 /g8 247{/.notdef}rp]NSDPPA+TimesNewRomanPSMT nfNSDPPA+TimesNewRomanPSMT*1 [0 -14.4 -14.4 0 0 0 ]msf78.3813 17.6524 mo(\001)shNSDPPA+TimesNewRomanPSMT*1 [0 -9.36013 -9.36013 0 0 0 ]msf81.2613 9.63678 mo(\002)shNSDPPA+TimesNewRomanPSMT*1 [0 -14.4 -14.4 0 0 0 ]msf237.699 17.9316 mo(\001)shNSDPPA+TimesNewRomanPSMT*1 [0 -9.36013 -9.36013 0 0 0 ]msf240.579 9.91602 mo(\003)shNSDPPA+TimesNewRomanPSMT*1 [0 -14.4 -14.4 0 0 0 ]msf389.381 17.5054 mo(\001)shNSDPPA+TimesNewRomanPSMT*1 [0 -9.36013 -9.36013 0 0 0 ]msf392.261 9.48975 mo(\004)shNSDPPA+TimesNewRomanPSMT*1 [0 -14.4 -14.4 0 0 0 ]msf451 17.496 mo(\001)shNSDPPA+TimesNewRomanPSMT*1 [0 -9.36013 -9.36013 0 0 0 ]msf453.88 9.48041 mo(\005)shNSDPPA+TimesNewRomanPSMT*1 [0 -14.4 -14.4 0 0 0 ]msf419.936 17.6996 mo(\001)shNSDPPA+TimesNewRomanPSMT*1 [0 -9.36013 -9.36013 0 0 0 ]msf422.816 9.68402 mo(\006)shNSDPPA+TimesNewRomanPSMT*1 [0 -16 -16 0 0 0 ]msf13.1288 82.3257 mo(\007\010\005)[-7.7439 -9.00806 0 ]yshgrestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
/NSDPPA+TimesNewRomanPSMT*1 uf/NSDPPA+TimesNewRomanPSMT uf/LWYAAA+TimesNewRomanPSMT ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
