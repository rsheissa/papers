%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: x2lambda.pdf
%%Creator: Adobe Acrobat 9.4.2
%%For: rsheissa
%%CreationDate: 3/22/11, 6:57 PM
%%BoundingBox: 0 0 568 633
%%HiResBoundingBox: 0 0 568 632.2480
%%CropBox: 0 0 568 632.2480
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors: (atend)
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$None SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 537 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.1-c043 52.372728, 2009/01/18-15:56:37        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreatorTool="cairo 1.10.2 (http://cairographics.org)"
   pdf:Producer="cairo 1.10.2 (http://cairographics.org)"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -632.248 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 632.248 li
568 632.248 li
568 0 li
cp
clp
[1 0 0 1 0 0 ]ct
gsave
0 0 mo
568 0 li
568 632 li
0 632 li
cp
clp
568 632.246 mo
568 77.246 li
13 77.246 li
13 632.246 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
f
grestore
1.3875 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
505.562 96.004 mo
25.496 96.004 li
false sop
0 .980407 1 .000335698 cmyk
@
2.775 lw
498.094 544.949 mo
498.008 528.223 li
497.867 511.613 li
497.672 495.199 li
497.422 479.039 li
497.125 463.191 li
496.781 447.699 li
496.398 432.598 li
495.973 417.906 li
495.516 403.641 li
495.023 389.809 li
494.504 376.414 li
493.957 363.453 li
493.383 350.918 li
492.789 338.801 li
492.176 327.094 li
491.547 315.785 li
490.898 304.867 li
490.234 294.328 li
489.555 284.152 li
488.863 274.336 li
488.18 265.105 li
487.484 256.188 li
486.781 247.578 li
486.066 239.27 li
485.344 231.254 li
484.609 223.527 li
483.871 216.082 li
483.125 208.914 li
482.371 202.016 li
481.613 195.383 li
480.852 189.008 li
480.078 182.887 li
479.305 177.016 li
478.523 171.395 li
477.738 166.008 li
476.953 160.859 li
476.16 155.945 li
475.363 151.258 li
474.566 146.793 li
473.762 142.547 li
472.957 138.52 li
472.148 134.703 li
471.34 131.094 li
470.527 127.688 li
469.711 124.48 li
468.895 121.473 li
468.074 118.652 li
467.254 116.02 li
466.434 113.574 li
465.609 111.305 li
464.785 109.211 li
463.957 107.289 li
463.129 105.535 li
462.301 103.941 li
461.473 102.512 li
460.641 101.23 li
459.812 100.105 li
458.98 99.121 li
458.148 98.285 li
457.316 97.582 li
456.48 97.0161 li
455.648 96.578 li
454.816 96.2661 li
453.98 96.078 li
453.148 96.004 li
452.312 96.047 li
451.48 96.195 li
450.645 96.453 li
449.812 96.812 li
448.977 97.27 li
448.141 97.824 li
447.309 98.4691 li
446.473 99.199 li
445.641 100.016 li
444.805 100.91 li
443.969 101.883 li
443.137 102.93 li
442.301 104.047 li
441.469 105.23 li
440.633 106.48 li
439.797 107.789 li
438.965 109.16 li
438.129 110.586 li
437.297 112.062 li
436.461 113.59 li
435.629 115.164 li
434.793 116.785 li
433.961 118.449 li
433.125 120.148 li
432.289 121.891 li
431.457 123.664 li
430.621 125.473 li
429.785 127.309 li
428.953 129.176 li
428.117 131.066 li
427.281 132.984 li
426.445 134.926 li
425.613 136.883 li
424.777 138.863 li
423.941 140.855 li
423.105 142.867 li
422.27 144.891 li
421.434 146.922 li
420.598 148.965 li
419.758 151.02 li
418.922 153.078 li
418.082 155.141 li
417.246 157.207 li
415.566 161.348 li
414.73 163.414 li
413.891 165.48 li
413.047 167.543 li
412.207 169.602 li
411.363 171.652 li
410.523 173.695 li
409.68 175.734 li
408.836 177.758 li
407.992 179.773 li
407.145 181.777 li
406.301 183.766 li
405.453 185.742 li
404.605 187.699 li
403.754 189.645 li
402.902 191.57 li
402.055 193.477 li
401.199 195.363 li
400.348 197.23 li
399.492 199.078 li
398.637 200.902 li
397.777 202.699 li
396.918 204.477 li
396.055 206.227 li
395.188 207.949 li
394.32 209.648 li
393.453 211.316 li
392.582 212.957 li
391.707 214.57 li
390.828 216.152 li
389.949 217.699 li
389.062 219.219 li
388.172 220.703 li
387.281 222.152 li
386.379 223.57 li
385.473 224.949 li
384.559 226.293 li
383.641 227.598 li
382.711 228.863 li
381.77 230.086 li
380.816 231.27 li
379.852 232.402 li
378.871 233.492 li
377.871 234.527 li
376.848 235.504 li
375.801 236.418 li
374.73 237.262 li
373.637 238.023 li
372.516 238.691 li
371.371 239.25 li
370.223 239.691 li
369.074 240.016 li
367.934 240.215 li
366.816 240.305 li
365.723 240.289 li
364.652 240.184 li
363.602 239.996 li
362.574 239.738 li
361.562 239.414 li
360.566 239.031 li
359.582 238.594 li
358.605 238.102 li
357.641 237.562 li
356.684 236.977 li
355.73 236.348 li
354.781 235.676 li
353.84 234.961 li
352.898 234.211 li
351.961 233.418 li
351.027 232.594 li
350.094 231.73 li
349.16 230.836 li
348.23 229.906 li
347.301 228.945 li
346.371 227.953 li
345.441 226.93 li
344.516 225.879 li
343.586 224.797 li
342.656 223.688 li
341.727 222.551 li
340.797 221.387 li
339.867 220.199 li
338.938 218.988 li
338.004 217.754 li
337.07 216.496 li
336.141 215.219 li
335.203 213.918 li
334.27 212.598 li
333.336 211.258 li
332.395 209.902 li
331.457 208.523 li
330.52 207.133 li
329.574 205.727 li
328.637 204.301 li
327.691 202.863 li
326.746 201.414 li
325.801 199.949 li
324.852 198.473 li
323.906 196.988 li
322.953 195.492 li
322.004 193.984 li
321.051 192.469 li
320.098 190.945 li
319.141 189.414 li
318.184 187.879 li
317.227 186.336 li
316.266 184.789 li
312.406 178.57 li
311.441 177.012 li
310.469 175.449 li
309.5 173.891 li
308.523 172.332 li
307.551 170.773 li
305.598 167.672 li
304.617 166.125 li
303.637 164.582 li
302.652 163.043 li
301.672 161.516 li
300.684 159.988 li
299.695 158.473 li
298.707 156.961 li
297.715 155.461 li
296.723 153.973 li
295.727 152.488 li
294.73 151.02 li
293.734 149.559 li
292.734 148.109 li
291.73 146.672 li
290.73 145.25 li
289.723 143.84 li
288.719 142.445 li
287.707 141.062 li
286.699 139.695 li
285.688 138.344 li
284.676 137.012 li
283.656 135.691 li
282.641 134.391 li
281.621 133.105 li
280.602 131.844 li
279.578 130.594 li
278.555 129.363 li
277.531 128.156 li
276.504 126.965 li
275.473 125.797 li
274.441 124.648 li
273.41 123.52 li
272.375 122.41 li
271.336 121.328 li
270.301 120.262 li
269.262 119.223 li
268.219 118.203 li
267.176 117.203 li
266.129 116.23 li
265.082 115.281 li
264.035 114.352 li
262.984 113.449 li
261.93 112.566 li
260.879 111.711 li
259.82 110.879 li
258.766 110.07 li
257.707 109.285 li
256.645 108.523 li
255.586 107.789 li
254.52 107.078 li
253.453 106.391 li
252.387 105.727 li
251.316 105.086 li
250.246 104.473 li
249.176 103.879 li
248.102 103.312 li
247.023 102.77 li
245.949 102.25 li
244.867 101.754 li
243.789 101.281 li
242.707 100.828 li
241.621 100.402 li
240.539 99.996 li
239.449 99.617 li
238.363 99.254 li
237.27 98.918 li
236.18 98.598 li
235.086 98.301 li
233.992 98.027 li
232.895 97.77 li
231.797 97.531 li
230.699 97.316 li
229.598 97.117 li
228.496 96.938 li
227.391 96.777 li
226.285 96.6331 li
225.18 96.504 li
224.07 96.3911 li
222.961 96.293 li
221.848 96.211 li
220.734 96.145 li
219.625 96.0941 li
218.508 96.051 li
217.391 96.023 li
216.273 96.0081 li
215.152 96.004 li
214.031 96.012 li
212.91 96.023 li
211.785 96.051 li
210.66 96.082 li
209.535 96.121 li
208.41 96.172 li
207.281 96.2271 li
206.152 96.285 li
205.02 96.3521 li
203.887 96.422 li
202.758 96.496 li
201.621 96.57 li
200.484 96.648 li
199.352 96.73 li
198.211 96.809 li
197.074 96.8911 li
195.934 96.973 li
194.797 97.051 li
193.652 97.129 li
192.512 97.203 li
191.367 97.277 li
190.223 97.348 li
187.934 97.473 li
186.785 97.527 li
185.641 97.578 li
184.492 97.621 li
183.344 97.66 li
182.195 97.695 li
181.047 97.723 li
179.895 97.738 li
178.746 97.75 li
177.594 97.754 li
176.441 97.75 li
175.293 97.738 li
174.141 97.723 li
172.988 97.695 li
171.836 97.66 li
170.684 97.621 li
169.531 97.57 li
168.379 97.5161 li
167.227 97.453 li
166.074 97.387 li
164.926 97.312 li
163.773 97.234 li
162.621 97.148 li
161.473 97.062 li
160.32 96.973 li
158.023 96.785 li
156.879 96.691 li
155.73 96.598 li
154.586 96.5081 li
153.438 96.418 li
152.297 96.336 li
151.152 96.2581 li
150.012 96.188 li
148.871 96.125 li
147.734 96.074 li
146.598 96.035 li
145.465 96.012 li
144.332 96.004 li
143.199 96.0161 li
142.074 96.043 li
140.949 96.098 li
139.824 96.176 li
138.703 96.277 li
137.586 96.414 li
136.473 96.578 li
135.359 96.781 li
134.254 97.0161 li
133.148 97.293 li
132.047 97.609 li
130.949 97.9771 li
129.855 98.387 li
128.766 98.848 li
127.684 99.359 li
126.602 99.9301 li
125.527 100.555 li
124.457 101.246 li
123.391 101.996 li
122.332 102.816 li
121.277 103.703 li
120.23 104.664 li
119.188 105.699 li
118.152 106.812 li
117.125 108.004 li
116.105 109.273 li
115.09 110.629 li
114.082 112.07 li
113.082 113.598 li
112.09 115.219 li
111.105 116.93 li
110.133 118.73 li
109.168 120.625 li
108.211 122.617 li
107.262 124.703 li
106.32 126.887 li
105.395 129.168 li
104.473 131.551 li
103.562 134.027 li
102.664 136.605 li
101.777 139.277 li
100.898 142.051 li
100.035 144.922 li
99.18 147.887 li
98.336 150.949 li
97.504 154.105 li
96.684 157.359 li
95.871 160.703 li
95.09 164.09 li
94.316 167.562 li
93.555 171.121 li
92.805 174.762 li
92.066 178.484 li
91.344 182.285 li
90.629 186.164 li
89.93 190.117 li
89.242 194.145 li
88.566 198.238 li
87.906 202.402 li
87.258 206.629 li
86.621 210.922 li
85.996 215.27 li
85.387 219.676 li
84.789 224.137 li
84.203 228.648 li
83.633 233.207 li
83.074 237.812 li
82.527 242.461 li
81.996 247.148 li
81.473 251.875 li
80.965 256.637 li
80.473 261.426 li
79.988 266.246 li
79.52 271.09 li
79.062 275.953 li
78.617 280.84 li
78.188 285.738 li
77.766 290.652 li
77.359 295.578 li
76.965 300.508 li
76.582 305.438 li
76.211 310.371 li
75.852 315.301 li
75.508 320.223 li
75.172 325.137 li
74.852 330.031 li
74.539 334.91 li
74.242 339.766 li
73.953 344.598 li
73.68 349.398 li
73.414 354.16 li
73.16 358.887 li
72.922 363.566 li
72.691 368.195 li
72.473 372.766 li
72.262 377.277 li
72.066 381.719 li
71.883 386.086 li
71.707 390.371 li
71.543 394.566 li
71.391 398.66 li
71.246 402.648 li
71.117 406.52 li
70.996 410.266 li
70.887 413.871 li
70.785 417.332 li
70.699 420.629 li
70.617 423.754 li
70.551 426.695 li
70.492 429.438 li
70.445 431.969 li
70.41 434.273 li
70.383 436.344 li
70.367 438.164 li
70.359 439.727 li
70.363 441.02 li
70.379 442.035 li
70.402 442.77 li
70.438 443.219 li
70.48 443.379 li
70.535 443.258 li
70.602 442.855 li
70.676 442.176 li
70.758 441.234 li
70.848 440.035 li
70.949 438.594 li
71.062 436.922 li
71.18 435.035 li
71.309 432.945 li
71.445 430.668 li
71.59 428.219 li
71.742 425.609 li
71.906 422.852 li
72.078 419.961 li
72.254 416.949 li
72.441 413.828 li
72.637 410.602 li
72.84 407.289 li
73.047 403.898 li
73.266 400.434 li
73.492 396.902 li
73.723 393.316 li
73.965 389.676 li
74.211 385.992 li
74.469 382.273 li
74.73 378.516 li
75 374.73 li
75.277 370.922 li
75.562 367.094 li
75.852 363.246 li
76.148 359.391 li
76.457 355.52 li
76.77 351.645 li
77.09 347.762 li
77.414 343.883 li
77.75 340 li
78.09 336.121 li
78.438 332.25 li
78.793 328.383 li
79.152 324.527 li
79.52 320.68 li
79.895 316.848 li
80.277 313.027 li
80.664 309.223 li
81.059 305.438 li
81.461 301.668 li
81.871 297.918 li
82.285 294.188 li
82.707 290.48 li
83.137 286.797 li
83.57 283.133 li
84.012 279.496 li
84.461 275.887 li
84.914 272.301 li
85.375 268.742 li
85.844 265.211 li
86.32 261.711 li
86.801 258.242 li
87.289 254.801 li
87.781 251.391 li
88.281 248.012 li
88.789 244.668 li
89.305 241.355 li
89.824 238.078 li
90.352 234.832 li
90.887 231.625 li
91.426 228.449 li
91.973 225.312 li
92.527 222.211 li
93.09 219.145 li
93.652 216.113 li
94.227 213.125 li
94.809 210.172 li
95.395 207.258 li
95.988 204.383 li
96.59 201.547 li
97.195 198.754 li
97.809 195.996 li
98.43 193.281 li
99.059 190.605 li
99.691 187.973 li
100.336 185.379 li
100.98 182.828 li
101.637 180.316 li
102.301 177.852 li
102.969 175.422 li
103.645 173.039 li
104.328 170.699 li
105.02 168.402 li
105.715 166.145 li
106.422 163.934 li
107.133 161.762 li
107.852 159.637 li
108.578 157.551 li
109.312 155.512 li
110.055 153.512 li
110.801 151.559 li
111.559 149.645 li
112.32 147.777 li
113.094 145.953 li
113.871 144.172 li
114.66 142.43 li
115.453 140.73 li
116.258 139.078 li
117.07 137.465 li
117.879 135.906 li
118.699 134.391 li
119.527 132.918 li
120.359 131.484 li
121.203 130.094 li
122.055 128.742 li
122.91 127.43 li
123.777 126.156 li
124.652 124.922 li
125.539 123.727 li
126.43 122.57 li
127.328 121.449 li
128.238 120.371 li
129.152 119.328 li
130.078 118.32 li
131.012 117.348 li
131.953 116.41 li
132.902 115.512 li
133.859 114.645 li
134.828 113.812 li
135.805 113.016 li
136.785 112.246 li
137.777 111.516 li
138.777 110.809 li
139.789 110.141 li
140.805 109.496 li
141.828 108.883 li
142.859 108.301 li
143.902 107.746 li
144.949 107.219 li
146.008 106.719 li
147.07 106.242 li
148.141 105.793 li
149.219 105.367 li
150.305 104.965 li
151.395 104.586 li
152.492 104.23 li
153.594 103.895 li
154.703 103.582 li
155.816 103.285 li
156.938 103.016 li
158.062 102.762 li
159.191 102.523 li
160.324 102.305 li
161.461 102.102 li
162.598 101.914 li
163.742 101.746 li
164.887 101.594 li
166.035 101.453 li
167.184 101.328 li
168.332 101.215 li
169.484 101.117 li
170.637 101.031 li
171.789 100.957 li
172.941 100.895 li
174.094 100.848 li
175.242 100.809 li
176.395 100.781 li
177.543 100.766 li
178.688 100.762 li
179.832 100.766 li
180.977 100.781 li
182.113 100.805 li
183.254 100.844 li
184.387 100.887 li
185.52 100.941 li
186.648 101.008 li
187.773 101.082 li
188.895 101.168 li
190.012 101.262 li
191.129 101.367 li
192.238 101.48 li
193.348 101.605 li
194.449 101.738 li
195.551 101.883 li
196.645 102.035 li
197.738 102.199 li
198.824 102.375 li
199.91 102.559 li
200.988 102.754 li
202.066 102.961 li
203.137 103.18 li
204.207 103.406 li
205.27 103.645 li
206.332 103.895 li
207.391 104.156 li
208.441 104.43 li
209.492 104.715 li
210.535 105.012 li
211.578 105.316 li
212.617 105.641 li
213.652 105.973 li
214.684 106.316 li
215.715 106.672 li
216.738 107.043 li
217.758 107.426 li
218.777 107.82 li
219.793 108.23 li
220.805 108.652 li
221.812 109.086 li
222.82 109.535 li
223.82 109.992 li
224.82 110.469 li
225.82 110.957 li
226.812 111.461 li
227.805 111.977 li
228.793 112.508 li
229.777 113.051 li
230.762 113.605 li
231.742 114.18 li
232.719 114.766 li
233.695 115.363 li
234.668 115.98 li
235.641 116.609 li
236.609 117.25 li
237.574 117.91 li
238.539 118.578 li
239.5 119.266 li
240.461 119.965 li
241.418 120.68 li
242.371 121.41 li
243.324 122.152 li
244.273 122.91 li
245.227 123.684 li
246.172 124.469 li
247.117 125.27 li
248.062 126.086 li
249.004 126.914 li
249.941 127.758 li
250.879 128.613 li
251.816 129.484 li
252.754 130.367 li
253.684 131.27 li
254.617 132.18 li
255.547 133.105 li
256.473 134.043 li
257.402 134.996 li
258.328 135.961 li
259.25 136.938 li
260.172 137.93 li
261.094 138.934 li
262.012 139.949 li
262.93 140.98 li
263.848 142.02 li
264.762 143.074 li
265.68 144.141 li
266.59 145.215 li
267.504 146.305 li
268.41 147.406 li
269.32 148.516 li
270.23 149.637 li
271.137 150.77 li
272.043 151.914 li
272.945 153.066 li
273.852 154.23 li
274.754 155.402 li
275.652 156.586 li
276.555 157.777 li
277.453 158.977 li
278.352 160.188 li
279.25 161.402 li
280.145 162.629 li
281.043 163.863 li
281.938 165.105 li
282.828 166.352 li
283.723 167.605 li
284.613 168.867 li
285.508 170.137 li
286.395 171.41 li
288.176 173.973 li
289.062 175.262 li
289.949 176.555 li
290.836 177.852 li
291.723 179.152 li
292.605 180.461 li
293.488 181.766 li
294.375 183.074 li
296.141 185.699 li
297.02 187.016 li
297.902 188.328 li
298.781 189.645 li
299.664 190.961 li
300.543 192.277 li
302.301 194.902 li
303.176 196.215 li
304.055 197.523 li
304.93 198.828 li
305.809 200.129 li
306.684 201.43 li
307.559 202.723 li
308.434 204.012 li
309.309 205.293 li
310.184 206.57 li
311.055 207.844 li
311.93 209.105 li
312.801 210.363 li
313.676 211.609 li
314.547 212.848 li
315.418 214.078 li
316.289 215.301 li
317.16 216.508 li
318.031 217.707 li
318.902 218.895 li
319.773 220.066 li
320.645 221.23 li
321.516 222.379 li
322.387 223.512 li
323.258 224.633 li
324.125 225.734 li
324.996 226.824 li
325.867 227.895 li
326.734 228.949 li
327.605 229.988 li
328.477 231.004 li
329.348 232.004 li
330.215 232.98 li
331.086 233.941 li
331.957 234.879 li
332.828 235.797 li
333.699 236.688 li
334.57 237.559 li
335.441 238.406 li
336.312 239.227 li
337.184 240.023 li
338.059 240.797 li
338.93 241.539 li
339.805 242.258 li
340.68 242.949 li
341.555 243.613 li
342.43 244.246 li
343.309 244.852 li
344.188 245.422 li
345.066 245.969 li
345.945 246.477 li
346.828 246.961 li
347.715 247.406 li
348.598 247.82 li
349.488 248.203 li
350.379 248.551 li
351.27 248.859 li
352.168 249.141 li
353.066 249.379 li
353.969 249.586 li
354.875 249.754 li
355.789 249.887 li
356.707 249.977 li
357.633 250.035 li
358.562 250.051 li
359.504 250.027 li
360.453 249.969 li
361.418 249.867 li
362.391 249.727 li
363.383 249.543 li
364.395 249.32 li
365.422 249.059 li
366.477 248.75 li
367.559 248.406 li
368.664 248.02 li
369.793 247.598 li
370.938 247.137 li
372.09 246.645 li
373.234 246.129 li
374.359 245.59 li
375.461 245.031 li
376.531 244.449 li
377.574 243.844 li
378.59 243.219 li
379.582 242.566 li
380.551 241.891 li
381.5 241.184 li
382.434 240.445 li
383.352 239.684 li
384.258 238.887 li
385.152 238.059 li
386.039 237.199 li
386.914 236.309 li
387.781 235.387 li
388.641 234.434 li
389.492 233.445 li
390.34 232.43 li
391.18 231.383 li
392.016 230.305 li
392.844 229.195 li
393.668 228.059 li
394.488 226.895 li
395.305 225.695 li
396.113 224.48 li
396.918 223.234 li
397.715 221.965 li
398.512 220.664 li
399.305 219.344 li
400.094 217.992 li
400.879 216.621 li
401.664 215.227 li
402.441 213.809 li
403.219 212.371 li
403.992 210.91 li
404.762 209.43 li
405.531 207.93 li
406.297 206.41 li
407.059 204.871 li
407.816 203.316 li
408.57 201.746 li
409.324 200.16 li
410.074 198.559 li
410.824 196.945 li
411.566 195.316 li
412.309 193.676 li
413.051 192.027 li
413.789 190.363 li
414.523 188.691 li
415.254 187.012 li
415.98 185.324 li
416.707 183.625 li
417.43 181.926 li
418.152 180.219 li
419.59 176.789 li
420.301 175.07 li
421.012 173.348 li
421.719 171.629 li
422.426 169.902 li
423.129 168.184 li
423.828 166.461 li
424.527 164.742 li
425.223 163.027 li
428.66 154.523 li
429.34 152.844 li
430.02 151.176 li
430.695 149.512 li
431.367 147.863 li
432.039 146.227 li
432.703 144.602 li
433.371 142.984 li
434.031 141.387 li
434.691 139.805 li
435.348 138.234 li
436.004 136.684 li
436.656 135.148 li
437.305 133.633 li
437.949 132.137 li
438.594 130.66 li
439.234 129.203 li
439.875 127.77 li
440.512 126.355 li
441.145 124.965 li
441.773 123.598 li
442.402 122.258 li
443.027 120.941 li
443.652 119.652 li
444.273 118.391 li
444.891 117.152 li
445.504 115.945 li
446.113 114.77 li
446.723 113.621 li
447.328 112.504 li
447.934 111.418 li
448.535 110.363 li
449.133 109.34 li
449.727 108.352 li
450.32 107.398 li
450.91 106.477 li
451.496 105.594 li
452.078 104.742 li
452.66 103.93 li
453.238 103.152 li
453.812 102.414 li
454.383 101.715 li
454.953 101.055 li
455.52 100.43 li
456.082 99.848 li
456.641 99.301 li
457.199 98.801 li
457.754 98.336 li
458.305 97.914 li
458.852 97.531 li
459.395 97.191 li
459.938 96.895 li
460.473 96.6411 li
461.008 96.4301 li
461.539 96.2581 li
462.066 96.1331 li
462.594 96.047 li
463.113 96.0081 li
463.633 96.012 li
464.148 96.0551 li
464.66 96.145 li
465.168 96.277 li
465.672 96.453 li
466.172 96.672 li
466.672 96.934 li
467.164 97.238 li
467.656 97.586 li
468.145 97.9771 li
468.625 98.41 li
469.105 98.8831 li
469.582 99.402 li
470.055 99.961 li
470.527 100.559 li
470.988 101.199 li
471.453 101.879 li
471.91 102.598 li
472.363 103.355 li
472.812 104.152 li
473.262 104.992 li
473.703 105.863 li
474.141 106.773 li
474.578 107.723 li
475.008 108.707 li
475.434 109.723 li
475.855 110.777 li
476.273 111.863 li
476.691 112.98 li
477.102 114.129 li
477.508 115.309 li
477.91 116.52 li
478.309 117.762 li
478.703 119.027 li
479.094 120.324 li
479.477 121.645 li
479.859 122.988 li
480.234 124.359 li
480.609 125.75 li
480.977 127.164 li
481.34 128.598 li
481.699 130.051 li
482.055 131.523 li
482.402 133.012 li
482.75 134.516 li
483.094 136.035 li
483.426 137.566 li
483.758 139.105 li
484.086 140.66 li
484.41 142.219 li
484.727 143.789 li
485.039 145.363 li
485.348 146.941 li
485.652 148.52 li
485.949 150.102 li
486.242 151.684 li
486.531 153.266 li
486.816 154.84 li
487.094 156.41 li
487.367 157.973 li
487.637 159.531 li
487.898 161.074 li
488.156 162.609 li
488.406 164.125 li
488.656 165.629 li
488.895 167.117 li
489.133 168.586 li
489.363 170.031 li
489.586 171.453 li
489.809 172.852 li
490.02 174.227 li
490.23 175.566 li
490.43 176.883 li
490.629 178.16 li
490.82 179.41 li
491.004 180.621 li
491.18 181.797 li
491.355 182.93 li
491.52 184.023 li
491.684 185.07 li
491.836 186.078 li
491.984 187.035 li
492.125 187.941 li
492.262 188.801 li
492.387 189.605 li
492.512 190.355 li
492.629 191.055 li
492.734 191.691 li
492.836 192.273 li
492.934 192.793 li
493.02 193.25 li
493.102 193.648 li
493.176 193.977 li
493.242 194.246 li
493.301 194.441 li
493.355 194.574 li
493.398 194.637 li
493.438 194.629 li
493.469 194.555 li
493.492 194.406 li
493.504 194.188 li
493.512 193.895 li
493.512 193.531 li
493.504 193.098 li
493.488 192.586 li
493.465 192.004 li
493.43 191.352 li
493.391 190.629 li
493.34 189.828 li
493.285 188.961 li
493.219 188.023 li
493.145 187.016 li
493.062 185.938 li
492.969 184.797 li
492.871 183.586 li
492.762 182.309 li
492.645 180.973 li
492.516 179.57 li
492.379 178.109 li
492.234 176.594 li
492.082 175.016 li
491.918 173.387 li
491.746 171.703 li
491.562 169.973 li
491.371 168.195 li
491.172 166.371 li
490.961 164.504 li
490.742 162.602 li
490.512 160.656 li
490.27 158.684 li
490.02 156.676 li
489.762 154.645 li
489.492 152.586 li
489.211 150.508 li
488.922 148.414 li
488.621 146.305 li
488.312 144.188 li
487.988 142.062 li
487.66 139.934 li
487.316 137.809 li
486.965 135.688 li
486.602 133.574 li
486.227 131.477 li
485.84 129.395 li
485.445 127.336 li
485.035 125.301 li
484.617 123.301 li
484.188 121.332 li
483.746 119.402 li
483.297 117.52 li
482.832 115.684 li
482.355 113.898 li
481.871 112.176 li
481.371 110.512 li
480.863 108.914 li
480.344 107.391 li
479.809 105.941 li
479.266 104.574 li
478.711 103.289 li
478.145 102.098 li
477.566 101 li
476.977 100 li
476.371 99.1021 li
475.758 98.309 li
475.133 97.629 li
474.496 97.062 li
473.848 96.613 li
473.188 96.281 li
472.516 96.078 li
471.836 96.004 li
471.141 96.059 li
470.438 96.242 li
469.723 96.566 li
468.996 97.023 li
468.258 97.617 li
467.512 98.355 li
466.754 99.23 li
465.984 100.246 li
465.203 101.406 li
464.418 102.711 li
463.621 104.152 li
462.812 105.734 li
461.996 107.461 li
461.18 109.301 li
460.355 111.277 li
459.523 113.387 li
458.684 115.629 li
457.832 118.004 li
456.977 120.504 li
456.109 123.129 li
455.234 125.875 li
454.355 128.742 li
453.469 131.73 li
452.578 134.832 li
451.676 138.043 li
450.77 141.367 li
449.855 144.793 li
448.938 148.324 li
448.012 151.953 li
447.078 155.68 li
446.141 159.496 li
445.199 163.406 li
444.254 167.398 li
443.297 171.477 li
442.34 175.633 li
441.379 179.867 li
440.41 184.176 li
439.438 188.555 li
438.461 193.004 li
437.48 197.512 li
436.496 202.086 li
435.508 206.715 li
434.512 211.402 li
433.516 216.141 li
432.516 220.934 li
431.512 225.77 li
430.504 230.656 li
429.492 235.582 li
428.48 240.551 li
427.461 245.555 li
426.441 250.598 li
425.418 255.672 li
424.391 260.777 li
423.359 265.914 li
422.328 271.078 li
421.293 276.266 li
420.254 281.477 li
419.215 286.711 li
418.172 291.965 li
417.129 297.234 li
416.078 302.523 li
415.031 307.828 li
413.977 313.145 li
412.926 318.469 li
411.867 323.809 li
410.809 329.152 li
409.75 334.508 li
408.688 339.867 li
407.625 345.23 li
406.559 350.594 li
405.492 355.965 li
404.422 361.328 li
402.281 372.062 li
401.207 377.422 li
400.129 382.773 li
399.055 388.121 li
397.977 393.465 li
396.898 398.793 li
395.816 404.113 li
394.734 409.422 li
393.652 414.715 li
392.566 419.992 li
391.48 425.25 li
390.395 430.492 li
389.305 435.711 li
388.215 440.902 li
387.121 446.07 li
386.031 451.207 li
384.938 456.309 li
383.844 461.375 li
382.746 466.398 li
381.648 471.371 li
380.551 476.293 li
379.449 481.148 li
378.348 485.934 li
377.242 490.629 li
376.137 495.227 li
375.027 499.699 li
373.918 504.027 li
372.801 508.172 li
371.684 512.094 li
370.562 515.738 li
369.434 519.035 li
368.305 521.895 li
367.164 524.219 li
366.02 525.898 li
364.871 526.836 li
363.723 526.973 li
362.57 526.309 li
361.422 524.895 li
360.277 522.832 li
359.137 520.238 li
358.004 517.219 li
356.875 513.867 li
355.746 510.262 li
354.629 506.465 li
353.512 502.512 li
352.395 498.449 li
351.281 494.293 li
350.172 490.07 li
349.062 485.797 li
347.953 481.484 li
346.844 477.141 li
345.738 472.781 li
344.633 468.406 li
343.527 464.02 li
340.215 450.859 li
339.113 446.48 li
338.012 442.113 li
336.91 437.754 li
335.809 433.406 li
334.707 429.074 li
333.605 424.758 li
332.504 420.453 li
331.406 416.172 li
330.305 411.906 li
329.207 407.66 li
328.105 403.438 li
327.008 399.234 li
325.91 395.055 li
324.809 390.895 li
323.711 386.758 li
322.613 382.645 li
321.516 378.559 li
320.422 374.496 li
319.324 370.457 li
318.227 366.445 li
317.129 362.457 li
316.031 358.496 li
314.938 354.566 li
313.844 350.66 li
312.746 346.781 li
311.652 342.93 li
310.555 339.105 li
309.461 335.312 li
308.367 331.547 li
307.273 327.809 li
306.18 324.102 li
305.086 320.426 li
303.992 316.777 li
302.898 313.16 li
301.809 309.57 li
300.715 306.016 li
299.621 302.488 li
298.531 298.996 li
297.438 295.531 li
296.348 292.102 li
295.254 288.699 li
294.164 285.332 li
293.07 281.996 li
291.98 278.695 li
290.891 275.426 li
289.801 272.188 li
288.711 268.98 li
287.621 265.809 li
286.531 262.672 li
285.441 259.566 li
284.352 256.496 li
283.262 253.461 li
282.172 250.461 li
281.086 247.492 li
279.996 244.559 li
278.906 241.656 li
277.816 238.793 li
276.73 235.965 li
275.641 233.168 li
274.555 230.406 li
273.465 227.684 li
272.379 224.992 li
271.289 222.34 li
270.199 219.719 li
269.113 217.137 li
268.023 214.586 li
266.938 212.074 li
265.848 209.598 li
264.762 207.156 li
263.672 204.754 li
262.586 202.383 li
261.496 200.051 li
260.406 197.754 li
259.32 195.492 li
258.23 193.266 li
257.145 191.074 li
256.055 188.922 li
254.965 186.801 li
253.879 184.719 li
252.789 182.672 li
251.699 180.66 li
250.609 178.688 li
249.52 176.746 li
248.43 174.844 li
247.34 172.977 li
246.25 171.141 li
245.156 169.344 li
244.066 167.578 li
242.977 165.852 li
241.883 164.156 li
240.793 162.5 li
239.699 160.879 li
238.605 159.289 li
237.512 157.734 li
236.418 156.211 li
235.32 154.727 li
234.227 153.273 li
233.133 151.852 li
232.035 150.465 li
230.938 149.113 li
229.84 147.789 li
228.742 146.504 li
227.641 145.25 li
226.543 144.027 li
225.441 142.836 li
224.34 141.676 li
223.238 140.547 li
222.133 139.453 li
221.027 138.387 li
219.922 137.352 li
218.816 136.352 li
217.711 135.375 li
216.602 134.434 li
215.492 133.52 li
214.383 132.633 li
213.273 131.777 li
212.16 130.949 li
211.047 130.152 li
209.93 129.387 li
208.812 128.645 li
207.695 127.93 li
206.578 127.246 li
205.457 126.586 li
204.336 125.957 li
203.215 125.352 li
202.09 124.773 li
200.965 124.227 li
199.84 123.699 li
198.711 123.203 li
197.582 122.73 li
196.449 122.285 li
195.32 121.867 li
194.184 121.473 li
193.051 121.105 li
191.914 120.762 li
190.777 120.445 li
189.637 120.152 li
188.496 119.887 li
187.355 119.645 li
186.215 119.43 li
185.07 119.242 li
183.926 119.078 li
182.781 118.938 li
181.633 118.828 li
180.484 118.742 li
179.34 118.684 li
178.188 118.652 li
177.039 118.648 li
175.887 118.672 li
174.738 118.727 li
173.586 118.805 li
172.434 118.914 li
171.281 119.055 li
170.129 119.223 li
168.98 119.426 li
167.824 119.656 li
166.676 119.922 li
165.523 120.219 li
164.371 120.551 li
163.223 120.918 li
162.074 121.32 li
160.926 121.762 li
159.777 122.242 li
158.633 122.758 li
157.488 123.316 li
156.344 123.914 li
155.203 124.559 li
154.062 125.246 li
152.926 125.98 li
151.793 126.762 li
150.66 127.59 li
149.527 128.469 li
148.398 129.402 li
147.273 130.387 li
146.148 131.43 li
145.031 132.527 li
143.91 133.688 li
142.797 134.906 li
141.688 136.191 li
140.578 137.539 li
139.477 138.957 li
138.371 140.441 li
137.277 141.996 li
136.184 143.629 li
135.09 145.34 li
134.004 147.129 li
132.922 148.996 li
131.844 150.949 li
130.766 152.988 li
129.695 155.121 li
128.629 157.344 li
127.566 159.66 li
126.508 162.074 li
125.453 164.594 li
124.402 167.215 li
123.355 169.941 li
122.312 172.781 li
121.277 175.734 li
120.242 178.809 li
119.215 182 li
118.191 185.32 li
117.172 188.77 li
116.156 192.352 li
115.148 196.066 li
114.145 199.93 li
113.145 203.938 li
112.148 208.098 li
111.16 212.414 li
110.176 216.895 li
109.199 221.539 li
108.227 226.359 li
107.258 231.355 li
106.297 236.543 li
105.344 241.922 li
104.395 247.5 li
103.453 253.285 li
102.52 259.289 li
101.594 265.52 li
100.672 271.988 li
99.762 278.699 li
98.859 285.672 li
97.965 292.91 li
97.078 300.434 li
96.207 308.254 li
95.344 316.387 li
94.492 324.855 li
93.652 333.672 li
92.828 342.859 li
92.023 352.445 li
91.23 362.453 li
90.461 372.91 li
89.707 383.852 li
89.008 394.855 li
88.336 406.336 li
87.691 418.32 li
87.086 430.824 li
86.516 443.879 li
85.992 457.492 li
85.52 471.68 li
85.105 486.438 li
84.758 501.734 li
84.48 517.535 li
84.285 533.762 li
84.176 550.309 li
84.16 567.035 li
.899077 .763424 0 0 cmyk
@
1.3875 lw
505.562 142.574 mo
509.172 142.574 li
.75021 .679683 .670222 .90164 cmyk
@
505.562 235.719 mo
509.172 235.719 li
@
505.562 328.859 mo
509.172 328.859 li
@
505.562 422.004 mo
509.172 422.004 li
@
505.562 515.145 mo
509.172 515.145 li
@
505.562 571.199 mo
505.562 96.004 li
@
554.145 557.172 mo
554.609 557.172 554.996 557.199 555.305 557.258 cv
555.617 557.316 555.895 557.41 556.141 557.539 cv
556.547 557.742 556.824 557.98 556.977 558.254 cv
557.129 558.531 557.203 558.789 557.203 559.035 cv
557.203 559.367 557.09 559.672 556.867 559.945 cv
556.645 560.223 556.379 560.438 556.074 560.598 cv
555.945 560.656 555.742 560.727 555.469 560.812 cv
555.195 560.898 554.887 560.984 554.547 561.062 cv
554.207 561.141 553.84 561.223 553.441 561.301 cv
553.043 561.379 552.656 561.453 552.27 561.52 cv
551.887 561.582 551.527 561.645 551.188 561.703 cv
550.848 561.762 550.555 561.805 550.309 561.832 cv
550.309 561.855 li
556.898 564.934 li
556.898 566.602 li
547.926 562.438 li
547.445 562.527 547.02 562.629 546.645 562.742 cv
546.27 562.859 545.945 562.98 545.668 563.113 cv
545.422 563.242 545.238 563.41 545.117 563.621 cv
544.992 563.832 544.934 564.043 544.934 564.262 cv
544.934 564.461 544.977 564.652 545.062 564.836 cv
545.148 565.016 545.258 565.172 545.387 565.301 cv
545.562 565.473 545.762 565.586 545.984 565.637 cv
546.207 565.688 546.422 565.742 546.621 565.801 cv
546.621 566.148 li
545.668 566.059 544.922 565.883 544.379 565.617 cv
543.836 565.348 543.566 564.945 543.566 564.414 cv
543.566 564.008 543.684 563.648 543.926 563.34 cv
544.164 563.027 544.426 562.801 544.715 562.656 cv
545.062 562.484 545.516 562.312 546.07 562.148 cv
546.629 561.98 547.223 561.812 547.859 561.637 cv
548.164 561.566 548.551 561.477 549.031 561.379 cv
549.508 561.277 550.012 561.172 550.547 561.062 cv
551.082 560.953 551.613 560.848 552.141 560.738 cv
552.668 560.629 553.133 560.523 553.539 560.422 cv
553.844 560.352 554.145 560.258 554.449 560.141 cv
554.754 560.027 555.008 559.875 555.207 559.688 cv
555.484 559.398 555.621 559.078 555.621 558.73 cv
555.621 558.543 555.57 558.359 555.469 558.18 cv
555.367 558 555.195 557.852 554.949 557.734 cv
554.848 557.676 554.711 557.629 554.535 557.594 cv
554.363 557.559 554.234 557.523 554.145 557.496 cv
554.145 557.172 li
f
505.562 561.715 mo
512.777 561.715 li
@
526.027 571.934 mo
524.668 571.934 523.496 571.73 522.504 571.316 cv
521.516 570.906 520.781 570.359 520.305 569.68 cv
519.93 569.145 519.738 568.598 519.738 568.031 cv
519.738 567.121 520.203 566.305 521.129 565.582 cv
522.285 564.672 523.852 564.219 525.832 564.219 cv
527.219 564.219 528.398 564.414 529.367 564.812 cv
530.336 565.211 531.039 565.719 531.48 566.344 cv
531.922 566.965 532.141 567.555 532.141 568.121 cv
532.141 569.262 531.469 570.215 530.125 570.98 cv
528.984 571.617 527.617 571.934 526.027 571.934 cv
cp
526.246 570.199 mo
527.891 570.199 529.234 570 530.277 569.594 cv
531.145 569.262 531.578 568.762 531.578 568.098 cv
531.578 567.781 531.438 567.449 531.156 567.109 cv
530.875 566.773 530.391 566.516 529.715 566.344 cv
528.715 566.066 527.293 565.93 525.441 565.93 cv
524.086 565.93 522.949 566.074 522.039 566.363 cv
521.359 566.566 520.883 566.84 520.605 567.188 cv
520.422 567.418 520.324 567.707 520.324 568.055 cv
520.324 568.445 520.5 568.797 520.848 569.117 cv
521.336 569.535 522.105 569.82 523.156 569.973 cv
524.203 570.125 525.234 570.199 526.246 570.199 cv
cp
530.211 561.312 mo
530.211 561.039 530.309 560.805 530.504 560.617 cv
530.699 560.43 530.926 560.336 531.188 560.336 cv
531.461 560.336 531.695 560.43 531.879 560.617 cv
532.07 560.805 532.164 561.039 532.164 561.312 cv
532.164 561.586 532.07 561.816 531.879 562.004 cv
531.695 562.195 531.461 562.289 531.188 562.289 cv
530.914 562.289 530.68 562.195 530.492 562.004 cv
530.305 561.816 530.211 561.586 530.211 561.312 cv
cp
519.98 551.23 mo
521.473 551.926 li
521.473 555.5 li
523.078 556.281 li
523.309 554.734 523.891 553.508 524.812 552.598 cv
525.609 551.816 526.547 551.426 527.633 551.426 cv
528.27 551.426 528.852 551.551 529.387 551.805 cv
529.922 552.059 530.379 552.379 530.754 552.77 cv
531.129 553.16 531.426 553.594 531.641 554.07 cv
531.977 554.734 532.141 555.43 532.141 556.152 cv
532.141 556.859 532.02 557.379 531.773 557.703 cv
531.527 558.027 531.258 558.191 530.969 558.191 cv
530.797 558.191 530.648 558.121 530.527 557.984 cv
530.402 557.848 530.344 557.676 530.344 557.477 cv
530.344 557.332 530.363 557.199 530.406 557.086 cv
530.449 556.969 530.574 556.773 530.773 556.5 cv
531.078 556.051 531.23 555.602 531.23 555.156 cv
531.23 554.461 530.969 553.859 530.449 553.344 cv
529.93 552.832 529.293 552.574 528.543 552.574 cv
527.82 552.574 527.148 552.805 526.527 553.27 cv
525.906 553.73 525.422 554.367 525.074 555.176 cv
524.812 555.828 524.66 556.703 524.617 557.801 cv
519.98 555.5 li
519.98 551.23 li
f
505.562 468.57 mo
512.777 468.57 li
@
526.027 478.973 mo
524.668 478.973 523.496 478.766 522.504 478.355 cv
521.516 477.945 520.781 477.398 520.305 476.719 cv
519.93 476.184 519.738 475.633 519.738 475.07 cv
519.738 474.16 520.203 473.344 521.129 472.621 cv
522.285 471.711 523.852 471.254 525.832 471.254 cv
527.219 471.254 528.398 471.453 529.367 471.852 cv
530.336 472.246 531.039 472.758 531.48 473.379 cv
531.922 474 532.141 474.594 532.141 475.156 cv
532.141 476.301 531.469 477.254 530.125 478.02 cv
528.984 478.656 527.617 478.973 526.027 478.973 cv
cp
526.246 477.238 mo
527.891 477.238 529.234 477.035 530.277 476.633 cv
531.145 476.301 531.578 475.801 531.578 475.137 cv
531.578 474.816 531.438 474.488 531.156 474.148 cv
530.875 473.809 530.391 473.555 529.715 473.379 cv
528.715 473.105 527.293 472.969 525.441 472.969 cv
524.086 472.969 522.949 473.113 522.039 473.402 cv
521.359 473.605 520.883 473.879 520.605 474.227 cv
520.422 474.457 520.324 474.746 520.324 475.094 cv
520.324 475.484 520.5 475.836 520.848 476.152 cv
521.336 476.574 522.105 476.859 523.156 477.012 cv
524.203 477.164 525.234 477.238 526.246 477.238 cv
cp
530.211 468.352 mo
530.211 468.074 530.309 467.844 530.504 467.656 cv
530.699 467.469 530.926 467.375 531.188 467.375 cv
531.461 467.375 531.695 467.469 531.879 467.656 cv
532.07 467.844 532.164 468.074 532.164 468.352 cv
532.164 468.625 532.07 468.855 531.879 469.043 cv
531.695 469.23 531.461 469.328 531.188 469.328 cv
530.914 469.328 530.68 469.23 530.492 469.043 cv
530.305 468.855 530.211 468.625 530.211 468.352 cv
cp
519.738 458.008 mo
520.066 458.008 li
520.137 458.789 520.289 459.426 520.52 459.914 cv
520.75 460.406 521.105 460.891 521.582 461.367 cv
522.059 461.848 522.59 462.242 523.176 462.551 cv
523.762 462.863 524.453 463.125 525.246 463.344 cv
524.668 462.488 524.379 461.637 524.379 460.785 cv
524.379 459.977 524.707 459.27 525.367 458.672 cv
526.023 458.07 526.871 457.77 527.914 457.77 cv
528.91 457.77 529.82 458.074 530.645 458.684 cv
531.641 459.402 532.141 460.363 532.141 461.566 cv
532.141 462.391 531.867 463.082 531.316 463.645 cv
530.277 464.758 528.918 465.316 527.242 465.316 cv
526.172 465.316 525.156 465.102 524.195 464.676 cv
523.234 464.25 522.379 463.641 521.629 462.844 cv
520.875 462.051 520.371 461.285 520.121 460.555 cv
519.867 459.824 519.738 459.148 519.738 458.527 cv
cp
525.898 463.492 mo
526.691 463.594 527.336 463.645 527.828 463.645 cv
528.391 463.645 529 463.539 529.66 463.332 cv
530.316 463.121 530.84 462.816 531.23 462.41 cv
531.504 462.105 531.641 461.738 531.641 461.305 cv
531.641 460.801 531.402 460.344 530.918 459.938 cv
530.434 459.535 529.75 459.332 528.867 459.332 cv
527.855 459.332 526.984 459.535 526.254 459.938 cv
525.527 460.344 525.16 460.906 525.16 461.629 cv
525.16 461.859 525.207 462.102 525.301 462.355 cv
525.395 462.609 525.594 462.988 525.898 463.492 cv
f
505.562 375.43 mo
512.777 375.43 li
@
526.027 384.625 mo
524.668 384.625 523.496 384.418 522.504 384.004 cv
521.516 383.594 520.781 383.047 520.305 382.367 cv
519.93 381.836 519.738 381.285 519.738 380.723 cv
519.738 379.809 520.203 378.992 521.129 378.273 cv
522.285 377.359 523.852 376.906 525.832 376.906 cv
527.219 376.906 528.398 377.102 529.367 377.504 cv
530.336 377.898 531.039 378.41 531.48 379.027 cv
531.922 379.652 532.141 380.242 532.141 380.809 cv
532.141 381.949 531.469 382.902 530.125 383.668 cv
528.984 384.305 527.617 384.625 526.027 384.625 cv
cp
526.246 382.891 mo
527.891 382.891 529.234 382.688 530.277 382.281 cv
531.145 381.949 531.578 381.449 531.578 380.785 cv
531.578 380.469 531.438 380.141 531.156 379.801 cv
530.875 379.461 530.391 379.203 529.715 379.027 cv
528.715 378.758 527.293 378.617 525.441 378.617 cv
524.086 378.617 522.949 378.762 522.039 379.051 cv
521.359 379.254 520.883 379.527 520.605 379.875 cv
520.422 380.105 520.324 380.395 520.324 380.742 cv
520.324 381.133 520.5 381.488 520.848 381.805 cv
521.336 382.227 522.105 382.508 523.156 382.66 cv
524.203 382.812 525.234 382.891 526.246 382.891 cv
cp
530.211 374 mo
530.211 373.727 530.309 373.492 530.504 373.305 cv
530.699 373.117 530.926 373.023 531.188 373.023 cv
531.461 373.023 531.695 373.117 531.879 373.305 cv
532.07 373.492 532.164 373.727 532.164 374 cv
532.164 374.273 532.07 374.508 531.879 374.691 cv
531.695 374.883 531.461 374.977 531.188 374.977 cv
530.914 374.977 530.68 374.883 530.492 374.691 cv
530.305 374.508 530.211 374.273 530.211 374 cv
cp
519.98 369.926 mo
519.98 363.531 li
520.324 363.531 li
532.164 367.52 li
532.164 368.492 li
521.41 364.938 li
521.41 368.211 li
521.41 368.879 521.488 369.348 521.648 369.621 cv
521.922 370.129 522.34 370.523 522.906 370.812 cv
522.82 371.074 li
519.98 369.926 li
f
505.562 282.285 mo
512.777 282.285 li
@
526.027 291.66 mo
524.668 291.66 523.496 291.453 522.504 291.043 cv
521.516 290.633 520.781 290.086 520.305 289.406 cv
519.93 288.871 519.738 288.32 519.738 287.758 cv
519.738 286.848 520.203 286.031 521.129 285.309 cv
522.285 284.398 523.852 283.941 525.832 283.941 cv
527.219 283.941 528.398 284.141 529.367 284.539 cv
530.336 284.938 531.039 285.445 531.48 286.066 cv
531.922 286.688 532.141 287.281 532.141 287.848 cv
532.141 288.988 531.469 289.941 530.125 290.707 cv
528.984 291.344 527.617 291.66 526.027 291.66 cv
cp
526.246 289.926 mo
527.891 289.926 529.234 289.723 530.277 289.32 cv
531.145 288.988 531.578 288.488 531.578 287.824 cv
531.578 287.504 531.438 287.176 531.156 286.836 cv
530.875 286.496 530.391 286.238 529.715 286.066 cv
528.715 285.793 527.293 285.656 525.441 285.656 cv
524.086 285.656 522.949 285.801 522.039 286.09 cv
521.359 286.289 520.883 286.566 520.605 286.914 cv
520.422 287.145 520.324 287.434 520.324 287.781 cv
520.324 288.172 520.5 288.523 520.848 288.844 cv
521.336 289.262 522.105 289.547 523.156 289.699 cv
524.203 289.852 525.234 289.926 526.246 289.926 cv
cp
530.211 281.035 mo
530.211 280.766 530.309 280.531 530.504 280.344 cv
530.699 280.156 530.926 280.062 531.188 280.062 cv
531.461 280.062 531.695 280.156 531.879 280.344 cv
532.07 280.531 532.164 280.766 532.164 281.035 cv
532.164 281.312 532.07 281.543 531.879 281.73 cv
531.695 281.918 531.461 282.016 531.188 282.016 cv
530.914 282.016 530.68 281.918 530.492 281.73 cv
530.305 281.543 530.211 281.312 530.211 281.035 cv
cp
525.918 275.312 mo
525.141 276.27 524.512 276.883 524.043 277.156 cv
523.574 277.43 523.086 277.566 522.582 277.566 cv
521.801 277.566 521.133 277.27 520.574 276.668 cv
520.02 276.07 519.738 275.27 519.738 274.273 cv
519.738 273.305 520 272.527 520.52 271.941 cv
521.043 271.359 521.633 271.066 522.297 271.066 cv
522.746 271.066 523.203 271.227 523.664 271.543 cv
524.129 271.859 524.676 272.52 525.312 273.516 cv
526.105 272.488 526.734 271.809 527.199 271.477 cv
527.789 271.027 528.422 270.805 529.086 270.805 cv
529.922 270.805 530.641 271.121 531.242 271.758 cv
531.844 272.395 532.141 273.23 532.141 274.273 cv
532.141 275.414 531.789 276.305 531.078 276.941 cv
530.5 277.445 529.871 277.699 529.191 277.699 cv
528.672 277.699 528.152 277.52 527.633 277.156 cv
527.113 276.797 526.539 276.18 525.918 275.312 cv
cp
524.965 273.949 mo
524.328 273.242 523.828 272.793 523.457 272.605 cv
523.09 272.414 522.676 272.32 522.211 272.32 cv
521.605 272.32 521.125 272.496 520.77 272.844 cv
520.414 273.188 520.238 273.66 520.238 274.254 cv
520.238 274.859 520.414 275.352 520.762 275.727 cv
521.105 276.102 521.512 276.289 521.973 276.289 cv
522.277 276.289 522.586 276.211 522.895 276.051 cv
523.207 275.891 523.5 275.668 523.773 275.379 cv
cp
526.246 274.902 mo
526.648 275.395 527.094 275.754 527.578 275.988 cv
528.062 276.219 528.586 276.336 529.148 276.336 cv
529.918 276.336 530.527 276.129 530.98 275.715 cv
531.438 275.305 531.664 274.777 531.664 274.145 cv
531.664 273.508 531.484 272.996 531.121 272.613 cv
530.762 272.23 530.328 272.039 529.82 272.039 cv
529.402 272.039 529.02 272.156 528.672 272.387 cv
528.051 272.793 527.242 273.629 526.246 274.902 cv
f
505.562 189.145 mo
512.777 189.145 li
@
526.027 198.699 mo
524.668 198.699 523.496 198.492 522.504 198.078 cv
521.516 197.668 520.781 197.121 520.305 196.445 cv
519.93 195.91 519.738 195.359 519.738 194.797 cv
519.738 193.887 520.203 193.066 521.129 192.348 cv
522.285 191.434 523.852 190.98 525.832 190.98 cv
527.219 190.98 528.398 191.18 529.367 191.578 cv
530.336 191.973 531.039 192.484 531.48 193.105 cv
531.922 193.727 532.141 194.316 532.141 194.883 cv
532.141 196.023 531.469 196.977 530.125 197.742 cv
528.984 198.383 527.617 198.699 526.027 198.699 cv
cp
526.246 196.965 mo
527.891 196.965 529.234 196.762 530.277 196.355 cv
531.145 196.023 531.578 195.523 531.578 194.859 cv
531.578 194.543 531.438 194.215 531.156 193.875 cv
530.875 193.535 530.391 193.277 529.715 193.105 cv
528.715 192.832 527.293 192.695 525.441 192.695 cv
524.086 192.695 522.949 192.84 522.039 193.129 cv
521.359 193.328 520.883 193.605 520.605 193.949 cv
520.422 194.18 520.324 194.473 520.324 194.816 cv
520.324 195.207 520.5 195.562 520.848 195.879 cv
521.336 196.301 522.105 196.586 523.156 196.738 cv
524.203 196.887 525.234 196.965 526.246 196.965 cv
cp
530.211 188.074 mo
530.211 187.801 530.309 187.57 530.504 187.383 cv
530.699 187.191 530.926 187.098 531.188 187.098 cv
531.461 187.098 531.695 187.191 531.879 187.383 cv
532.07 187.57 532.164 187.801 532.164 188.074 cv
532.164 188.348 532.07 188.582 531.879 188.77 cv
531.695 188.957 531.461 189.051 531.188 189.051 cv
530.914 189.051 530.68 188.957 530.492 188.77 cv
530.305 188.582 530.211 188.348 530.211 188.074 cv
cp
532.164 184.867 mo
531.836 184.867 li
531.836 184.102 531.664 183.391 531.316 182.73 cv
530.969 182.074 530.367 181.438 529.508 180.824 cv
528.648 180.211 527.703 179.785 526.676 179.555 cv
527.27 180.48 527.566 181.309 527.566 182.051 cv
527.566 182.887 527.246 183.605 526.602 184.203 cv
525.957 184.805 525.098 185.105 524.012 185.105 cv
522.969 185.105 522.039 184.809 521.215 184.215 cv
520.23 183.492 519.738 182.547 519.738 181.375 cv
519.738 180.395 520.145 179.555 520.953 178.863 cv
521.953 178.008 523.188 177.582 524.66 177.582 cv
525.992 177.582 527.23 177.906 528.379 178.559 cv
529.527 179.211 530.48 180.113 531.23 181.27 cv
531.852 182.223 532.164 183.254 532.164 184.367 cv
cp
526.027 179.402 mo
525.262 179.305 524.656 179.254 524.207 179.254 cv
523.629 179.254 523.012 179.348 522.352 179.543 cv
521.695 179.738 521.191 180.016 520.836 180.367 cv
520.48 180.723 520.305 181.121 520.305 181.57 cv
520.305 182.094 520.539 182.551 521.008 182.949 cv
521.48 183.348 522.176 183.543 523.102 183.543 cv
524.344 183.543 525.312 183.285 526.008 182.762 cv
526.512 182.371 526.766 181.902 526.766 181.355 cv
526.766 181.078 526.699 180.758 526.57 180.391 cv
526.438 180.02 526.258 179.691 526.027 179.402 cv
f
505.562 96.004 mo
512.777 96.004 li
@
521.148 104.262 mo
519.738 101.355 li
519.738 101.074 li
529.82 101.074 li
530.484 101.074 530.902 101.047 531.066 100.988 cv
531.234 100.93 531.359 100.816 531.449 100.641 cv
531.535 100.469 531.586 100.113 531.598 99.578 cv
531.926 99.578 li
531.926 104.066 li
531.598 104.066 li
531.586 103.504 531.535 103.137 531.449 102.973 cv
531.359 102.805 531.246 102.688 531.102 102.625 cv
530.957 102.559 530.531 102.527 529.82 102.527 cv
523.383 102.527 li
522.5 102.527 521.938 102.555 521.691 102.613 cv
521.504 102.656 521.367 102.734 521.281 102.844 cv
521.191 102.949 521.148 103.082 521.148 103.242 cv
521.148 103.461 521.242 103.758 521.43 104.133 cv
cp
530.211 95.113 mo
530.211 94.84 530.309 94.605 530.504 94.418 cv
530.699 94.23 530.926 94.137 531.188 94.137 cv
531.461 94.137 531.695 94.23 531.879 94.418 cv
532.07 94.605 532.164 94.84 532.164 95.113 cv
532.164 95.387 532.07 95.617 531.879 95.805 cv
531.695 95.992 531.461 96.09 531.188 96.09 cv
530.914 96.09 530.68 95.992 530.492 95.805 cv
530.305 95.617 530.211 95.387 530.211 95.113 cv
cp
526.027 92.207 mo
524.668 92.207 523.496 92 522.504 91.59 cv
521.516 91.18 520.781 90.633 520.305 89.953 cv
519.93 89.418 519.738 88.867 519.738 88.305 cv
519.738 87.395 520.203 86.578 521.129 85.855 cv
522.285 84.945 523.852 84.488 525.832 84.488 cv
527.219 84.488 528.398 84.688 529.367 85.086 cv
530.336 85.484 531.039 85.992 531.48 86.613 cv
531.922 87.234 532.141 87.828 532.141 88.395 cv
532.141 89.535 531.469 90.488 530.125 91.254 cv
528.984 91.891 527.617 92.207 526.027 92.207 cv
cp
526.246 90.473 mo
527.891 90.473 529.234 90.27 530.277 89.867 cv
531.145 89.535 531.578 89.035 531.578 88.371 cv
531.578 88.051 531.438 87.723 531.156 87.383 cv
530.875 87.043 530.391 86.785 529.715 86.613 cv
528.715 86.34 527.293 86.203 525.441 86.203 cv
524.086 86.203 522.949 86.348 522.039 86.637 cv
521.359 86.84 520.883 87.113 520.605 87.461 cv
520.422 87.691 520.324 87.98 520.324 88.328 cv
520.324 88.719 520.5 89.07 520.848 89.391 cv
521.336 89.809 522.105 90.094 523.156 90.246 cv
524.203 90.398 525.234 90.473 526.246 90.473 cv
f
25.496 571.199 mo
25.496 574.805 li
@
89.504 571.199 mo
89.504 574.805 li
@
153.512 571.199 mo
153.512 574.805 li
@
217.52 571.199 mo
217.52 574.805 li
@
281.531 571.199 mo
281.531 574.805 li
@
345.539 571.199 mo
345.539 574.805 li
@
409.551 571.199 mo
409.551 574.805 li
@
473.559 571.199 mo
473.559 574.805 li
@
505.562 571.199 mo
25.496 571.199 li
@
264.484 615.25 mo
264.785 614.961 265.098 614.746 265.414 614.602 cv
265.617 614.484 266.168 614.312 267.062 614.082 cv
265.914 613.301 li
265.625 613.098 265.355 612.848 265.102 612.551 cv
264.848 612.254 264.672 612 264.57 611.781 cv
264.512 611.637 264.484 611.48 264.484 611.305 cv
264.484 611.059 264.551 610.859 264.691 610.711 cv
264.828 610.559 264.988 610.48 265.18 610.48 cv
265.41 610.48 265.566 610.523 265.652 610.613 cv
265.797 610.77 265.871 610.957 265.871 611.176 cv
265.871 611.305 265.844 611.434 265.785 611.566 cv
265.699 611.84 265.652 612.027 265.652 612.129 cv
265.652 612.273 265.734 612.441 265.895 612.629 cv
266.195 612.988 266.789 613.422 267.672 613.93 cv
270.684 613.215 li
271.148 613.098 271.426 613.004 271.52 612.93 cv
271.613 612.859 271.66 612.781 271.66 612.691 cv
271.66 612.578 271.594 612.434 271.465 612.258 cv
271.191 611.941 270.836 611.668 270.402 611.434 cv
270.555 611.133 li
271.246 611.508 271.824 611.977 272.289 612.543 cv
272.547 612.859 272.68 613.133 272.68 613.363 cv
272.68 613.699 272.488 613.957 272.117 614.145 cv
271.883 614.277 270.902 614.527 269.168 614.902 cv
270.758 615.828 271.777 616.566 272.223 617.117 cv
272.527 617.477 272.68 617.824 272.68 618.156 cv
272.68 618.387 272.59 618.605 272.418 618.805 cv
272.289 618.938 272.117 619 271.898 619 cv
271.711 619 271.551 618.938 271.422 618.805 cv
271.293 618.676 271.227 618.516 271.227 618.328 cv
271.227 618.141 271.32 617.945 271.508 617.746 cv
271.637 617.586 271.703 617.461 271.703 617.375 cv
271.703 617.316 271.66 617.23 271.574 617.117 cv
271.34 616.84 270.855 616.465 270.121 615.988 cv
269.383 615.512 268.848 615.199 268.516 615.055 cv
267.086 615.418 266.336 615.613 266.262 615.641 cv
265.871 615.77 265.598 615.945 265.438 616.16 cv
265.277 616.379 265.199 616.703 265.199 617.137 cv
265.199 617.266 265.207 617.418 265.223 617.594 cv
264.895 617.594 li
cp
272.461 604.145 mo
272.461 610.086 li
272.137 610.086 li
269.477 607.051 267.398 605.047 265.895 604.078 cv
265.199 603.633 264.461 603.406 263.68 603.406 cv
263.074 603.406 262.578 603.594 262.195 603.973 cv
261.812 604.348 261.621 604.832 261.621 605.426 cv
261.621 606.246 262.02 606.926 262.812 607.461 cv
262.66 607.789 li
261.91 607.484 261.328 607.043 260.906 606.465 cv
260.488 605.887 260.277 605.266 260.277 604.602 cv
260.277 603.836 260.539 603.195 261.059 602.68 cv
261.578 602.168 262.207 601.91 262.945 601.91 cv
263.465 601.91 263.941 602.008 264.375 602.195 cv
265.066 602.469 265.836 602.98 266.676 603.734 cv
267.988 604.891 269.492 606.43 271.184 608.352 cv
271.184 605.359 li
271.184 604.883 271.082 604.484 270.879 604.168 cv
270.676 603.848 270.41 603.625 270.078 603.496 cv
270.078 603.148 li
272.461 604.145 li
f
505.562 571.199 mo
505.562 578.414 li
@
506.602 587.199 mo
505.242 587.199 504.07 586.992 503.078 586.578 cv
502.09 586.168 501.355 585.621 500.879 584.941 cv
500.504 584.406 500.316 583.859 500.316 583.297 cv
500.316 582.383 500.777 581.566 501.703 580.844 cv
502.859 579.934 504.426 579.48 506.406 579.48 cv
507.797 579.48 508.973 579.68 509.941 580.074 cv
510.91 580.473 511.613 580.984 512.055 581.605 cv
512.496 582.227 512.715 582.816 512.715 583.383 cv
512.715 584.523 512.043 585.477 510.699 586.242 cv
509.559 586.879 508.191 587.199 506.602 587.199 cv
cp
506.82 585.465 mo
508.465 585.465 509.812 585.262 510.852 584.855 cv
511.719 584.523 512.152 584.023 512.152 583.359 cv
512.152 583.043 512.012 582.715 511.73 582.375 cv
511.449 582.035 510.969 581.777 510.289 581.605 cv
509.289 581.328 507.867 581.191 506.02 581.191 cv
504.66 581.191 503.523 581.336 502.613 581.625 cv
501.934 581.828 501.457 582.102 501.184 582.449 cv
500.996 582.68 500.902 582.969 500.902 583.316 cv
500.902 583.707 501.074 584.062 501.422 584.379 cv
501.914 584.797 502.684 585.082 503.73 585.234 cv
504.777 585.387 505.809 585.465 506.82 585.465 cv
f
441.555 571.199 mo
441.555 578.414 li
@
436.512 585.723 mo
435.102 582.816 li
435.102 582.535 li
445.184 582.535 li
445.848 582.535 446.266 582.508 446.43 582.449 cv
446.598 582.391 446.723 582.277 446.809 582.102 cv
446.895 581.93 446.949 581.574 446.961 581.039 cv
447.289 581.039 li
447.289 585.527 li
446.961 585.527 li
446.949 584.965 446.895 584.598 446.809 584.434 cv
446.723 584.266 446.605 584.152 446.465 584.086 cv
446.32 584.02 445.891 583.988 445.184 583.988 cv
438.746 583.988 li
437.863 583.988 437.301 584.02 437.055 584.074 cv
436.867 584.117 436.73 584.195 436.645 584.305 cv
436.555 584.41 436.512 584.547 436.512 584.703 cv
436.512 584.922 436.605 585.219 436.793 585.594 cv
436.512 585.723 li
f
377.543 571.199 mo
377.543 578.414 li
@
381.164 579.59 mo
383.461 580.41 li
383.461 587.457 li
383.137 587.457 li
381.242 585.391 379.695 583.934 378.496 583.09 cv
377.297 582.242 376.207 581.82 375.223 581.82 cv
374.457 581.82 373.832 582.051 373.348 582.516 cv
372.863 582.977 372.621 583.535 372.621 584.184 cv
372.621 584.762 372.793 585.285 373.133 585.754 cv
373.473 586.227 373.973 586.57 374.637 586.785 cv
374.637 587.109 li
373.555 586.965 372.723 586.59 372.145 585.984 cv
371.566 585.375 371.277 584.617 371.277 583.707 cv
371.277 582.738 371.59 581.93 372.211 581.277 cv
372.832 580.629 373.562 580.305 374.398 580.305 cv
375.008 580.305 375.613 580.449 376.223 580.738 cv
377.176 581.172 378.18 581.871 379.234 582.84 cv
380.84 584.301 381.809 585.219 382.141 585.594 cv
382.141 582.473 li
382.141 581.836 382.113 581.391 382.062 581.137 cv
382.012 580.887 381.918 580.652 381.77 580.445 cv
381.629 580.234 381.426 580.059 381.164 579.914 cv
381.164 579.59 li
f
313.535 571.199 mo
313.535 578.414 li
@
309.969 586.938 mo
309.156 586.59 308.539 586.156 308.102 585.637 cv
307.672 585.117 307.453 584.473 307.453 583.707 cv
307.453 582.738 307.762 582 308.387 581.496 cv
308.848 581.105 309.34 580.91 309.859 580.91 cv
310.742 580.91 311.645 581.461 312.57 582.559 cv
312.859 581.82 313.27 581.266 313.805 580.891 cv
314.34 580.512 314.969 580.324 315.691 580.324 cv
316.719 580.324 317.605 580.656 318.359 581.324 cv
319.355 582.176 319.855 583.41 319.855 585.031 cv
319.855 585.84 319.754 586.387 319.551 586.676 cv
319.348 586.965 319.133 587.109 318.898 587.109 cv
318.727 587.109 318.578 587.043 318.453 586.906 cv
318.332 586.766 318.27 586.605 318.27 586.418 cv
318.27 586.273 318.293 586.121 318.336 585.961 cv
318.363 585.859 318.469 585.633 318.652 585.277 cv
318.832 584.926 318.945 584.684 318.988 584.551 cv
319.043 584.336 319.074 584.105 319.074 583.859 cv
319.074 583.266 318.844 582.746 318.379 582.297 cv
317.918 581.852 317.367 581.625 316.73 581.625 cv
316.27 581.625 315.82 581.727 315.387 581.93 cv
315.055 582.09 314.801 582.262 314.629 582.449 cv
314.398 582.695 314.188 583.039 314 583.48 cv
313.812 583.922 313.719 584.371 313.719 584.836 cv
313.719 585.117 li
313.438 585.117 li
313.379 584.652 313.211 584.188 312.938 583.719 cv
312.664 583.25 312.336 582.91 311.949 582.699 cv
311.566 582.488 311.141 582.383 310.66 582.383 cv
310.07 582.383 309.586 582.574 309.211 582.949 cv
308.832 583.324 308.645 583.793 308.645 584.359 cv
308.645 585.27 309.129 586.027 310.098 586.633 cv
309.969 586.938 li
f
249.527 571.199 mo
249.527 578.414 li
@
251.41 579.457 mo
252.668 579.457 li
252.668 581.062 li
255.812 581.062 li
255.812 582.516 li
252.668 582.516 li
252.668 587.566 li
251.539 587.566 li
243.629 582.016 li
243.629 581.062 li
251.41 581.062 li
cp
251.41 582.516 mo
245.469 582.516 li
251.41 586.699 li
251.41 582.516 li
f
185.52 571.199 mo
185.52 578.414 li
@
180.043 580.023 mo
181.535 580.715 li
181.535 584.293 li
183.141 585.074 li
183.371 583.527 183.949 582.297 184.879 581.387 cv
185.672 580.605 186.609 580.219 187.695 580.219 cv
188.328 580.219 188.918 580.344 189.449 580.598 cv
189.984 580.848 190.441 581.172 190.816 581.562 cv
191.191 581.949 191.488 582.383 191.703 582.863 cv
192.039 583.527 192.203 584.219 192.203 584.941 cv
192.203 585.652 192.078 586.168 191.836 586.492 cv
191.59 586.816 191.32 586.98 191.031 586.98 cv
190.859 586.98 190.711 586.914 190.59 586.773 cv
190.465 586.637 190.402 586.469 190.402 586.266 cv
190.402 586.121 190.426 585.992 190.469 585.875 cv
190.512 585.758 190.637 585.562 190.836 585.289 cv
191.141 584.844 191.293 584.395 191.293 583.945 cv
191.293 583.25 191.031 582.648 190.512 582.137 cv
189.992 581.621 189.355 581.367 188.605 581.367 cv
187.883 581.367 187.211 581.598 186.59 582.059 cv
185.969 582.523 185.484 583.156 185.137 583.969 cv
184.879 584.617 184.723 585.492 184.68 586.59 cv
180.043 584.293 li
180.043 580.023 li
f
121.508 571.199 mo
121.508 578.414 li
@
115.98 579.762 mo
116.305 579.762 li
116.375 580.543 116.527 581.18 116.758 581.668 cv
116.988 582.16 117.344 582.645 117.82 583.121 cv
118.297 583.598 118.828 583.992 119.414 584.305 cv
120 584.613 120.691 584.879 121.484 585.094 cv
120.906 584.242 120.617 583.391 120.617 582.535 cv
120.617 581.727 120.945 581.023 121.605 580.422 cv
122.262 579.824 123.109 579.523 124.152 579.523 cv
125.148 579.523 126.059 579.828 126.883 580.434 cv
127.879 581.156 128.379 582.117 128.379 583.316 cv
128.379 584.141 128.105 584.836 127.555 585.398 cv
126.516 586.512 125.156 587.066 123.48 587.066 cv
122.41 587.066 121.395 586.855 120.434 586.43 cv
119.473 586 118.617 585.391 117.863 584.598 cv
117.113 583.801 116.609 583.039 116.359 582.309 cv
116.105 581.578 115.98 580.902 115.98 580.281 cv
cp
122.137 585.246 mo
122.93 585.348 123.574 585.398 124.066 585.398 cv
124.629 585.398 125.238 585.293 125.898 585.082 cv
126.555 584.875 127.078 584.566 127.469 584.164 cv
127.742 583.859 127.879 583.492 127.879 583.059 cv
127.879 582.551 127.641 582.094 127.152 581.691 cv
126.672 581.285 125.988 581.082 125.105 581.082 cv
124.094 581.082 123.223 581.285 122.492 581.691 cv
121.762 582.094 121.398 582.66 121.398 583.383 cv
121.398 583.613 121.445 583.855 121.539 584.109 cv
121.633 584.359 121.832 584.742 122.137 585.246 cv
f
57.5 571.199 mo
57.5 578.414 li
@
52.391 586.027 mo
52.391 579.633 li
52.738 579.633 li
64.574 583.621 li
64.574 584.598 li
53.824 581.039 li
53.824 584.312 li
53.824 584.98 53.902 585.449 54.062 585.723 cv
54.336 586.23 54.754 586.625 55.32 586.914 cv
55.23 587.176 li
52.391 586.027 li
f
gsave
0 0 mo
568 0 li
568 632 li
0 632 li
cp
clp
.8 lw
0 lj
4 ml
136.562 12.4301 mo
140.402 94.246 li
@
140.028 86.2577 mo
136.68 83.2107 li
140.402 94.2457 li
143.075 82.9097 li
cp
ef
140.028 86.2577 mo
136.68 83.2107 li
140.402 94.2457 li
143.075 82.9097 li
cp
.799121 lw
gsave
[-.0469059 -1 1 -.0469059 0 0 ]ct
@
grestore newpath
.8 lw
216 12.27 mo
220 96.586 li
@
219.622 88.5936 mo
216.273 85.5513 li
220 96.5856 li
222.664 85.246 li
cp
ef
219.622 88.5935 mo
216.273 85.5512 li
220 96.5856 li
222.664 85.246 li
cp
.799101 lw
gsave
[-.0474397 -1 1 -.0474397 0 0 ]ct
@
grestore newpath
.8 lw
429.09 12.246 mo
452.355 96.246 li
@
450.219 88.5394 mo
446.281 86.3082 li
452.355 96.2458 li
452.449 84.6013 li
cp
ef
450.219 88.5393 mo
446.281 86.3082 li
452.355 96.2458 li
452.449 84.6012 li
cp
.770979 lw
gsave
[-.276951 -1 1 -.276951 0 0 ]ct
@
grestore newpath
.8 lw
466.91 12.246 mo
463.598 95.781 li
@
463.914 87.789 mo
460.844 84.4653 li
463.598 95.781 li
467.238 84.7187 li
cp
ef
463.914 87.7889 mo
460.844 84.4652 li
463.598 95.7809 li
467.238 84.7187 li
cp
.799372 lw
gsave
[.0396368 -1 1 .0396368 0 0 ]ct
@
grestore newpath
.8 lw
504.562 11.996 mo
472.434 96.586 li
@
475.273 89.1058 mo
473.418 84.9807 li
472.434 96.5865 li
479.402 87.2504 li
cp
ef
475.273 89.1058 mo
473.418 84.9806 li
472.434 96.5865 li
479.402 87.2503 li
cp
.747863 lw
gsave
[.379854 -1 1 .379854 0 0 ]ct
@
grestore newpath
136.562 1.52301 mo
142.59 1.52301 147.473 6.40601 147.473 12.4301 cv
147.473 18.457 142.59 23.34 136.562 23.34 cv
130.539 23.34 125.656 18.457 125.656 12.4301 cv
125.656 6.40601 130.539 1.52301 136.562 1.52301 cv
cp
0 .00579843 .00103761 0 cmyk
f
2.18182 lw
136.562 1.52301 mo
142.59 1.52301 147.473 6.40601 147.473 12.4301 cv
147.473 18.457 142.59 23.34 136.562 23.34 cv
130.539 23.34 125.656 18.457 125.656 12.4301 cv
125.656 6.40601 130.539 1.52301 136.562 1.52301 cv
cp
.75021 .679683 .670222 .90164 cmyk
@
%ADOBeginSubsetFont: DLGQMX+TimesNewRomanPSMT Initial
ct_T42Dict begin
-0.566 -0.305 2 1.004
 256 array 0 1 255 {1 index exch /.notdef put} for  /DLGQMX+TimesNewRomanPSMT
Type42DictBegin
[<00010000000a000a000a000a63767420fe30def0000000ac000007da6670
676dc3a61d010000088800000631676c7966d852322400001ecc00000c90
68656164db396bb800000ebc000000366868656112ef092e00000ef40000
0024686d7478271003cb00000f18000000246c6f6361000042b400000f3c
000000286d61787006dd06ad00000f64000000207072657039e6c80d0000
0f8400000f4567646972000000000000000000000000058e0000054c001f
054c001c0394001b0000ffe10000ffe40000ffe8fe4afffc056b0023fe6a
ffe00313000000ad000000ad0000000000250096009f002400f0013100c2
00c0004a00a6004100500094004700cf00af000e007901cb000400230044
00a80025011f0002004600170105009900d9005c007200e500e00028004b
00de011200240045007000160039ffe90016004b0088ffb900d9000a0043
00ae00ba016c0153002f00430048022c012b0025008fffc000170028ffcd
ffd80025009d00e50124ffb10048009d00e600110027007f00910012006a
00cafffc00000024006200a7017c01e900210060008b0434048aff6b003b
00b500d5014bff6b004d007905d809b5006c009100a3011701c0ffdfffe7
00be04010065007f00820088009900b200c0022e034305a000200026003d
004e00610065007b00d9011301310340ff27ff42ff99004e00a700f2022b
02c603070011002b0049005f008d00a100af00d600e400f5010b0135019d
01ab01ab01d101ee05d80000004b0075007a0080009d00a600a700ac00b9
013101310217021700020017002900550080008f00a500b200b300d0014b
015901c001c103a50530fe3fff14ff15ffe7ffff002a00580099009f00c1
00e400f40130015901ab01ab03220374041e04740532fd81004d0064009c
00d000d100d600de00e500f500f8012a012a01e1027e027fff57ffa8ffe5
00000008001f00380051005a006f0076007700a200c000c200c400f101fb
0209027e02cf04c5057a05f0ff92001200260042004b004f005100530064
008b00ae00b200b800b800d600f50111012001310138014e01520167018f
019601b801d901d902060221027102ea03b003cb03dc04360505ff3a0012
0016001e001f002300570068006c007e0088009200a500a800c500c90115
0126012d013001d601d901f6023b0244024402a302cf02de0385038f04fc
0586fee0feebfefbff8a0007004400470058007500aa00e400ef01160120
0129016a017301e3027e029002b4030e0310032303350341035403590388
039403c803ce047204ab04da0549056105ab0761fe6efed1ff4bff840000
00010006001e0027002c0034003700620066006a006b006c007000700072
007c0081008a008e0091009200a000ab00b800bf00c900d500dd00ec00f4
0100012101300169016a016d017c0185018e018e019901ac01c101c501c9
01e101f601f601f60222022202280236023f024302460267028502850294
02d002d602e8031c0363037f03800380039e03b603d90400040404ff0532
05320548058b05a706cb07280748076208ccfcedfd2afd59fddefe00fe1a
fe5bfe96fec1fee7ff56ff7900010025002d002e007c00870091009900a1
00a500a500aa00af00b600c600cc00d700dd00ec00f20102010501170118
0123012a012c0131013f014701490149014d01510151015501550157015a
015a0161016201680168017f0180018201830184018d0195019501950198
019901a501a901b601b601b701ba01ba01d501df01e601ea01f202000200
0203021702250227022f0239024302430247024f025202520267026f026f
027002720276027e02a702b302b902d603130325032d03610371039903ae
03c203d403f90402042c042f043c04560467048304cf04d104d804fb051f
05450568059e05c2061b06340655066a069806af06e806fc070607500762
077c07d407ff082500ad00c700aa00b5000000000000000000000000002f
06cf01730514047802df009c0018037005870155002500060254036c038e
03d2056601f0032001da018a0369036bffa3034602f8036f015602bf0122
031f053a0366008c00ff01ab02e102f402e70415015402e90128049101b7
026f034302060000000005d30415048305e8000002d7003a027d01c002c5
03830383ffbd003a059e01df059e02d1002004e0021300df01c001870297
000000ce0269028b0058043405fb0069015a01a905780182013e0288012a
03d4049e00e5032302f301f00196007a00cd014a0424025e023901ab00cf
00fd011e00ed017100700195004001bb01dd01b8000101a803a7014c020c
018d01b0020d0137010000cd032101d4030a005900000000012602150150
02f0025503bc06d00335010100d000d2007a01030130007c000000000000
000000fe006e006600940227002b0045004d00d3013200180097004100f4
febcffe9001605d8058b009100a1032c00520030005d02cb003a009200e5
00e500580086003200ba0099008800300298007cff8001640028004d0065
000200b8016a002f010b001100170100007f00040016022200a6005f0000
00f8000a00ca0043004b01ee0077012000f401c00028045f0000008c0445
00c20060007b008b008b0064005d00c2009c009206b505d3004f01170000
0420fe9e00cc00dc005e004600e30032001a003c0091005a00a1042c0041
002000490071009c009cfe4800400040008600cb0102007d003a003e006a
0050044800290096ff6a0097006900e0004c001b00c90069ff970043ffbd
0052ff83ff8b005fffa1ff5c00670053ffa8002a0076ffb2003600870559
0256052b043400de00c901c4004800db018b00b3004800da011601250118
00ea00ea00ae0000003e05bb008a04d70053003fff8cffd5001500280022
00990062004a00e4006d00ee00e5004803c00033fe4e02b1ff4603700079
05df0051ffa7ff1f010a0068ff6c004f00bc00a5070500ab0080001e05a5
0025008b04660230006900290016012f0080005c059f000040425554403f
3e3d3c3b3a393837363534333231302f2e2d2c2b2a292827262524232221
201f1e1d1c1b1a1918171614131211100f0e0d0c0b0a0908070605040302
01002c4523466020b02660b004262348482d2c452346236120b02661b004
262348482d2c45234660b0206120b04660b004262348482d2c4523462361
b0206020b02661b02061b004262348482d2c45234660b0406120b06660b0
04262348482d2c4523462361b0406020b02661b04061b004262348482d2c
0110203c003c2d2c20452320b0cd442320b8015a51582320b08d44235920
b0ed51582320b04d44235920b09051582320b00d44235921212d2c202045
18684420b001602045b04676688a4560442d2c01b10b0a432343650a2d2c
00b10a0b4323430b2d2c00b0172370b101173e01b0172370b10217453ab1
0200080d2d2c45b01a234445b01923442d2c2045b00325456164b0505158
45441b2121592d2cb00143632362b0002342b00f2b2d2c2045b000436044
2d2c01b00643b00743650a2d2c2069b04061b0008b20b12cc08a8cb81000
62602b0c642364615c58b00361592d2c45b0112bb0172344b0177ae4182d
2c45b0112bb01723442d2cb01243588745b0112bb0172344b0177ae41b03
8a45186920b01723448a8a8720b0a05158b0112bb0172344b0177ae41b21
b0177ae45959182d2cb0022546608a46b040618c482d2c4b53205c58b002
855958b00185592d2c20b0032545b019234445b01a23444565234520b003
25606a20b009234223688a6a606120b01a8ab000527921b21a1a40b9ffe0
001a45208a54582321b03f1b235961441cb114008a5279b3194020194520
8a54582321b03f1b235961442d2cb110114323430b2d2cb10e0f4323430b
2d2cb10c0d4323430b2d2cb10c0d432343650b2d2cb10e0f432343650b2d
2cb11011432343650b2d2c4b525845441b2121592d2c0120b003252349b0
4060b0206320b000525823b002253823b002256538008a63381b21212121
2159012d2c4bb06451584569b00943608a103a1b212110592d2c01b00525
1023208af500b0016023edec2d2c01b005251023208af500b0016123edec
2d2c01b0062510f500edec2d2c20b001600110203c003c2d2c20b0016101
10203c003c2d2cb02b2bb02a2a2d2c00b00743b006430b2d2c3eb02a2a2d
2c352d2c76b802b023701020b802b04520b0005058b00161593a2f182d2c
21210c6423648bb84000622d2c21b08051580c6423648bb82000621bb200
402f2b59b002602d2c21b0c051580c6423648bb81555621bb200802f2b59
b002602d2c0c6423648bb84000626023212d2cb4000100000015b00826b0
0826b00826b008260f10161345683ab001162d2cb4000100000015b00826
b00826b00826b008260f1016134568653ab001162d2c4b53234b515a5820
458a60441b2121592d2c4b545820458a60441b2121592d2c4b53234b515a
58381b2121592d2c4b5458381b2121592d2c014b53234b515ab00225b004
25b006254923451869525a58b00225b00225b00525462345696048592121
212d2cb0134358031b02592d2cb0134358021b03592d2c4b54b012435c5a
58381b2121592d2cb012435c580cb00425b00425060c6423646164b80708
5158b00425b00425012046b01060482046b0106048590a21211b2121592d
2cb012435c580cb00425b00425060c6423646164b807085158b00425b004
25012046b8fff060482046b8fff06048590a21211b2121592d2c4b53234b
515a58b03a2b1b2121592d2c4b53234b515a58b03b2b1b2121592d2c4b53
234b515ab012435c5a58381b2121592d2c0c8a034b54b00426024b545a8a
8a0ab012435c5a58381b2121592d2c462346608a8a462320468a608a61b8
ff8062232010238ab9035803588a70456020b0005058b00161b8ffba8b1b
b0468c59b0106068013a2d2cb1020042b123018851b1400188535a58b910
000020885458b202010243604259b12401885158b920000040885458b202
0202436042b12401885458b2022002436042004b014b5258b20208024360
42591bb940000080885458b202040243604259b94000008063b801008854
58b202080243604259b94000010063b80200885458b202100243604259b9
4000020063b80400885458b202400243604259595959592d2cb002435458
4b53234b515a58381b2121591b21212121592d0000000001000000050ccd
b8bf26855f0f3cf50819080000000000a2e31dc200000000c5b1f690fb74
fd8c1000080e000000090001000100000000000100000721fe4500571000
fb74fadf10000001000000000000000000000000000000090639011c0473
0080040000f00400002c04000053040000200400006203e1001904830025
0000000000000078000003740000045800000628000008080000091c0000
0aa800000bec00000c9000010000000900f2003c009d000700020010002f
00560000062504eb00050002b9005403ecb3032a1f3f411503e4006003e9
009f03e500df03e50004001003e4001003e5003f03e5007003e400ff03e4
0005ffc003e1b345453240b803e1b32b2e3240b803e1b2282932b9ffc003
e1b21a1c32bd03e102ac0027001fffc003dfb2161b32b9ffc003deb24242
32b9ffc003deb2363832b9ffc003deb32a2d32df410a03de00ef03de0002
03de03df0028001fffc003dfb3282e32f0410d03df0001037e000f010100
1f00a003dd00b003dd0002004003dab32426329fbf03cc000103ca03c900
64001fffc003c9b20d1132410a03c703b70012001f03b603b50064001fff
c003b5b30e1132004173038d000100c0038d00d0038d00e0038d00f0038d
0004006f03a7007f03a7008f03a700af03a70004000f03a7001f03a7002f
03a7004f03a7000403ab03ab00ef03a50001000f03a5002f03a5006f03a5
008f03a50004005403aa0001006b03aa000103a8036a0022001f038c0394
0015001f038b03930015001f03a40393001a001f03a20394001e001f03a1
0393001e001f039f0394001e001f039b0394001a001f039a0393001e001f
039903940016001f039803940016001f03970393001b001f03960394001b
001f03950393001b001f03760375001a001f03740375001a001f03a00373
b21e1f10411e039300200393003003930003002003940030039400400394
00030000039400010383036c001e001f03b1036c0032001f036d036c0032
001fffc0037db2212332b9ffc0037db3171932a0410a037d00b0037d00c0
037d00d0037d0004ffc0037cb2212332b9ffc0037cb3171932a0412d037c
00b0037c00c0037c00d0037c000400300373004003730002000003730010
037300200373000300e0037300f00373000200b0037300c0037300d00373
0003008403730090037300a0037300030377036a0029001f0389036ab228
1f40b80367b33940323fbb0366000100400366b3191d328fbb0366000100
400366b3090a3240b80366b3090e3240b80366b3090f323fbb0365000100
400365b3090c3240b80365b31a1d3240b80365b3090e326b410e0363007b
036300020014036300240363003403630044036300040363b2242f1fba03
4e006d0800400e1f7f027f037f047f050430440112bf033200500800001f
0012032d003c080040291f5f3c0137600970098009031009200930094009
5009056f037f038f03031f032f033f034f035f0305b8ffc0b2073a33b8ff
c04047063a33900ba00bb00bc00bd00b05b006c006d006e006f006052006
3006400650066006700680069006a006099006900702600b700b800b0310
0b200b300b400b500b051f0701a041850362000100000362001003620070
036200900362000400f0035f00010020035e0020035f0030035f0040035e
00040000035e0000035f0010035f00d0035e00e0035f00050010030f0020
030f0030030f00d0030f00e0030f00050000030f0010030f0050030f0060
030f0070030f00d0030f00060000030f0010030f0020030f0030030f00e0
030f00f0030f0006030f00270000030e0030030e000200e0030e00f0030e
0002030e004a00e0030d00f0030d0002030d002700d002fc0001001002fc
002002fc005002fc000300d002fc00e002fc0002000002fc001002fc0020
02fc003002fc005002fc006002fc000600e002fc00f002fc0002002002fc
003002fc004002fc000302fc406127c02901b02901a02901902901403c3f
413240223f41321212125f235f255f285fa5046f236f256f286fa5044f23
4f254f284fa5043f233f253f283fa5042f232f252f282fa5041f231f251f
281fa5048f4caf4cbf4ccf4c045f4c6f4c7f4c0337b8ffc0b3b22b3032b8
ffc0b3b2222532b8ffc0b5b2191a32370f413b02af0001005f02af009f02
af00df02af0003001f02af002f02af003f02af006f02af000402af02af00
1f02ad002f02ad003f02ad004f02ad005f02ad000500df02ad0001000f02
ad001f02ad003f02ad005f02ad009f02ad0005005f02ad00df02ad000200
0f02ad001f02ad003f02ad0003004002acb23a334f414a02ac005f02ac00
9f02ac0003002f02ac003f02ac0002000f02ac003f02ac00af02ac000300
b002ac00e002ac0002004f02ac005f02ac00a002ac0003001f02ac002f02
ac003f02ac0003000f035a0001000f035a001f035a003f035a005f035a00
70035a000500cf035700df03570002000f0357001f03570070035700af03
570004035a035a0357035702ad02ad02ac02ac032c400d31151f00161600
0000121108104110020c004a000d01a8004a000d0198004a000d0189004a
000d013f004a000d0124400e4a0df64a0dbe4a0d864a0d274a0dbe022800
41000d01940041000d0121400b410db4410d4f410d29410d411002170021
000d02150021000d02060021000d01eb0021000d014e0021000d012c4014
210df9210df3210df1210d9d210d71210d3d210d4110021c001f000d0214
001f000d020b001f000d0196001f000d014a001f000d0126400b1f0dc61f
0d571f0d371f0d410d019e0141000d00420141000d001e0141000d001b01
41000d01f2b40f440f0009bb01f20044000d0201b23c291fb80200b23c29
1fb801ffb23c411fb801feb23c471fb801fdb23c9e1fb801fab23c931fbc
01f9010f0101001f01f6b224e41f411501f401490401001f01f301490401
001f01f1014900ab001f01f001490067001f01a6003c0125001f01a4b23c
811f411501a3010f019a001f01a200220801001f01a100500401001f019f
0149019a001f019d01490067001f019cb22c621fb8019bb22c791fbc019a
002c0101001f0197b22ce41fb80193b22c891fb80192b22c6c1fb8018fb2
259e1fb8016ab23c2a1f4111016700240201001f0163002502ab001f014c
010f019a001f01480149006c001f0147b22c891fb80145b22c9e1fb80144
b22c791fb80143b223311fb80127b23c811fbc012300500101001f011fb2
23e41f4115011d0023019a001f011c00230801001f011b00250801001f01
0e010f0401001f010d00220401001f0108b223811fb80106b425e41ff73c
bb0125001f00f5010fb29e1fe3bc01490156001f00e20149b2ab1fd1b901
490401b21fcf2cb80125b61fce23bb1fc524b80156b21fc02cb80801b21f
bf2cb80201b51fb124e41fb0b901490201b61faf2c671fad23b80801b21f
a523b80201400b1f9f3c2d1f9b235a1f9925b80201b21f812cbc0401001f
006d010f0156400b1f592c3e1f4c3cab1f4625b80101b21f403cb8012540
0a1f3a23721f393cab1f38b80149b3ab1f3124b80401b21f3025b802abb6
1f2a24e41f2623b80156b21f5537ba023500070175402c07740762075607
51073b0733072d0720071d071c071408120810080e080c080a0808080608
04080208000814b8ffe0402b000001001406100000010006040000010004
10000001001002000001000200000001000002010802004a00b013034b02
4b534201b0124b004b5442b0372b4bb807ff52b0382b4bb008505b58b101
018e59b0382bb00288b801005458b801ffb101018e851bb0124358b90001
012f858d1bb90001017c858d5959014bb0c063004b6220b0f65323b8010a
515ab0052342180016763f183f123e113946443e113946443e113946443e
113946443e11394660443e11394660442b2b2b2b2b2b2b2b2b2b2b182b2b
2b2b2b2b2b2b2b2b2b2b2b181db0964b5358b0aa1d59b0324b5358b0ff1d
594bb04753205c58b90271026f4544b90270026f45445958b9017a027145
5258b90271017a4459594bb04753205c58b9002202704544b9003c027045
445958b901b30022455258b9002201b34459594bb04c53205c58b9014900
224544b1222245445958b901c20149455258b9014901c24459594bb06753
205c58b9002402714544b90050027145445958b9021e0024455258b90024
021e4459594bb8020153205c58b9010f00224544b1222245445958b90c00
010f455258b9010f0c004459594bb01c53205c58b125254544b12c254544
5958b13725455258b125374459594bb0ab53205c58b125254544b1232545
445958b901590025455258b9002501594459594bb8010153205c58b12525
4544b1282545445958b902080025455258b9002502084459592b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b65422b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b01b361
dc6463456523456023456560234560b08b766818b080622020b164dc4565
234520b003266062636820b003266165b0dc236544b064234420b1616345
65234520b003266062636820b003266165b063236544b0612344b1006345
5458b163406544b26140614523614459b3a67f434b456523456023456560
234560b089766818b080622020b1437f4565234520b003266062636820b0
03266165b07f236544b043234420b1a64b4565234520b003266062636820
b003266165b04b236544b0a62344b1004b455458b14b406544b2a640a645
236144594b5242014b5058b108004259435c58b108004259b3020b0a1243
58601b2159421610703eb0124358b93b21187e1bba040001a8000b2b59b0
0c2342b00d2342b0124358b92d412d411bba04000400000b2b59b00e2342
b00f2342b0124358b9187e3b211bba01a80400000b2b59b0102342b01123
42002b0018456944456944456944456944737373747373737475752b7373
747475184569447373742b4bb021534bb046515a58b03cb03c45b0406044
59012b2b2b2b757575757575757543584010bf3ccf3c026f3c7f3c8f3c9f
3caf3c0575755943584012bf22cf22025f226f227f228f229f22af220675
7559435c58b6403c9f22ef220375592b2b01747474744544737374747575
454473454473744544737475737373737300757575737575752b2b757575
752b752b435841220063032d00010003032d0013032d0023032d0033032d
0053032d000500c3032d00d3032d00e3032d00f3032d00040083032d0093
032d00a3032d00b3032d0004032d032d4518694474747575592b4358b900
180332b330353238b80332b361663238b80332b3535a3238b80332b3454e
3238b80332b33c413218b80332b23f330a410f0332000100ba033200ca03
3200da033200ea033200fa03320005033203324518694474752b2b2b2b2b
2b597300732b012b7575002b2b2b74002b2b2b732b74012b002b2b017373
737474732b2b00732b2b002b2b2b017374732b012b2b012b2b2b2b2b2b2b
2b2b2b2b2b2b2b00017375007373004569440073730173742b2b2b2b2b73
2b00732b752b2b732b2b2b2b2b2b2b2b2b73742b2b00000000>
[3217 ] AllocGlyphStorage
]def 
108 44 
PrepFor2015
Type42DictEnd
1 120 1 <00010080ffe10405056b00380257401912952c010f010f020b03000f0428
0029052b4f014f0209113ab8014640d03638361a031b045f185f195f1a5f
1b06050d050e002ac03a04740b740d740e760f701e701f702f7030890886
0b870d870e840f872ba804a83310120d330d340d351d331d341d352f012f
022d04201e201f29292d333e013e023f043019301e301f30213d343d3548
0d482a540b560d57105629562b1d1f011f021b331f351b3654185419541a
59325c335c345c355c365a370e030b0b29130b1b29230b203a3b29303a72
12721389249807982f9930a82fc028c12ac62bc03af03a144e08381b006f
021baf01cf0102017f010101ba00b8034b400d359a311c1b1d6f1f1b1e1e
ba1db8034b4034199a142a2b2b3c0c0e140c0c0e2b0c2a0e0426092b0c2a
0e04062301fd0000062831032328140902ac01401e223401011f260126b8
012340102f11bf1102df11012011af11df110311b80287b71fac1e2b1009
0109b80123401f9f2e01bf2eef2eff2e032e404735402ecf2eef2e03002e
202e302ec02e042ebc014600390146011800182b4e10f45d5d2b71724ded
72f4edfd5d7172fd72392f2bed003fed3fed3c10ed111217390111121739
870e2e2b0e7d10c4180010ecf4ed0110edf4ed0010ecf4ed5d011071edf4
ed3130437940362430071328260b2c093300290f26330124132633010730
0933000a2d0c33000b0c2c2b27102a33010f0e292a2512233300082f0633
01002b2b103c103c2b103c103c2b012b2b2b2b2b8181015d00725d435840
09630b660d6710632b045d595d0171722b0071005d435c58400c0b180f39
04300f3933300f39002b2b2b590111232e0223220615141716171e021514
062322272626232206072311331e02333236353426272624262635343633
3217163332363703ab25125dac5c68882b3ee9be8b4befbc3b341fc31a19
1d0725251a58b56c7d91373a27fea4934ce0ad6c7938171a210a056bfe2b
87a05e7f513e334b7d666d94519adf09053f1e2f01d1929160845a32662c
1ec3748c5492d335191f2f000000>DLGQMX+TimesNewRomanPSMT AddT42Char 
1 884 2 <000100f000000306056800160097401440186018a018e018040018401802
76008600020e411301690141000901a00022000301690141000801a00023
000001f8000f016900160141000001f2400e010f0f020902010509080c02
0300ba01f70003014940120e0e0f401135300f7f0f900fa00f040f1917ba
022401e400182b4e10f45d2b3c4d10ede4103c003f3c3f3c111239011139
00f5edfc01f52b2b3130005d01715d13253311141616171521353e023511
34272626232207f0014a21133c5cfe026038160a07251a254204c7a1fb87
72381e022525021d317a02dc942a201e1f00>DLGQMX+TimesNewRomanPSMT AddT42Char 
1 0 0 <0002011c0000051c050000030007004db10201bb02be0006000702bfb200
0504b802beb403000a0704b802beb5010019080605bf02be000200030129
0009016b015e00182b10f63cfd3c4e10f43c4dfd3c003f3cfd3c10fc3cfd
3c31302111211125211121011c0400fc2003c0fc400500fb002004c00000
>DLGQMX+TimesNewRomanPSMT AddT42Char 
DLGQMX+TimesNewRomanPSMT /CharStrings get begin
/g1 1 def
/g2 2 def
end
DLGQMX+TimesNewRomanPSMT /Encoding get
dup 1 /g1 put
dup 2 /g2 put
pop
end
%ADOEndSubsetFont
/NSDPPB+TimesNewRomanPSMT /DLGQMX+TimesNewRomanPSMT findfont ct_VMDictPut/NSDPPB+TimesNewRomanPSMT*1 [/.notdef /g1 /g2 253{/.notdef}rp]NSDPPB+TimesNewRomanPSMT nfNSDPPB+TimesNewRomanPSMT*1 [0 -14.4 -14.4 0 0 0 ]msf140 18.6572 mo(\001)shNSDPPB+TimesNewRomanPSMT*1 [0 -9.36013 -9.36013 0 0 0 ]msf142.88 10.6416 mo(\002)sh216 1.35901 mo
222.023 1.35901 226.91 6.242 226.91 12.27 cv
226.91 18.293 222.023 23.176 216 23.176 cv
209.977 23.176 205.09 18.293 205.09 12.27 cv
205.09 6.242 209.977 1.35901 216 1.35901 cv
cp
0 .00579843 .00103761 0 cmyk
f
216 1.35901 mo
222.023 1.35901 226.91 6.242 226.91 12.27 cv
226.91 18.293 222.023 23.176 216 23.176 cv
209.977 23.176 205.09 18.293 205.09 12.27 cv
205.09 6.242 209.977 1.35901 216 1.35901 cv
cp
.75021 .679683 .670222 .90164 cmyk
@
%ADOBeginSubsetFont: DLGQMX+TimesNewRomanPSMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal DLGQMX+TimesNewRomanPSMT gcheck setglobal} if
1 1112 3 <0001002c000003ab0568001e0168408207180b3917181c3d3418401c3d34
19401c3d340f1e161629073c074907a9070640205b045a085b175a186b08
741174129c0b9d0e9911ac0bac0ec905c917c818d917d918e020f904f917
1515011d0419051b15191619171d180709170b180b1d3419471989178f20
0718190202171a190c19060d031902050618171615140713040db8016840
090940140c3f80090109b80333400c10051a8f19019f19af190219ba0333
0003018db301020c1eb8018d400d0006e24f135f136f137f130413b80107
4013400001001a002040208020036020a020022019bb01f90003000d0140
40145f026f027f028f02bf02cf02df02ef020802191fba018e010100182b
4e10f45d4de43ced4e105d71f65d4df45ded10ed003f3cedfd5d713c3ffd
71b10602435458b78f0901bf09cf0902005d71592be41112173911123901
111239390210b10602435458b47d198d1902005d590e3c8710057dc40ec4
31300171725d005d012b2b2b002b01032135000035342623220607233636
33321615140706070207213236363703ab5ffce0016101209e6e649f2625
19cf9ba5dd304aa6f93e01626c57461a0105fefb2501420198a981a67571
b9c6d4906767a2b5fef03810312d>DLGQMX+TimesNewRomanPSMT AddT42Char 
DLGQMX+TimesNewRomanPSMT /CharStrings get begin
/g3 3 def
end
DLGQMX+TimesNewRomanPSMT /Encoding get
dup 3 /g3 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/NSDPPB+TimesNewRomanPSMT*1 [/.notdef /g1 /g2 /g3 252{/.notdef}rp]NSDPPB+TimesNewRomanPSMT nfNSDPPB+TimesNewRomanPSMT*1 [0 -14.4 -14.4 0 0 0 ]msf219.436 18.8717 mo(\001)shNSDPPB+TimesNewRomanPSMT*1 [0 -9.36013 -9.36013 0 0 0 ]msf222.316 10.8561 mo(\003)sh429.09 1.34003 mo
435.117 1.34003 440 6.22302 440 12.246 cv
440 18.273 435.117 23.156 429.09 23.156 cv
423.066 23.156 418.184 18.273 418.184 12.246 cv
418.184 6.22302 423.066 1.34003 429.09 1.34003 cv
cp
0 .00579843 .00103761 0 cmyk
f
429.09 1.34003 mo
435.117 1.34003 440 6.22302 440 12.246 cv
440 18.273 435.117 23.156 429.09 23.156 cv
423.066 23.156 418.184 18.273 418.184 12.246 cv
418.184 6.22302 423.066 1.34003 429.09 1.34003 cv
cp
.75021 .679683 .670222 .90164 cmyk
@
%ADOBeginSubsetFont: DLGQMX+TimesNewRomanPSMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal DLGQMX+TimesNewRomanPSMT gcheck setglobal} if
1 1576 4 <00010053ffe8035605680032014cb9000affe0b20c3909b8ffc0403c0c39
4109450a460b4b2204cf09012929382940346034cf34e034f70a07003401
41097f237a2eaa24b924ba2ec92edf23df25db2eea22e9250c490829b801
8cb328281000b802e4b3d0300130b80334b5030510160116b8019fb51d40
2b2f341db80143b3100d2928bb01680014000902e3400b50208020029020
a0200220b80333b3b00c010cb80190400b502d802d02902da02d022db803
33b55f077f070207b802e5400a403401a034c034023400b8013eb74013bf
1302131933ba011e01e800182b4e10f45d4de4105d71f65ded5d71f45ded
5d71e410f43c003fed2bed723fed5ded12392fed3130437940362e2f1e26
0a0f04062221232124212521040605250e26260a2062012f042d62011e0f
206201210b2762010a092e063062011f0d1d62002b2b103c2b012b2b2b2b
2b2a81818181005d01715d7200712b2b1336363332171615140716161514
070621222635343633321716161716333236353427262726262323353e02
353426232207683ab184a35742ba7d807092feeb89632f21191a11781725
2a6697231a1f2b964e204f9f4881609b68044a89956a4f5a949e31b67bb0
81a844271d2c08053f060b9e6c4f4b381d28411e0a5e844f677fa6000000
>DLGQMX+TimesNewRomanPSMT AddT42Char 
DLGQMX+TimesNewRomanPSMT /CharStrings get begin
/g4 4 def
end
DLGQMX+TimesNewRomanPSMT /Encoding get
dup 4 /g4 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/NSDPPB+TimesNewRomanPSMT*1 [/.notdef /g1 /g2 /g3 /g4 251{/.notdef}rp]NSDPPB+TimesNewRomanPSMT nfNSDPPB+TimesNewRomanPSMT*1 [0 -14.4 -14.4 0 0 0 ]msf432.472 18.6573 mo(\001)shNSDPPB+TimesNewRomanPSMT*1 [0 -9.36013 -9.36013 0 0 0 ]msf435.352 10.6417 mo(\004)sh504.562 1.08606 mo
510.59 1.08606 515.473 5.97302 515.473 11.996 cv
515.473 18.02 510.59 22.906 504.562 22.906 cv
498.539 22.906 493.656 18.02 493.656 11.996 cv
493.656 5.97302 498.539 1.08606 504.562 1.08606 cv
cp
0 .00579843 .00103761 0 cmyk
f
504.562 1.08606 mo
510.59 1.08606 515.473 5.97302 515.473 11.996 cv
515.473 18.02 510.59 22.906 504.562 22.906 cv
498.539 22.906 493.656 18.02 493.656 11.996 cv
493.656 5.97302 498.539 1.08606 504.562 1.08606 cv
cp
.75021 .679683 .670222 .90164 cmyk
@
%ADOBeginSubsetFont: DLGQMX+TimesNewRomanPSMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal DLGQMX+TimesNewRomanPSMT gcheck setglobal} if
1 2056 5 <00020020000003b90568000a000d00d74028160d010f00450d400f03400f
012a0c011507010206010309050601040c0b0d00040c0d04060c0d0db801
1c401207081407070808030407060c08001f0d010dbb019c0006000b019f
400d050106090806060805040c0c04bb0149000300080166400b09090f03
019f03af030203b801f74018013f0001001a000f01600fa00fe00f030f06
40070107190eba018e010100182b4e10f4713c105d71f65d3c4df45d713c
10e610fd3c003f3f392f103c103c10ed10fd723c1139113901111239872e
2b047d10c4011112390f0f0f313000725d015d7172011523112311213501
331123110103b9b6a5fdc202756ea5fe2401f48efe9a0166800382fc8c02
a1fd5f000000>DLGQMX+TimesNewRomanPSMT AddT42Char 
DLGQMX+TimesNewRomanPSMT /CharStrings get begin
/g5 5 def
end
DLGQMX+TimesNewRomanPSMT /Encoding get
dup 5 /g5 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/NSDPPB+TimesNewRomanPSMT*1 [/.notdef /g1 /g2 /g3 /g4 /g5 250{/.notdef}rp]NSDPPB+TimesNewRomanPSMT nfNSDPPB+TimesNewRomanPSMT*1 [0 -14.4 -14.4 0 0 0 ]msf508 18.6313 mo(\001)shNSDPPB+TimesNewRomanPSMT*1 [0 -9.36013 -9.36013 0 0 0 ]msf510.88 10.6157 mo(\005)sh466.91 1.34003 mo
472.934 1.34003 477.816 6.22302 477.816 12.246 cv
477.816 18.273 472.934 23.156 466.91 23.156 cv
460.883 23.156 456 18.273 456 12.246 cv
456 6.22302 460.883 1.34003 466.91 1.34003 cv
cp
0 .00579843 .00103761 0 cmyk
f
466.91 1.34003 mo
472.934 1.34003 477.816 6.22302 477.816 12.246 cv
477.816 18.273 472.934 23.156 466.91 23.156 cv
460.883 23.156 456 18.273 456 12.246 cv
456 6.22302 460.883 1.34003 466.91 1.34003 cv
cp
.75021 .679683 .670222 .90164 cmyk
@
%ADOBeginSubsetFont: DLGQMX+TimesNewRomanPSMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal DLGQMX+TimesNewRomanPSMT gcheck setglobal} if
1 2332 6 <00010062ffe80379054c0021011e4043a4040112591e691e7f057f067f1d
8c048d1d07350235215503552057216b1c7605791c87028a1a8a1ca303a8
09a023e0230f0023010f1011121315161708140d020303b8011c40112021
1420030420211a1b1c030718040503b8019fb320202113ba01f900180313
400c0d0d01e20002e22121000400ba013e001b0147b58007a0070207b801
f5400a40230140236023022316b801f9b61002a021012103b8019f400920
4010a01002101922ba019501e900182b4e10e45d4d10ed105d3c10ed105d
71f65dede4003f3c10ed10ed3feded12392fed0111391112173987082e2b
057d10c40011121739b10602435458400d72017202722082018202822006
005d59313001715d005d435c58400b6b046f12641e7005701d055d59015d
010721070417161514060607062322263534363332161716333236353426
2726270103794efe685901099b8557845173797a6f2e231a272f4b4d75b1
9e8b6dbc0104054caab6279e88b86bb680273753321c2b102134b17f7bd5
3a2d07020f00>DLGQMX+TimesNewRomanPSMT AddT42Char 
1 2728 7 <00010019fff203eb058b001e00da401a380b680bc80b036503690d750303
0f204f20550303070b1a1919b8fff0403d08140655193008071408080708
09080709100d0d065509240a0b140a0a0b1100120112120eaf1501000001
1001200130010401011d1d04090a0a002f01b802f240091a2f07e108112f
4012ba01af000b011b40090820098b40300a010ab802bb400f2000084008
029f08f008020808201f191112392f5d711afd5d1a18ed1a1910fd18f41a
ed1910f418edfded003f3c2f332f332f5d3c3fed332f5d3c87052e2b2b08
7d10c4870e2e182b2b0e7d10c4002e2e3130015d5d5d0133140623222627
030123012626232206072336363332161613131616333203c724674d3f74
2e56fed6bd01ac226047395505240370543661474b472b5f427001209e90
5fcf0184fd5c039ab3ac575b93b159d7feaefec3c5850000>DLGQMX+TimesNewRomanPSMT AddT42Char 
1 3052 8 <0002002501db045c037300030007007cb10607b80327b6054f045f040204
be034c00020003032700010000ff80403b3a35000080000250008000a000
d000e0000500060605050202100101d0010130014001a001030001100120
0103015c090704040303005c08585e182b10f63c103c103c10f65d5d7172
3c103c103c003f5d712b3cfd3cf65d3cfd3c313013211521152115212504
37fbc90437fbc9037352f4520000>DLGQMX+TimesNewRomanPSMT AddT42Char 
DLGQMX+TimesNewRomanPSMT /CharStrings get begin
/g6 6 def
/g7 7 def
/g8 8 def
end
DLGQMX+TimesNewRomanPSMT /Encoding get
dup 6 /g6 put
dup 7 /g7 put
dup 8 /g8 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/NSDPPB+TimesNewRomanPSMT*1 [/.notdef /g1 /g2 /g3 /g4 /g5 /g6 /g7 /g8 247{/.notdef}rp]NSDPPB+TimesNewRomanPSMT nfNSDPPB+TimesNewRomanPSMT*1 [0 -14.4 -14.4 0 0 0 ]msf470.29 18.7374 mo(\001)shNSDPPB+TimesNewRomanPSMT*1 [0 -9.36013 -9.36013 0 0 0 ]msf473.17 10.7217 mo(\006)shNSDPPB+TimesNewRomanPSMT*1 [0 -16 -16 0 0 0 ]msf18.3002 108.292 mo(\007\010\002)[-7.7439 -9.00806 0 ]yshgrestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
/NSDPPB+TimesNewRomanPSMT*1 uf/NSDPPB+TimesNewRomanPSMT uf/DLGQMX+TimesNewRomanPSMT ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
